
CAMERA_GRAY.elf:     file format elf32-littlenios2
CAMERA_GRAY.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00006a84 memsz 0x00006a84 flags r-x
    LOAD off    0x00007aa4 vaddr 0x00006aa4 paddr 0x0000874c align 2**12
         filesz 0x00001ca8 memsz 0x00001ca8 flags rw-
    LOAD off    0x0000a3f4 vaddr 0x0000a3f4 paddr 0x0000a3f4 align 2**12
         filesz 0x00000000 memsz 0x0008015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006738  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000124  00006980  00006980  00007980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ca8  00006aa4  0000874c  00007aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00080201  0000a3f4  0000a3f4  0000a3f4  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0008a550  0008a550  0000974c  2**0
                  CONTENTS
  7 .Onchip_SRAM  00000000  08000000  08000000  0000974c  2**0
                  CONTENTS
  8 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  0000974c  2**0
                  CONTENTS
  9 .ARM_A9_HPS_axi_sdram 00000000  40000000  40000000  0000974c  2**0
                  CONTENTS
 10 .comment      00000046  00000000  00000000  0000974c  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000a50  00000000  00000000  00009798  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000176aa  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006312  00000000  00000000  00021892  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006f37  00000000  00000000  00027ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000019a4  00000000  00000000  0002eadc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002e26  00000000  00000000  00030480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000049c3  00000000  00000000  000332a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_alt_sim_info 00000020  00000000  00000000  00037c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00000680  00000000  00000000  00037c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .thread_model 00000003  00000000  00000000  0003b061  2**0
                  CONTENTS, READONLY
 21 .cpu          00000005  00000000  00000000  0003b064  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  0003b069  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  0003b06a  2**0
                  CONTENTS, READONLY
 24 .sysid_hash   00000004  00000000  00000000  0003b06b  2**0
                  CONTENTS, READONLY
 25 .sysid_base   00000004  00000000  00000000  0003b06f  2**0
                  CONTENTS, READONLY
 26 .sysid_time   00000004  00000000  00000000  0003b073  2**0
                  CONTENTS, READONLY
 27 .stderr_dev   00000009  00000000  00000000  0003b077  2**0
                  CONTENTS, READONLY
 28 .stdin_dev    00000009  00000000  00000000  0003b080  2**0
                  CONTENTS, READONLY
 29 .stdout_dev   00000009  00000000  00000000  0003b089  2**0
                  CONTENTS, READONLY
 30 .sopc_system_name 0000000f  00000000  00000000  0003b092  2**0
                  CONTENTS, READONLY
 31 .quartus_project_dir 0000002b  00000000  00000000  0003b0a1  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     00488199  00000000  00000000  0003b0cc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
00006980 l    d  .rodata	00000000 .rodata
00006aa4 l    d  .rwdata	00000000 .rwdata
0000a3f4 l    d  .bss	00000000 .bss
0008a550 l    d  .SDRAM	00000000 .SDRAM
08000000 l    d  .Onchip_SRAM	00000000 .Onchip_SRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
40000000 l    d  .ARM_A9_HPS_axi_sdram	00000000 .ARM_A9_HPS_axi_sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/src/KAU_EMBEDED_19/Quartus/software/CAMERA_GRAY_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00000560 l     F .text	00000008 __fp_unlock
00000574 l     F .text	0000019c __sinit.part.1
00000710 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00006aa4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
000031bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000032c8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000032f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000033e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000034c0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000035ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00003780 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000873c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000039cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00003b00 l     F .text	00000034 alt_dev_reg
00007478 l     O .rwdata	00001060 JTAG_UART
000084d8 l     O .rwdata	0000002c ADC
00008504 l     O .rwdata	00000030 AV_Config
00008534 l     O .rwdata	00000030 Audio_Subsystem_Audio
00008564 l     O .rwdata	0000002c IrDA
00008590 l     O .rwdata	00000038 PS2_Port
000085c8 l     O .rwdata	00000038 PS2_Port_Dual
00008600 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
0000865c l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
000086b8 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00004514 l     F .text	00000210 altera_avalon_jtag_uart_irq
00004724 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00004d5c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000059d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005c38 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00005ef8 l     F .text	0000003c alt_get_errno
00005f34 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000a424 g     O .bss	00000004 alt_instruction_exception_handler
00002fb4 g     F .text	00000054 _isatty_r
000036bc g     F .text	0000007c alt_main
000003f4 g     F .text	000000c0 _puts_r
0008a450 g     O .bss	00000100 alt_irq
00005424 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00002cdc g     F .text	00000060 _lseek_r
0000874c g       *ABS*	00000000 __flash_rwdata_start
0008a550 g       *ABS*	00000000 __alt_heap_start
00002290 g     F .text	0000005c __sseek
000008b0 g     F .text	00000010 __sinit
0000523c g     F .text	00000034 read_CE_bit
00000718 g     F .text	00000068 __sfmoreglue
0000375c g     F .text	00000024 __malloc_unlock
000055c4 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0000197c g     F .text	0000015c memmove
00000898 g     F .text	00000018 _cleanup
0000a3f4 g     O .bss	00000004 pixel_buffer_start
000062f0 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002f58 g     F .text	0000005c _fstat_r
0000a408 g     O .bss	00000004 errno
0000220c g     F .text	00000008 __seofread
0000a410 g     O .bss	00000004 alt_argv
0001070c g       *ABS*	00000000 _gp
000072f8 g     O .rwdata	00000180 alt_fd_list
00005b74 g     F .text	00000090 alt_find_dev
00001834 g     F .text	00000148 memcpy
00000568 g     F .text	0000000c _cleanup_r
00005cfc g     F .text	0000007c alt_io_redirect
00006980 g       *ABS*	00000000 __DTOR_END__
0000a450 g     O .bss	00040000 front_buffer
0000510c g     F .text	00000090 alt_up_irda_write_fd
00008710 g     O .rwdata	00000004 video_ctrl_ptr
000004b4 g     F .text	00000014 puts
00006550 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000039c g     F .text	00000058 plot_pixel
00004f08 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0000491c g     F .text	0000021c altera_avalon_jtag_uart_read
00003100 g     F .text	00000064 .hidden __udivsi3
0000341c g     F .text	000000a4 isatty
00004ea8 g     F .text	00000060 alt_up_irda_disable_read_interrupt
000064c0 g     F .text	00000090 alt_icache_flush
0000a404 g     O .bss	00000004 __malloc_top_pad
000002d4 g     F .text	00000078 fillColor
00000900 g     F .text	000004bc __sfvwrite_r
00002164 g     F .text	00000054 _sbrk_r
00002ef8 g     F .text	00000060 _read_r
00008734 g     O .rwdata	00000004 alt_max_fd
000024fc g     F .text	000000f0 _fclose_r
00005270 g     F .text	00000030 read_num_bytes_available
00002878 g     F .text	00000030 fflush
0000a400 g     O .bss	00000004 __malloc_max_sbrked_mem
00005d78 g     F .text	00000180 alt_irq_register
000051d8 g     F .text	00000034 read_RI_bit
0000870c g     O .rwdata	00000004 pixel_ctrl_ptr
000035e8 g     F .text	000000d4 lseek
00008714 g     O .rwdata	00000004 _global_impure_ptr
00001c00 g     F .text	00000564 _realloc_r
0008a550 g       *ABS*	00000000 __bss_end
000061e8 g     F .text	00000108 alt_tick
000052d4 g     F .text	0000002c read_data_byte
000008d0 g     F .text	00000018 __fp_lock_all
0000614c g     F .text	0000009c alt_alarm_stop
0000520c g     F .text	00000030 read_RE_bit
0000a418 g     O .bss	00000004 alt_irq_active
00004f48 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
000072d0 g     O .rwdata	00000028 alt_dev_null
00005484 g     F .text	00000074 alt_up_ps2_write_data_byte
000059b4 g     F .text	00000020 alt_dcache_flush_all
0000874c g       *ABS*	00000000 __ram_rwdata_end
0000872c g     O .rwdata	00000008 alt_dev_list
00003a08 g     F .text	000000f8 write
00006aa4 g       *ABS*	00000000 __ram_rodata_end
00003330 g     F .text	000000b0 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
40000000 g       *ABS*	00000000 __alt_mem_ARM_A9_HPS_axi_sdram
00003164 g     F .text	00000058 .hidden __umodsi3
0008a550 g       *ABS*	00000000 end
000057b4 g     F .text	00000098 alt_up_ps2_write_fd
00004f84 g     F .text	00000044 alt_up_irda_check_parity
00004460 g     F .text	000000b4 altera_avalon_jtag_uart_init
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00006980 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
00004dd8 g     F .text	00000074 alt_avalon_timer_sc_init
00004b38 g     F .text	00000224 altera_avalon_jtag_uart_write
000008c0 g     F .text	00000004 __sfp_lock_acquire
00001750 g     F .text	000000e4 memchr
000029cc g     F .text	00000310 _free_r
000067cc g     F .text	00000180 __call_exitprocs
0000871c g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
0000a41c g     O .bss	00000004 _alt_tick_rate
0000a420 g     O .bss	00000004 _alt_nticks
000037bc g     F .text	000000fc read
00003b6c g     F .text	00000790 alt_sys_init
000066b4 g     F .text	00000118 __register_exitproc
000056d0 g     F .text	00000058 alt_up_ps2_clear_fifo
000047c4 g     F .text	00000068 altera_avalon_jtag_uart_close
00006aa4 g       *ABS*	00000000 __ram_rwdata_start
00006980 g       *ABS*	00000000 __ram_rodata_start
0000a428 g     O .bss	00000028 __malloc_current_mallinfo
000042fc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000641c g     F .text	000000a4 alt_get_fd
000024a8 g     F .text	00000054 _close_r
00006638 g     F .text	0000007c memcmp
000043bc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0008a550 g       *ABS*	00000000 __alt_stack_base
0000440c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004e4c g     F .text	0000005c alt_up_irda_enable_read_interrupt
00002354 g     F .text	00000154 __swsetup_r
00000780 g     F .text	00000118 __sfp
00006ec8 g     O .rwdata	00000408 __malloc_av_
000008cc g     F .text	00000004 __sinit_lock_release
000021b8 g     F .text	00000054 __sread
00006314 g     F .text	00000108 alt_find_file
00005a10 g     F .text	000000a4 alt_dev_llist_insert
00003738 g     F .text	00000024 __malloc_lock
0000391c g     F .text	000000b0 sbrk
0000281c g     F .text	0000005c _fflush_r
0000a3f4 g       *ABS*	00000000 __bss_start
00001ad8 g     F .text	00000128 memset
00000284 g     F .text	00000050 main
0000a414 g     O .bss	00000004 alt_envp
0000a3fc g     O .bss	00000004 __malloc_max_total_mem
0000435c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000022ec g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
000025ec g     F .text	00000014 fclose
00005660 g     F .text	00000070 alt_up_ps2_read_data_byte
00000f44 g     F .text	0000080c _malloc_r
00008738 g     O .rwdata	00000004 alt_errno
00000dbc g     F .text	000000c4 _fwalk
00004fc8 g     F .text	00000040 alt_up_irda_write_data
0000584c g     F .text	0000003c alt_up_ps2_open_dev
00003008 g     F .text	00000084 .hidden __divsi3
000028a8 g     F .text	00000124 _malloc_trim_r
000053c8 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
00006980 g       *ABS*	00000000 __CTOR_END__
00006980 g       *ABS*	00000000 __flash_rodata_start
00006980 g       *ABS*	00000000 __DTOR_LIST__
00003b34 g     F .text	00000038 alt_irq_init
000038b8 g     F .text	00000064 alt_release_fd
000052a0 g     F .text	00000034 read_data_valid
00005560 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
000065ec g     F .text	00000014 atexit
000022f4 g     F .text	00000060 _write_r
00008718 g     O .rwdata	00000004 _impure_ptr
0000a40c g     O .bss	00000004 alt_argc
00002600 g     F .text	0000021c __sflush_r
00005b14 g     F .text	00000060 _do_dtors
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000020 g       .exceptions	00000000 alt_irq_entry
000008e8 g     F .text	00000018 __fp_unlock_all
00008724 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
0004a450 g     O .bss	00040000 back_buffer
0000a3f8 g     O .bss	00000004 video_buffer_start
0000874c g       *ABS*	00000000 _edata
0008a550 g       *ABS*	00000000 _end
00000248 g       *ABS*	00000000 __ram_exceptions_end
0000482c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08000000 g       *ABS*	00000000 __alt_mem_Onchip_SRAM
0000034c g     F .text	00000050 wait_for_vsync
00002214 g     F .text	0000007c __swrite
00008720 g     O .rwdata	00000004 __malloc_trim_threshold
00006600 g     F .text	00000038 exit
00005008 g     F .text	00000074 alt_up_irda_read_data
00000e80 g     F .text	000000c4 _fwalk_reent
00005300 g     F .text	000000c8 alt_up_ps2_init
0000308c g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000008c4 g     F .text	00000004 __sfp_lock_release
0000519c g     F .text	0000003c alt_up_irda_open_dev
0000694c g     F .text	00000034 _exit
00005888 g     F .text	0000012c alt_alarm_start
00002d3c g     F .text	000001bc __smakebuf_r
000054f8 g     F .text	00000068 alt_up_ps2_wait_for_ack
000004c8 g     F .text	00000098 strlen
00005ff8 g     F .text	00000154 open
00005c04 g     F .text	00000034 alt_icache_flush_all
00008740 g     O .rwdata	00000004 alt_priority_mask
00005728 g     F .text	0000008c alt_up_ps2_read_fd
0000507c g     F .text	00000090 alt_up_irda_read_fd
00008744 g     O .rwdata	00000008 alt_alarm_list
00005ab4 g     F .text	00000060 _do_ctors
000031f8 g     F .text	000000d0 close
00003528 g     F .text	00000084 alt_load
000008c8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800274 	movhi	r2,9
 140:	10a91404 	addi	r2,r2,-23472
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800274 	movhi	r2,9
 158:	10a91404 	addi	r2,r2,-23472
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a74617 	ldw	r2,-25320(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a74617 	ldw	r2,-25320(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     254:	d681c314 	ori	gp,gp,1804
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     25c:	10a8fd14 	ori	r2,r2,41972

    movhi r3, %hi(__bss_end)
     260:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
     264:	18e95414 	ori	r3,r3,42320

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	00035280 	call	3528 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	00036bc0 	call	36bc <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000280>

00000284 <main>:
short int front_buffer[512 * 256];
short int back_buffer[512 * 256];
volatile int pixel_buffer_start;
volatile int video_buffer_start;

int main() {
     284:	defffd04 	addi	sp,sp,-12
     288:	dfc00215 	stw	ra,8(sp)
     28c:	df000115 	stw	fp,4(sp)
     290:	df000104 	addi	fp,sp,4
   int pb_ctxt=0;
     294:	e03fff15 	stw	zero,-4(fp)
   *(video_ctrl_ptr+3) = 0;
     298:	d0a00117 	ldw	r2,-32764(gp)
     29c:	10800304 	addi	r2,r2,12
     2a0:	10000015 	stw	zero,0(r2)
   printf("test\n");
     2a4:	01000034 	movhi	r4,0
     2a8:	211a6004 	addi	r4,r4,27008
     2ac:	00004b40 	call	4b4 <puts>
   while(1){
	   pixel_buffer_start = *(pixel_ctrl_ptr + 1);
     2b0:	d0a00017 	ldw	r2,-32768(gp)
     2b4:	10800117 	ldw	r2,4(r2)
     2b8:	d0a73a15 	stw	r2,-25368(gp)
	   video_buffer_start = *(video_ctrl_ptr);
     2bc:	d0a00117 	ldw	r2,-32764(gp)
     2c0:	10800017 	ldw	r2,0(r2)
     2c4:	d0a73b15 	stw	r2,-25364(gp)
	   fillColor();
     2c8:	00002d40 	call	2d4 <fillColor>

	   wait_for_vsync();
     2cc:	000034c0 	call	34c <wait_for_vsync>
   }
     2d0:	003ff706 	br	2b0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00002b0>

000002d4 <fillColor>:

   return 0;
}

void fillColor(){
     2d4:	defffc04 	addi	sp,sp,-16
     2d8:	dfc00315 	stw	ra,12(sp)
     2dc:	df000215 	stw	fp,8(sp)
     2e0:	df000204 	addi	fp,sp,8
   for(int i=0;i<320;i++)
     2e4:	e03ffe15 	stw	zero,-8(fp)
     2e8:	00000f06 	br	328 <fillColor+0x54>
      for(int j=0;j<240;j++)
     2ec:	e03fff15 	stw	zero,-4(fp)
     2f0:	00000706 	br	310 <fillColor+0x3c>
         plot_pixel(i, j, 0xFFFF);
     2f4:	01bfffc4 	movi	r6,-1
     2f8:	e17fff17 	ldw	r5,-4(fp)
     2fc:	e13ffe17 	ldw	r4,-8(fp)
     300:	000039c0 	call	39c <plot_pixel>
   return 0;
}

void fillColor(){
   for(int i=0;i<320;i++)
      for(int j=0;j<240;j++)
     304:	e0bfff17 	ldw	r2,-4(fp)
     308:	10800044 	addi	r2,r2,1
     30c:	e0bfff15 	stw	r2,-4(fp)
     310:	e0bfff17 	ldw	r2,-4(fp)
     314:	10803c10 	cmplti	r2,r2,240
     318:	103ff61e 	bne	r2,zero,2f4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00002f4>

   return 0;
}

void fillColor(){
   for(int i=0;i<320;i++)
     31c:	e0bffe17 	ldw	r2,-8(fp)
     320:	10800044 	addi	r2,r2,1
     324:	e0bffe15 	stw	r2,-8(fp)
     328:	e0bffe17 	ldw	r2,-8(fp)
     32c:	10805010 	cmplti	r2,r2,320
     330:	103fee1e 	bne	r2,zero,2ec <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00002ec>
      for(int j=0;j<240;j++)
         plot_pixel(i, j, 0xFFFF);
}
     334:	0001883a 	nop
     338:	e037883a 	mov	sp,fp
     33c:	dfc00117 	ldw	ra,4(sp)
     340:	df000017 	ldw	fp,0(sp)
     344:	dec00204 	addi	sp,sp,8
     348:	f800283a 	ret

0000034c <wait_for_vsync>:

void wait_for_vsync(void){
     34c:	defffe04 	addi	sp,sp,-8
     350:	df000115 	stw	fp,4(sp)
     354:	dc000015 	stw	r16,0(sp)
     358:	df000104 	addi	fp,sp,4
   register int status;
   *pixel_ctrl_ptr = 1;
     35c:	d0a00017 	ldw	r2,-32768(gp)
     360:	00c00044 	movi	r3,1
     364:	10c00015 	stw	r3,0(r2)

   status = *(pixel_ctrl_ptr +3);
     368:	d0a00017 	ldw	r2,-32768(gp)
     36c:	14000317 	ldw	r16,12(r2)
   while ((status & 0x01)!=0){
     370:	00000206 	br	37c <wait_for_vsync+0x30>
      status = *(pixel_ctrl_ptr + 3);
     374:	d0a00017 	ldw	r2,-32768(gp)
     378:	14000317 	ldw	r16,12(r2)
void wait_for_vsync(void){
   register int status;
   *pixel_ctrl_ptr = 1;

   status = *(pixel_ctrl_ptr +3);
   while ((status & 0x01)!=0){
     37c:	8080004c 	andi	r2,r16,1
     380:	103ffc1e 	bne	r2,zero,374 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000374>
      status = *(pixel_ctrl_ptr + 3);
   }
}
     384:	0001883a 	nop
     388:	e6ffff04 	addi	sp,fp,-4
     38c:	df000117 	ldw	fp,4(sp)
     390:	dc000017 	ldw	r16,0(sp)
     394:	dec00204 	addi	sp,sp,8
     398:	f800283a 	ret

0000039c <plot_pixel>:

void plot_pixel(int x, int y, short int line_color){
     39c:	defffc04 	addi	sp,sp,-16
     3a0:	df000315 	stw	fp,12(sp)
     3a4:	df000304 	addi	fp,sp,12
     3a8:	e13ffd15 	stw	r4,-12(fp)
     3ac:	e17ffe15 	stw	r5,-8(fp)
     3b0:	3005883a 	mov	r2,r6
     3b4:	e0bfff0d 	sth	r2,-4(fp)
   *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
     3b8:	e0bffe17 	ldw	r2,-8(fp)
     3bc:	100692ba 	slli	r3,r2,10
     3c0:	d0a73a17 	ldw	r2,-25368(gp)
     3c4:	1887883a 	add	r3,r3,r2
     3c8:	e0bffd17 	ldw	r2,-12(fp)
     3cc:	1085883a 	add	r2,r2,r2
     3d0:	1885883a 	add	r2,r3,r2
     3d4:	1007883a 	mov	r3,r2
     3d8:	e0bfff0b 	ldhu	r2,-4(fp)
     3dc:	1880000d 	sth	r2,0(r3)
}
     3e0:	0001883a 	nop
     3e4:	e037883a 	mov	sp,fp
     3e8:	df000017 	ldw	fp,0(sp)
     3ec:	dec00104 	addi	sp,sp,4
     3f0:	f800283a 	ret

000003f4 <_puts_r>:
     3f4:	defff604 	addi	sp,sp,-40
     3f8:	dc000715 	stw	r16,28(sp)
     3fc:	2021883a 	mov	r16,r4
     400:	2809883a 	mov	r4,r5
     404:	dc400815 	stw	r17,32(sp)
     408:	dfc00915 	stw	ra,36(sp)
     40c:	2823883a 	mov	r17,r5
     410:	00004c80 	call	4c8 <strlen>
     414:	10c00044 	addi	r3,r2,1
     418:	d8800115 	stw	r2,4(sp)
     41c:	00800034 	movhi	r2,0
     420:	109a6204 	addi	r2,r2,27016
     424:	d8800215 	stw	r2,8(sp)
     428:	00800044 	movi	r2,1
     42c:	d8800315 	stw	r2,12(sp)
     430:	00800084 	movi	r2,2
     434:	dc400015 	stw	r17,0(sp)
     438:	d8c00615 	stw	r3,24(sp)
     43c:	dec00415 	stw	sp,16(sp)
     440:	d8800515 	stw	r2,20(sp)
     444:	80000226 	beq	r16,zero,450 <_puts_r+0x5c>
     448:	80800e17 	ldw	r2,56(r16)
     44c:	10001426 	beq	r2,zero,4a0 <_puts_r+0xac>
     450:	81400217 	ldw	r5,8(r16)
     454:	2880030b 	ldhu	r2,12(r5)
     458:	10c8000c 	andi	r3,r2,8192
     45c:	1800061e 	bne	r3,zero,478 <_puts_r+0x84>
     460:	29001917 	ldw	r4,100(r5)
     464:	00f7ffc4 	movi	r3,-8193
     468:	10880014 	ori	r2,r2,8192
     46c:	20c6703a 	and	r3,r4,r3
     470:	2880030d 	sth	r2,12(r5)
     474:	28c01915 	stw	r3,100(r5)
     478:	d9800404 	addi	r6,sp,16
     47c:	8009883a 	mov	r4,r16
     480:	00009000 	call	900 <__sfvwrite_r>
     484:	1000091e 	bne	r2,zero,4ac <_puts_r+0xb8>
     488:	00800284 	movi	r2,10
     48c:	dfc00917 	ldw	ra,36(sp)
     490:	dc400817 	ldw	r17,32(sp)
     494:	dc000717 	ldw	r16,28(sp)
     498:	dec00a04 	addi	sp,sp,40
     49c:	f800283a 	ret
     4a0:	8009883a 	mov	r4,r16
     4a4:	00008b00 	call	8b0 <__sinit>
     4a8:	003fe906 	br	450 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000450>
     4ac:	00bfffc4 	movi	r2,-1
     4b0:	003ff606 	br	48c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000048c>

000004b4 <puts>:
     4b4:	00800074 	movhi	r2,1
     4b8:	10a1c604 	addi	r2,r2,-30952
     4bc:	200b883a 	mov	r5,r4
     4c0:	11000017 	ldw	r4,0(r2)
     4c4:	00003f41 	jmpi	3f4 <_puts_r>

000004c8 <strlen>:
     4c8:	208000cc 	andi	r2,r4,3
     4cc:	10002026 	beq	r2,zero,550 <strlen+0x88>
     4d0:	20800007 	ldb	r2,0(r4)
     4d4:	10002026 	beq	r2,zero,558 <strlen+0x90>
     4d8:	2005883a 	mov	r2,r4
     4dc:	00000206 	br	4e8 <strlen+0x20>
     4e0:	10c00007 	ldb	r3,0(r2)
     4e4:	18001826 	beq	r3,zero,548 <strlen+0x80>
     4e8:	10800044 	addi	r2,r2,1
     4ec:	10c000cc 	andi	r3,r2,3
     4f0:	183ffb1e 	bne	r3,zero,4e0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00004e0>
     4f4:	10c00017 	ldw	r3,0(r2)
     4f8:	01ffbff4 	movhi	r7,65279
     4fc:	39ffbfc4 	addi	r7,r7,-257
     500:	00ca303a 	nor	r5,zero,r3
     504:	01a02074 	movhi	r6,32897
     508:	19c7883a 	add	r3,r3,r7
     50c:	31a02004 	addi	r6,r6,-32640
     510:	1946703a 	and	r3,r3,r5
     514:	1986703a 	and	r3,r3,r6
     518:	1800091e 	bne	r3,zero,540 <strlen+0x78>
     51c:	10800104 	addi	r2,r2,4
     520:	10c00017 	ldw	r3,0(r2)
     524:	19cb883a 	add	r5,r3,r7
     528:	00c6303a 	nor	r3,zero,r3
     52c:	28c6703a 	and	r3,r5,r3
     530:	1986703a 	and	r3,r3,r6
     534:	183ff926 	beq	r3,zero,51c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000051c>
     538:	00000106 	br	540 <strlen+0x78>
     53c:	10800044 	addi	r2,r2,1
     540:	10c00007 	ldb	r3,0(r2)
     544:	183ffd1e 	bne	r3,zero,53c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000053c>
     548:	1105c83a 	sub	r2,r2,r4
     54c:	f800283a 	ret
     550:	2005883a 	mov	r2,r4
     554:	003fe706 	br	4f4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00004f4>
     558:	0005883a 	mov	r2,zero
     55c:	f800283a 	ret

00000560 <__fp_unlock>:
     560:	0005883a 	mov	r2,zero
     564:	f800283a 	ret

00000568 <_cleanup_r>:
     568:	01400034 	movhi	r5,0
     56c:	29493f04 	addi	r5,r5,9468
     570:	0000e801 	jmpi	e80 <_fwalk_reent>

00000574 <__sinit.part.1>:
     574:	defff704 	addi	sp,sp,-36
     578:	00c00034 	movhi	r3,0
     57c:	dfc00815 	stw	ra,32(sp)
     580:	ddc00715 	stw	r23,28(sp)
     584:	dd800615 	stw	r22,24(sp)
     588:	dd400515 	stw	r21,20(sp)
     58c:	dd000415 	stw	r20,16(sp)
     590:	dcc00315 	stw	r19,12(sp)
     594:	dc800215 	stw	r18,8(sp)
     598:	dc400115 	stw	r17,4(sp)
     59c:	dc000015 	stw	r16,0(sp)
     5a0:	18c15a04 	addi	r3,r3,1384
     5a4:	24000117 	ldw	r16,4(r4)
     5a8:	20c00f15 	stw	r3,60(r4)
     5ac:	2080bb04 	addi	r2,r4,748
     5b0:	00c000c4 	movi	r3,3
     5b4:	20c0b915 	stw	r3,740(r4)
     5b8:	2080ba15 	stw	r2,744(r4)
     5bc:	2000b815 	stw	zero,736(r4)
     5c0:	05c00204 	movi	r23,8
     5c4:	00800104 	movi	r2,4
     5c8:	2025883a 	mov	r18,r4
     5cc:	b80d883a 	mov	r6,r23
     5d0:	81001704 	addi	r4,r16,92
     5d4:	000b883a 	mov	r5,zero
     5d8:	80000015 	stw	zero,0(r16)
     5dc:	80000115 	stw	zero,4(r16)
     5e0:	80000215 	stw	zero,8(r16)
     5e4:	8080030d 	sth	r2,12(r16)
     5e8:	80001915 	stw	zero,100(r16)
     5ec:	8000038d 	sth	zero,14(r16)
     5f0:	80000415 	stw	zero,16(r16)
     5f4:	80000515 	stw	zero,20(r16)
     5f8:	80000615 	stw	zero,24(r16)
     5fc:	0001ad80 	call	1ad8 <memset>
     600:	05800034 	movhi	r22,0
     604:	94400217 	ldw	r17,8(r18)
     608:	05400034 	movhi	r21,0
     60c:	05000034 	movhi	r20,0
     610:	04c00034 	movhi	r19,0
     614:	b5886e04 	addi	r22,r22,8632
     618:	ad488504 	addi	r21,r21,8724
     61c:	a508a404 	addi	r20,r20,8848
     620:	9cc8bb04 	addi	r19,r19,8940
     624:	85800815 	stw	r22,32(r16)
     628:	85400915 	stw	r21,36(r16)
     62c:	85000a15 	stw	r20,40(r16)
     630:	84c00b15 	stw	r19,44(r16)
     634:	84000715 	stw	r16,28(r16)
     638:	00800284 	movi	r2,10
     63c:	8880030d 	sth	r2,12(r17)
     640:	00800044 	movi	r2,1
     644:	b80d883a 	mov	r6,r23
     648:	89001704 	addi	r4,r17,92
     64c:	000b883a 	mov	r5,zero
     650:	88000015 	stw	zero,0(r17)
     654:	88000115 	stw	zero,4(r17)
     658:	88000215 	stw	zero,8(r17)
     65c:	88001915 	stw	zero,100(r17)
     660:	8880038d 	sth	r2,14(r17)
     664:	88000415 	stw	zero,16(r17)
     668:	88000515 	stw	zero,20(r17)
     66c:	88000615 	stw	zero,24(r17)
     670:	0001ad80 	call	1ad8 <memset>
     674:	94000317 	ldw	r16,12(r18)
     678:	00800484 	movi	r2,18
     67c:	8c400715 	stw	r17,28(r17)
     680:	8d800815 	stw	r22,32(r17)
     684:	8d400915 	stw	r21,36(r17)
     688:	8d000a15 	stw	r20,40(r17)
     68c:	8cc00b15 	stw	r19,44(r17)
     690:	8080030d 	sth	r2,12(r16)
     694:	00800084 	movi	r2,2
     698:	80000015 	stw	zero,0(r16)
     69c:	80000115 	stw	zero,4(r16)
     6a0:	80000215 	stw	zero,8(r16)
     6a4:	80001915 	stw	zero,100(r16)
     6a8:	8080038d 	sth	r2,14(r16)
     6ac:	80000415 	stw	zero,16(r16)
     6b0:	80000515 	stw	zero,20(r16)
     6b4:	80000615 	stw	zero,24(r16)
     6b8:	b80d883a 	mov	r6,r23
     6bc:	000b883a 	mov	r5,zero
     6c0:	81001704 	addi	r4,r16,92
     6c4:	0001ad80 	call	1ad8 <memset>
     6c8:	00800044 	movi	r2,1
     6cc:	84000715 	stw	r16,28(r16)
     6d0:	85800815 	stw	r22,32(r16)
     6d4:	85400915 	stw	r21,36(r16)
     6d8:	85000a15 	stw	r20,40(r16)
     6dc:	84c00b15 	stw	r19,44(r16)
     6e0:	90800e15 	stw	r2,56(r18)
     6e4:	dfc00817 	ldw	ra,32(sp)
     6e8:	ddc00717 	ldw	r23,28(sp)
     6ec:	dd800617 	ldw	r22,24(sp)
     6f0:	dd400517 	ldw	r21,20(sp)
     6f4:	dd000417 	ldw	r20,16(sp)
     6f8:	dcc00317 	ldw	r19,12(sp)
     6fc:	dc800217 	ldw	r18,8(sp)
     700:	dc400117 	ldw	r17,4(sp)
     704:	dc000017 	ldw	r16,0(sp)
     708:	dec00904 	addi	sp,sp,36
     70c:	f800283a 	ret

00000710 <__fp_lock>:
     710:	0005883a 	mov	r2,zero
     714:	f800283a 	ret

00000718 <__sfmoreglue>:
     718:	defffc04 	addi	sp,sp,-16
     71c:	dc400115 	stw	r17,4(sp)
     720:	2c7fffc4 	addi	r17,r5,-1
     724:	8c401a24 	muli	r17,r17,104
     728:	dc800215 	stw	r18,8(sp)
     72c:	2825883a 	mov	r18,r5
     730:	89401d04 	addi	r5,r17,116
     734:	dc000015 	stw	r16,0(sp)
     738:	dfc00315 	stw	ra,12(sp)
     73c:	0000f440 	call	f44 <_malloc_r>
     740:	1021883a 	mov	r16,r2
     744:	10000726 	beq	r2,zero,764 <__sfmoreglue+0x4c>
     748:	11000304 	addi	r4,r2,12
     74c:	10000015 	stw	zero,0(r2)
     750:	14800115 	stw	r18,4(r2)
     754:	11000215 	stw	r4,8(r2)
     758:	89801a04 	addi	r6,r17,104
     75c:	000b883a 	mov	r5,zero
     760:	0001ad80 	call	1ad8 <memset>
     764:	8005883a 	mov	r2,r16
     768:	dfc00317 	ldw	ra,12(sp)
     76c:	dc800217 	ldw	r18,8(sp)
     770:	dc400117 	ldw	r17,4(sp)
     774:	dc000017 	ldw	r16,0(sp)
     778:	dec00404 	addi	sp,sp,16
     77c:	f800283a 	ret

00000780 <__sfp>:
     780:	defffb04 	addi	sp,sp,-20
     784:	dc000015 	stw	r16,0(sp)
     788:	04000074 	movhi	r16,1
     78c:	8421c504 	addi	r16,r16,-30956
     790:	dcc00315 	stw	r19,12(sp)
     794:	2027883a 	mov	r19,r4
     798:	81000017 	ldw	r4,0(r16)
     79c:	dfc00415 	stw	ra,16(sp)
     7a0:	dc800215 	stw	r18,8(sp)
     7a4:	20800e17 	ldw	r2,56(r4)
     7a8:	dc400115 	stw	r17,4(sp)
     7ac:	1000021e 	bne	r2,zero,7b8 <__sfp+0x38>
     7b0:	00005740 	call	574 <__sinit.part.1>
     7b4:	81000017 	ldw	r4,0(r16)
     7b8:	2480b804 	addi	r18,r4,736
     7bc:	047fffc4 	movi	r17,-1
     7c0:	91000117 	ldw	r4,4(r18)
     7c4:	94000217 	ldw	r16,8(r18)
     7c8:	213fffc4 	addi	r4,r4,-1
     7cc:	20000a16 	blt	r4,zero,7f8 <__sfp+0x78>
     7d0:	8080030f 	ldh	r2,12(r16)
     7d4:	10000c26 	beq	r2,zero,808 <__sfp+0x88>
     7d8:	80c01d04 	addi	r3,r16,116
     7dc:	00000206 	br	7e8 <__sfp+0x68>
     7e0:	18bfe60f 	ldh	r2,-104(r3)
     7e4:	10000826 	beq	r2,zero,808 <__sfp+0x88>
     7e8:	213fffc4 	addi	r4,r4,-1
     7ec:	1c3ffd04 	addi	r16,r3,-12
     7f0:	18c01a04 	addi	r3,r3,104
     7f4:	247ffa1e 	bne	r4,r17,7e0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00007e0>
     7f8:	90800017 	ldw	r2,0(r18)
     7fc:	10001d26 	beq	r2,zero,874 <__sfp+0xf4>
     800:	1025883a 	mov	r18,r2
     804:	003fee06 	br	7c0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00007c0>
     808:	00bfffc4 	movi	r2,-1
     80c:	8080038d 	sth	r2,14(r16)
     810:	00800044 	movi	r2,1
     814:	8080030d 	sth	r2,12(r16)
     818:	80001915 	stw	zero,100(r16)
     81c:	80000015 	stw	zero,0(r16)
     820:	80000215 	stw	zero,8(r16)
     824:	80000115 	stw	zero,4(r16)
     828:	80000415 	stw	zero,16(r16)
     82c:	80000515 	stw	zero,20(r16)
     830:	80000615 	stw	zero,24(r16)
     834:	01800204 	movi	r6,8
     838:	000b883a 	mov	r5,zero
     83c:	81001704 	addi	r4,r16,92
     840:	0001ad80 	call	1ad8 <memset>
     844:	8005883a 	mov	r2,r16
     848:	80000c15 	stw	zero,48(r16)
     84c:	80000d15 	stw	zero,52(r16)
     850:	80001115 	stw	zero,68(r16)
     854:	80001215 	stw	zero,72(r16)
     858:	dfc00417 	ldw	ra,16(sp)
     85c:	dcc00317 	ldw	r19,12(sp)
     860:	dc800217 	ldw	r18,8(sp)
     864:	dc400117 	ldw	r17,4(sp)
     868:	dc000017 	ldw	r16,0(sp)
     86c:	dec00504 	addi	sp,sp,20
     870:	f800283a 	ret
     874:	01400104 	movi	r5,4
     878:	9809883a 	mov	r4,r19
     87c:	00007180 	call	718 <__sfmoreglue>
     880:	90800015 	stw	r2,0(r18)
     884:	103fde1e 	bne	r2,zero,800 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000800>
     888:	00800304 	movi	r2,12
     88c:	98800015 	stw	r2,0(r19)
     890:	0005883a 	mov	r2,zero
     894:	003ff006 	br	858 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000858>

00000898 <_cleanup>:
     898:	00800074 	movhi	r2,1
     89c:	10a1c504 	addi	r2,r2,-30956
     8a0:	11000017 	ldw	r4,0(r2)
     8a4:	01400034 	movhi	r5,0
     8a8:	29493f04 	addi	r5,r5,9468
     8ac:	0000e801 	jmpi	e80 <_fwalk_reent>

000008b0 <__sinit>:
     8b0:	20800e17 	ldw	r2,56(r4)
     8b4:	10000126 	beq	r2,zero,8bc <__sinit+0xc>
     8b8:	f800283a 	ret
     8bc:	00005741 	jmpi	574 <__sinit.part.1>

000008c0 <__sfp_lock_acquire>:
     8c0:	f800283a 	ret

000008c4 <__sfp_lock_release>:
     8c4:	f800283a 	ret

000008c8 <__sinit_lock_acquire>:
     8c8:	f800283a 	ret

000008cc <__sinit_lock_release>:
     8cc:	f800283a 	ret

000008d0 <__fp_lock_all>:
     8d0:	00800074 	movhi	r2,1
     8d4:	10a1c604 	addi	r2,r2,-30952
     8d8:	11000017 	ldw	r4,0(r2)
     8dc:	01400034 	movhi	r5,0
     8e0:	2941c404 	addi	r5,r5,1808
     8e4:	0000dbc1 	jmpi	dbc <_fwalk>

000008e8 <__fp_unlock_all>:
     8e8:	00800074 	movhi	r2,1
     8ec:	10a1c604 	addi	r2,r2,-30952
     8f0:	11000017 	ldw	r4,0(r2)
     8f4:	01400034 	movhi	r5,0
     8f8:	29415804 	addi	r5,r5,1376
     8fc:	0000dbc1 	jmpi	dbc <_fwalk>

00000900 <__sfvwrite_r>:
     900:	30800217 	ldw	r2,8(r6)
     904:	10006726 	beq	r2,zero,aa4 <__sfvwrite_r+0x1a4>
     908:	28c0030b 	ldhu	r3,12(r5)
     90c:	defff404 	addi	sp,sp,-48
     910:	dd400715 	stw	r21,28(sp)
     914:	dd000615 	stw	r20,24(sp)
     918:	dc000215 	stw	r16,8(sp)
     91c:	dfc00b15 	stw	ra,44(sp)
     920:	df000a15 	stw	fp,40(sp)
     924:	ddc00915 	stw	r23,36(sp)
     928:	dd800815 	stw	r22,32(sp)
     92c:	dcc00515 	stw	r19,20(sp)
     930:	dc800415 	stw	r18,16(sp)
     934:	dc400315 	stw	r17,12(sp)
     938:	1880020c 	andi	r2,r3,8
     93c:	2821883a 	mov	r16,r5
     940:	202b883a 	mov	r21,r4
     944:	3029883a 	mov	r20,r6
     948:	10002726 	beq	r2,zero,9e8 <__sfvwrite_r+0xe8>
     94c:	28800417 	ldw	r2,16(r5)
     950:	10002526 	beq	r2,zero,9e8 <__sfvwrite_r+0xe8>
     954:	1880008c 	andi	r2,r3,2
     958:	a4400017 	ldw	r17,0(r20)
     95c:	10002a26 	beq	r2,zero,a08 <__sfvwrite_r+0x108>
     960:	05a00034 	movhi	r22,32768
     964:	0027883a 	mov	r19,zero
     968:	0025883a 	mov	r18,zero
     96c:	b5bf0004 	addi	r22,r22,-1024
     970:	980d883a 	mov	r6,r19
     974:	a809883a 	mov	r4,r21
     978:	90004626 	beq	r18,zero,a94 <__sfvwrite_r+0x194>
     97c:	900f883a 	mov	r7,r18
     980:	b480022e 	bgeu	r22,r18,98c <__sfvwrite_r+0x8c>
     984:	01e00034 	movhi	r7,32768
     988:	39ff0004 	addi	r7,r7,-1024
     98c:	80800917 	ldw	r2,36(r16)
     990:	81400717 	ldw	r5,28(r16)
     994:	103ee83a 	callr	r2
     998:	0080570e 	bge	zero,r2,af8 <__sfvwrite_r+0x1f8>
     99c:	a0c00217 	ldw	r3,8(r20)
     9a0:	98a7883a 	add	r19,r19,r2
     9a4:	90a5c83a 	sub	r18,r18,r2
     9a8:	1885c83a 	sub	r2,r3,r2
     9ac:	a0800215 	stw	r2,8(r20)
     9b0:	103fef1e 	bne	r2,zero,970 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000970>
     9b4:	0005883a 	mov	r2,zero
     9b8:	dfc00b17 	ldw	ra,44(sp)
     9bc:	df000a17 	ldw	fp,40(sp)
     9c0:	ddc00917 	ldw	r23,36(sp)
     9c4:	dd800817 	ldw	r22,32(sp)
     9c8:	dd400717 	ldw	r21,28(sp)
     9cc:	dd000617 	ldw	r20,24(sp)
     9d0:	dcc00517 	ldw	r19,20(sp)
     9d4:	dc800417 	ldw	r18,16(sp)
     9d8:	dc400317 	ldw	r17,12(sp)
     9dc:	dc000217 	ldw	r16,8(sp)
     9e0:	dec00c04 	addi	sp,sp,48
     9e4:	f800283a 	ret
     9e8:	800b883a 	mov	r5,r16
     9ec:	a809883a 	mov	r4,r21
     9f0:	00023540 	call	2354 <__swsetup_r>
     9f4:	1000eb1e 	bne	r2,zero,da4 <__sfvwrite_r+0x4a4>
     9f8:	80c0030b 	ldhu	r3,12(r16)
     9fc:	a4400017 	ldw	r17,0(r20)
     a00:	1880008c 	andi	r2,r3,2
     a04:	103fd61e 	bne	r2,zero,960 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000960>
     a08:	1880004c 	andi	r2,r3,1
     a0c:	10003f1e 	bne	r2,zero,b0c <__sfvwrite_r+0x20c>
     a10:	0039883a 	mov	fp,zero
     a14:	0025883a 	mov	r18,zero
     a18:	90001a26 	beq	r18,zero,a84 <__sfvwrite_r+0x184>
     a1c:	1880800c 	andi	r2,r3,512
     a20:	84c00217 	ldw	r19,8(r16)
     a24:	10002126 	beq	r2,zero,aac <__sfvwrite_r+0x1ac>
     a28:	982f883a 	mov	r23,r19
     a2c:	94c09336 	bltu	r18,r19,c7c <__sfvwrite_r+0x37c>
     a30:	1881200c 	andi	r2,r3,1152
     a34:	10009e1e 	bne	r2,zero,cb0 <__sfvwrite_r+0x3b0>
     a38:	81000017 	ldw	r4,0(r16)
     a3c:	b80d883a 	mov	r6,r23
     a40:	e00b883a 	mov	r5,fp
     a44:	000197c0 	call	197c <memmove>
     a48:	80c00217 	ldw	r3,8(r16)
     a4c:	81000017 	ldw	r4,0(r16)
     a50:	9005883a 	mov	r2,r18
     a54:	1ce7c83a 	sub	r19,r3,r19
     a58:	25cf883a 	add	r7,r4,r23
     a5c:	84c00215 	stw	r19,8(r16)
     a60:	81c00015 	stw	r7,0(r16)
     a64:	a0c00217 	ldw	r3,8(r20)
     a68:	e0b9883a 	add	fp,fp,r2
     a6c:	90a5c83a 	sub	r18,r18,r2
     a70:	18a7c83a 	sub	r19,r3,r2
     a74:	a4c00215 	stw	r19,8(r20)
     a78:	983fce26 	beq	r19,zero,9b4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00009b4>
     a7c:	80c0030b 	ldhu	r3,12(r16)
     a80:	903fe61e 	bne	r18,zero,a1c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000a1c>
     a84:	8f000017 	ldw	fp,0(r17)
     a88:	8c800117 	ldw	r18,4(r17)
     a8c:	8c400204 	addi	r17,r17,8
     a90:	003fe106 	br	a18 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000a18>
     a94:	8cc00017 	ldw	r19,0(r17)
     a98:	8c800117 	ldw	r18,4(r17)
     a9c:	8c400204 	addi	r17,r17,8
     aa0:	003fb306 	br	970 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000970>
     aa4:	0005883a 	mov	r2,zero
     aa8:	f800283a 	ret
     aac:	81000017 	ldw	r4,0(r16)
     ab0:	80800417 	ldw	r2,16(r16)
     ab4:	11005736 	bltu	r2,r4,c14 <__sfvwrite_r+0x314>
     ab8:	85c00517 	ldw	r23,20(r16)
     abc:	95c05536 	bltu	r18,r23,c14 <__sfvwrite_r+0x314>
     ac0:	00a00034 	movhi	r2,32768
     ac4:	10bfffc4 	addi	r2,r2,-1
     ac8:	9009883a 	mov	r4,r18
     acc:	1480012e 	bgeu	r2,r18,ad4 <__sfvwrite_r+0x1d4>
     ad0:	1009883a 	mov	r4,r2
     ad4:	b80b883a 	mov	r5,r23
     ad8:	00030080 	call	3008 <__divsi3>
     adc:	15cf383a 	mul	r7,r2,r23
     ae0:	81400717 	ldw	r5,28(r16)
     ae4:	80800917 	ldw	r2,36(r16)
     ae8:	e00d883a 	mov	r6,fp
     aec:	a809883a 	mov	r4,r21
     af0:	103ee83a 	callr	r2
     af4:	00bfdb16 	blt	zero,r2,a64 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000a64>
     af8:	8080030b 	ldhu	r2,12(r16)
     afc:	10801014 	ori	r2,r2,64
     b00:	8080030d 	sth	r2,12(r16)
     b04:	00bfffc4 	movi	r2,-1
     b08:	003fab06 	br	9b8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00009b8>
     b0c:	0027883a 	mov	r19,zero
     b10:	0011883a 	mov	r8,zero
     b14:	0039883a 	mov	fp,zero
     b18:	0025883a 	mov	r18,zero
     b1c:	90001f26 	beq	r18,zero,b9c <__sfvwrite_r+0x29c>
     b20:	40005a26 	beq	r8,zero,c8c <__sfvwrite_r+0x38c>
     b24:	982d883a 	mov	r22,r19
     b28:	94c0012e 	bgeu	r18,r19,b30 <__sfvwrite_r+0x230>
     b2c:	902d883a 	mov	r22,r18
     b30:	81000017 	ldw	r4,0(r16)
     b34:	80800417 	ldw	r2,16(r16)
     b38:	b02f883a 	mov	r23,r22
     b3c:	81c00517 	ldw	r7,20(r16)
     b40:	1100032e 	bgeu	r2,r4,b50 <__sfvwrite_r+0x250>
     b44:	80c00217 	ldw	r3,8(r16)
     b48:	38c7883a 	add	r3,r7,r3
     b4c:	1d801816 	blt	r3,r22,bb0 <__sfvwrite_r+0x2b0>
     b50:	b1c03e16 	blt	r22,r7,c4c <__sfvwrite_r+0x34c>
     b54:	80800917 	ldw	r2,36(r16)
     b58:	81400717 	ldw	r5,28(r16)
     b5c:	e00d883a 	mov	r6,fp
     b60:	da000115 	stw	r8,4(sp)
     b64:	a809883a 	mov	r4,r21
     b68:	103ee83a 	callr	r2
     b6c:	102f883a 	mov	r23,r2
     b70:	da000117 	ldw	r8,4(sp)
     b74:	00bfe00e 	bge	zero,r2,af8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000af8>
     b78:	9de7c83a 	sub	r19,r19,r23
     b7c:	98001f26 	beq	r19,zero,bfc <__sfvwrite_r+0x2fc>
     b80:	a0800217 	ldw	r2,8(r20)
     b84:	e5f9883a 	add	fp,fp,r23
     b88:	95e5c83a 	sub	r18,r18,r23
     b8c:	15efc83a 	sub	r23,r2,r23
     b90:	a5c00215 	stw	r23,8(r20)
     b94:	b83f8726 	beq	r23,zero,9b4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00009b4>
     b98:	903fe11e 	bne	r18,zero,b20 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000b20>
     b9c:	8f000017 	ldw	fp,0(r17)
     ba0:	8c800117 	ldw	r18,4(r17)
     ba4:	0011883a 	mov	r8,zero
     ba8:	8c400204 	addi	r17,r17,8
     bac:	003fdb06 	br	b1c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000b1c>
     bb0:	180d883a 	mov	r6,r3
     bb4:	e00b883a 	mov	r5,fp
     bb8:	da000115 	stw	r8,4(sp)
     bbc:	d8c00015 	stw	r3,0(sp)
     bc0:	000197c0 	call	197c <memmove>
     bc4:	d8c00017 	ldw	r3,0(sp)
     bc8:	80800017 	ldw	r2,0(r16)
     bcc:	800b883a 	mov	r5,r16
     bd0:	a809883a 	mov	r4,r21
     bd4:	10c5883a 	add	r2,r2,r3
     bd8:	80800015 	stw	r2,0(r16)
     bdc:	d8c00015 	stw	r3,0(sp)
     be0:	000281c0 	call	281c <_fflush_r>
     be4:	d8c00017 	ldw	r3,0(sp)
     be8:	da000117 	ldw	r8,4(sp)
     bec:	103fc21e 	bne	r2,zero,af8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000af8>
     bf0:	182f883a 	mov	r23,r3
     bf4:	9de7c83a 	sub	r19,r19,r23
     bf8:	983fe11e 	bne	r19,zero,b80 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000b80>
     bfc:	800b883a 	mov	r5,r16
     c00:	a809883a 	mov	r4,r21
     c04:	000281c0 	call	281c <_fflush_r>
     c08:	103fbb1e 	bne	r2,zero,af8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000af8>
     c0c:	0011883a 	mov	r8,zero
     c10:	003fdb06 	br	b80 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000b80>
     c14:	94c0012e 	bgeu	r18,r19,c1c <__sfvwrite_r+0x31c>
     c18:	9027883a 	mov	r19,r18
     c1c:	980d883a 	mov	r6,r19
     c20:	e00b883a 	mov	r5,fp
     c24:	000197c0 	call	197c <memmove>
     c28:	80800217 	ldw	r2,8(r16)
     c2c:	80c00017 	ldw	r3,0(r16)
     c30:	14c5c83a 	sub	r2,r2,r19
     c34:	1cc7883a 	add	r3,r3,r19
     c38:	80800215 	stw	r2,8(r16)
     c3c:	80c00015 	stw	r3,0(r16)
     c40:	10004326 	beq	r2,zero,d50 <__sfvwrite_r+0x450>
     c44:	9805883a 	mov	r2,r19
     c48:	003f8606 	br	a64 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000a64>
     c4c:	b00d883a 	mov	r6,r22
     c50:	e00b883a 	mov	r5,fp
     c54:	da000115 	stw	r8,4(sp)
     c58:	000197c0 	call	197c <memmove>
     c5c:	80800217 	ldw	r2,8(r16)
     c60:	80c00017 	ldw	r3,0(r16)
     c64:	da000117 	ldw	r8,4(sp)
     c68:	1585c83a 	sub	r2,r2,r22
     c6c:	1dad883a 	add	r22,r3,r22
     c70:	80800215 	stw	r2,8(r16)
     c74:	85800015 	stw	r22,0(r16)
     c78:	003fbf06 	br	b78 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000b78>
     c7c:	81000017 	ldw	r4,0(r16)
     c80:	9027883a 	mov	r19,r18
     c84:	902f883a 	mov	r23,r18
     c88:	003f6c06 	br	a3c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000a3c>
     c8c:	900d883a 	mov	r6,r18
     c90:	01400284 	movi	r5,10
     c94:	e009883a 	mov	r4,fp
     c98:	00017500 	call	1750 <memchr>
     c9c:	10003e26 	beq	r2,zero,d98 <__sfvwrite_r+0x498>
     ca0:	10800044 	addi	r2,r2,1
     ca4:	1727c83a 	sub	r19,r2,fp
     ca8:	02000044 	movi	r8,1
     cac:	003f9d06 	br	b24 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000b24>
     cb0:	80800517 	ldw	r2,20(r16)
     cb4:	81400417 	ldw	r5,16(r16)
     cb8:	81c00017 	ldw	r7,0(r16)
     cbc:	10a7883a 	add	r19,r2,r2
     cc0:	9885883a 	add	r2,r19,r2
     cc4:	1026d7fa 	srli	r19,r2,31
     cc8:	396dc83a 	sub	r22,r7,r5
     ccc:	b1000044 	addi	r4,r22,1
     cd0:	9885883a 	add	r2,r19,r2
     cd4:	1027d07a 	srai	r19,r2,1
     cd8:	2485883a 	add	r2,r4,r18
     cdc:	980d883a 	mov	r6,r19
     ce0:	9880022e 	bgeu	r19,r2,cec <__sfvwrite_r+0x3ec>
     ce4:	1027883a 	mov	r19,r2
     ce8:	100d883a 	mov	r6,r2
     cec:	18c1000c 	andi	r3,r3,1024
     cf0:	18001c26 	beq	r3,zero,d64 <__sfvwrite_r+0x464>
     cf4:	300b883a 	mov	r5,r6
     cf8:	a809883a 	mov	r4,r21
     cfc:	0000f440 	call	f44 <_malloc_r>
     d00:	102f883a 	mov	r23,r2
     d04:	10002926 	beq	r2,zero,dac <__sfvwrite_r+0x4ac>
     d08:	81400417 	ldw	r5,16(r16)
     d0c:	b00d883a 	mov	r6,r22
     d10:	1009883a 	mov	r4,r2
     d14:	00018340 	call	1834 <memcpy>
     d18:	8080030b 	ldhu	r2,12(r16)
     d1c:	00fedfc4 	movi	r3,-1153
     d20:	10c4703a 	and	r2,r2,r3
     d24:	10802014 	ori	r2,r2,128
     d28:	8080030d 	sth	r2,12(r16)
     d2c:	bd89883a 	add	r4,r23,r22
     d30:	9d8fc83a 	sub	r7,r19,r22
     d34:	85c00415 	stw	r23,16(r16)
     d38:	84c00515 	stw	r19,20(r16)
     d3c:	81000015 	stw	r4,0(r16)
     d40:	9027883a 	mov	r19,r18
     d44:	81c00215 	stw	r7,8(r16)
     d48:	902f883a 	mov	r23,r18
     d4c:	003f3b06 	br	a3c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000a3c>
     d50:	800b883a 	mov	r5,r16
     d54:	a809883a 	mov	r4,r21
     d58:	000281c0 	call	281c <_fflush_r>
     d5c:	103fb926 	beq	r2,zero,c44 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000c44>
     d60:	003f6506 	br	af8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000af8>
     d64:	a809883a 	mov	r4,r21
     d68:	0001c000 	call	1c00 <_realloc_r>
     d6c:	102f883a 	mov	r23,r2
     d70:	103fee1e 	bne	r2,zero,d2c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000d2c>
     d74:	81400417 	ldw	r5,16(r16)
     d78:	a809883a 	mov	r4,r21
     d7c:	00029cc0 	call	29cc <_free_r>
     d80:	8080030b 	ldhu	r2,12(r16)
     d84:	00ffdfc4 	movi	r3,-129
     d88:	1884703a 	and	r2,r3,r2
     d8c:	00c00304 	movi	r3,12
     d90:	a8c00015 	stw	r3,0(r21)
     d94:	003f5906 	br	afc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000afc>
     d98:	94c00044 	addi	r19,r18,1
     d9c:	02000044 	movi	r8,1
     da0:	003f6006 	br	b24 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000b24>
     da4:	00bfffc4 	movi	r2,-1
     da8:	003f0306 	br	9b8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00009b8>
     dac:	00800304 	movi	r2,12
     db0:	a8800015 	stw	r2,0(r21)
     db4:	8080030b 	ldhu	r2,12(r16)
     db8:	003f5006 	br	afc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000afc>

00000dbc <_fwalk>:
     dbc:	defff704 	addi	sp,sp,-36
     dc0:	dd000415 	stw	r20,16(sp)
     dc4:	dfc00815 	stw	ra,32(sp)
     dc8:	ddc00715 	stw	r23,28(sp)
     dcc:	dd800615 	stw	r22,24(sp)
     dd0:	dd400515 	stw	r21,20(sp)
     dd4:	dcc00315 	stw	r19,12(sp)
     dd8:	dc800215 	stw	r18,8(sp)
     ddc:	dc400115 	stw	r17,4(sp)
     de0:	dc000015 	stw	r16,0(sp)
     de4:	2500b804 	addi	r20,r4,736
     de8:	a0002326 	beq	r20,zero,e78 <_fwalk+0xbc>
     dec:	282b883a 	mov	r21,r5
     df0:	002f883a 	mov	r23,zero
     df4:	05800044 	movi	r22,1
     df8:	04ffffc4 	movi	r19,-1
     dfc:	a4400117 	ldw	r17,4(r20)
     e00:	a4800217 	ldw	r18,8(r20)
     e04:	8c7fffc4 	addi	r17,r17,-1
     e08:	88000d16 	blt	r17,zero,e40 <_fwalk+0x84>
     e0c:	94000304 	addi	r16,r18,12
     e10:	94800384 	addi	r18,r18,14
     e14:	8080000b 	ldhu	r2,0(r16)
     e18:	8c7fffc4 	addi	r17,r17,-1
     e1c:	813ffd04 	addi	r4,r16,-12
     e20:	b080042e 	bgeu	r22,r2,e34 <_fwalk+0x78>
     e24:	9080000f 	ldh	r2,0(r18)
     e28:	14c00226 	beq	r2,r19,e34 <_fwalk+0x78>
     e2c:	a83ee83a 	callr	r21
     e30:	b8aeb03a 	or	r23,r23,r2
     e34:	84001a04 	addi	r16,r16,104
     e38:	94801a04 	addi	r18,r18,104
     e3c:	8cfff51e 	bne	r17,r19,e14 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000e14>
     e40:	a5000017 	ldw	r20,0(r20)
     e44:	a03fed1e 	bne	r20,zero,dfc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000dfc>
     e48:	b805883a 	mov	r2,r23
     e4c:	dfc00817 	ldw	ra,32(sp)
     e50:	ddc00717 	ldw	r23,28(sp)
     e54:	dd800617 	ldw	r22,24(sp)
     e58:	dd400517 	ldw	r21,20(sp)
     e5c:	dd000417 	ldw	r20,16(sp)
     e60:	dcc00317 	ldw	r19,12(sp)
     e64:	dc800217 	ldw	r18,8(sp)
     e68:	dc400117 	ldw	r17,4(sp)
     e6c:	dc000017 	ldw	r16,0(sp)
     e70:	dec00904 	addi	sp,sp,36
     e74:	f800283a 	ret
     e78:	002f883a 	mov	r23,zero
     e7c:	003ff206 	br	e48 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000e48>

00000e80 <_fwalk_reent>:
     e80:	defff704 	addi	sp,sp,-36
     e84:	dd000415 	stw	r20,16(sp)
     e88:	dfc00815 	stw	ra,32(sp)
     e8c:	ddc00715 	stw	r23,28(sp)
     e90:	dd800615 	stw	r22,24(sp)
     e94:	dd400515 	stw	r21,20(sp)
     e98:	dcc00315 	stw	r19,12(sp)
     e9c:	dc800215 	stw	r18,8(sp)
     ea0:	dc400115 	stw	r17,4(sp)
     ea4:	dc000015 	stw	r16,0(sp)
     ea8:	2500b804 	addi	r20,r4,736
     eac:	a0002326 	beq	r20,zero,f3c <_fwalk_reent+0xbc>
     eb0:	282b883a 	mov	r21,r5
     eb4:	2027883a 	mov	r19,r4
     eb8:	002f883a 	mov	r23,zero
     ebc:	05800044 	movi	r22,1
     ec0:	04bfffc4 	movi	r18,-1
     ec4:	a4400117 	ldw	r17,4(r20)
     ec8:	a4000217 	ldw	r16,8(r20)
     ecc:	8c7fffc4 	addi	r17,r17,-1
     ed0:	88000c16 	blt	r17,zero,f04 <_fwalk_reent+0x84>
     ed4:	84000304 	addi	r16,r16,12
     ed8:	8080000b 	ldhu	r2,0(r16)
     edc:	8c7fffc4 	addi	r17,r17,-1
     ee0:	817ffd04 	addi	r5,r16,-12
     ee4:	b080052e 	bgeu	r22,r2,efc <_fwalk_reent+0x7c>
     ee8:	8080008f 	ldh	r2,2(r16)
     eec:	9809883a 	mov	r4,r19
     ef0:	14800226 	beq	r2,r18,efc <_fwalk_reent+0x7c>
     ef4:	a83ee83a 	callr	r21
     ef8:	b8aeb03a 	or	r23,r23,r2
     efc:	84001a04 	addi	r16,r16,104
     f00:	8cbff51e 	bne	r17,r18,ed8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000ed8>
     f04:	a5000017 	ldw	r20,0(r20)
     f08:	a03fee1e 	bne	r20,zero,ec4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000ec4>
     f0c:	b805883a 	mov	r2,r23
     f10:	dfc00817 	ldw	ra,32(sp)
     f14:	ddc00717 	ldw	r23,28(sp)
     f18:	dd800617 	ldw	r22,24(sp)
     f1c:	dd400517 	ldw	r21,20(sp)
     f20:	dd000417 	ldw	r20,16(sp)
     f24:	dcc00317 	ldw	r19,12(sp)
     f28:	dc800217 	ldw	r18,8(sp)
     f2c:	dc400117 	ldw	r17,4(sp)
     f30:	dc000017 	ldw	r16,0(sp)
     f34:	dec00904 	addi	sp,sp,36
     f38:	f800283a 	ret
     f3c:	002f883a 	mov	r23,zero
     f40:	003ff206 	br	f0c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000f0c>

00000f44 <_malloc_r>:
     f44:	defff504 	addi	sp,sp,-44
     f48:	dc800315 	stw	r18,12(sp)
     f4c:	dfc00a15 	stw	ra,40(sp)
     f50:	df000915 	stw	fp,36(sp)
     f54:	ddc00815 	stw	r23,32(sp)
     f58:	dd800715 	stw	r22,28(sp)
     f5c:	dd400615 	stw	r21,24(sp)
     f60:	dd000515 	stw	r20,20(sp)
     f64:	dcc00415 	stw	r19,16(sp)
     f68:	dc400215 	stw	r17,8(sp)
     f6c:	dc000115 	stw	r16,4(sp)
     f70:	288002c4 	addi	r2,r5,11
     f74:	00c00584 	movi	r3,22
     f78:	2025883a 	mov	r18,r4
     f7c:	18807f2e 	bgeu	r3,r2,117c <_malloc_r+0x238>
     f80:	047ffe04 	movi	r17,-8
     f84:	1462703a 	and	r17,r2,r17
     f88:	8800a316 	blt	r17,zero,1218 <_malloc_r+0x2d4>
     f8c:	8940a236 	bltu	r17,r5,1218 <_malloc_r+0x2d4>
     f90:	00037380 	call	3738 <__malloc_lock>
     f94:	00807dc4 	movi	r2,503
     f98:	1441e92e 	bgeu	r2,r17,1740 <_malloc_r+0x7fc>
     f9c:	8804d27a 	srli	r2,r17,9
     fa0:	1000a126 	beq	r2,zero,1228 <_malloc_r+0x2e4>
     fa4:	00c00104 	movi	r3,4
     fa8:	18811e36 	bltu	r3,r2,1424 <_malloc_r+0x4e0>
     fac:	8804d1ba 	srli	r2,r17,6
     fb0:	12000e44 	addi	r8,r2,57
     fb4:	11c00e04 	addi	r7,r2,56
     fb8:	4209883a 	add	r4,r8,r8
     fbc:	04c00034 	movhi	r19,0
     fc0:	2109883a 	add	r4,r4,r4
     fc4:	9cdbb204 	addi	r19,r19,28360
     fc8:	2109883a 	add	r4,r4,r4
     fcc:	9909883a 	add	r4,r19,r4
     fd0:	24000117 	ldw	r16,4(r4)
     fd4:	213ffe04 	addi	r4,r4,-8
     fd8:	24009726 	beq	r4,r16,1238 <_malloc_r+0x2f4>
     fdc:	80800117 	ldw	r2,4(r16)
     fe0:	01bfff04 	movi	r6,-4
     fe4:	014003c4 	movi	r5,15
     fe8:	1184703a 	and	r2,r2,r6
     fec:	1447c83a 	sub	r3,r2,r17
     ff0:	28c00716 	blt	r5,r3,1010 <_malloc_r+0xcc>
     ff4:	1800920e 	bge	r3,zero,1240 <_malloc_r+0x2fc>
     ff8:	84000317 	ldw	r16,12(r16)
     ffc:	24008e26 	beq	r4,r16,1238 <_malloc_r+0x2f4>
    1000:	80800117 	ldw	r2,4(r16)
    1004:	1184703a 	and	r2,r2,r6
    1008:	1447c83a 	sub	r3,r2,r17
    100c:	28fff90e 	bge	r5,r3,ff4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000ff4>
    1010:	3809883a 	mov	r4,r7
    1014:	01800034 	movhi	r6,0
    1018:	9c000417 	ldw	r16,16(r19)
    101c:	319bb204 	addi	r6,r6,28360
    1020:	32000204 	addi	r8,r6,8
    1024:	82013426 	beq	r16,r8,14f8 <_malloc_r+0x5b4>
    1028:	80c00117 	ldw	r3,4(r16)
    102c:	00bfff04 	movi	r2,-4
    1030:	188e703a 	and	r7,r3,r2
    1034:	3c45c83a 	sub	r2,r7,r17
    1038:	00c003c4 	movi	r3,15
    103c:	18811f16 	blt	r3,r2,14bc <_malloc_r+0x578>
    1040:	32000515 	stw	r8,20(r6)
    1044:	32000415 	stw	r8,16(r6)
    1048:	10007f0e 	bge	r2,zero,1248 <_malloc_r+0x304>
    104c:	00807fc4 	movi	r2,511
    1050:	11c0fd36 	bltu	r2,r7,1448 <_malloc_r+0x504>
    1054:	3806d0fa 	srli	r3,r7,3
    1058:	01c00044 	movi	r7,1
    105c:	30800117 	ldw	r2,4(r6)
    1060:	19400044 	addi	r5,r3,1
    1064:	294b883a 	add	r5,r5,r5
    1068:	1807d0ba 	srai	r3,r3,2
    106c:	294b883a 	add	r5,r5,r5
    1070:	294b883a 	add	r5,r5,r5
    1074:	298b883a 	add	r5,r5,r6
    1078:	38c6983a 	sll	r3,r7,r3
    107c:	29c00017 	ldw	r7,0(r5)
    1080:	2a7ffe04 	addi	r9,r5,-8
    1084:	1886b03a 	or	r3,r3,r2
    1088:	82400315 	stw	r9,12(r16)
    108c:	81c00215 	stw	r7,8(r16)
    1090:	30c00115 	stw	r3,4(r6)
    1094:	2c000015 	stw	r16,0(r5)
    1098:	3c000315 	stw	r16,12(r7)
    109c:	2005d0ba 	srai	r2,r4,2
    10a0:	01400044 	movi	r5,1
    10a4:	288a983a 	sll	r5,r5,r2
    10a8:	19406f36 	bltu	r3,r5,1268 <_malloc_r+0x324>
    10ac:	28c4703a 	and	r2,r5,r3
    10b0:	10000a1e 	bne	r2,zero,10dc <_malloc_r+0x198>
    10b4:	00bfff04 	movi	r2,-4
    10b8:	294b883a 	add	r5,r5,r5
    10bc:	2088703a 	and	r4,r4,r2
    10c0:	28c4703a 	and	r2,r5,r3
    10c4:	21000104 	addi	r4,r4,4
    10c8:	1000041e 	bne	r2,zero,10dc <_malloc_r+0x198>
    10cc:	294b883a 	add	r5,r5,r5
    10d0:	28c4703a 	and	r2,r5,r3
    10d4:	21000104 	addi	r4,r4,4
    10d8:	103ffc26 	beq	r2,zero,10cc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00010cc>
    10dc:	02bfff04 	movi	r10,-4
    10e0:	024003c4 	movi	r9,15
    10e4:	21800044 	addi	r6,r4,1
    10e8:	318d883a 	add	r6,r6,r6
    10ec:	318d883a 	add	r6,r6,r6
    10f0:	318d883a 	add	r6,r6,r6
    10f4:	998d883a 	add	r6,r19,r6
    10f8:	333ffe04 	addi	r12,r6,-8
    10fc:	2017883a 	mov	r11,r4
    1100:	31800104 	addi	r6,r6,4
    1104:	34000017 	ldw	r16,0(r6)
    1108:	31fffd04 	addi	r7,r6,-12
    110c:	81c0041e 	bne	r16,r7,1120 <_malloc_r+0x1dc>
    1110:	0000fb06 	br	1500 <_malloc_r+0x5bc>
    1114:	1801030e 	bge	r3,zero,1524 <_malloc_r+0x5e0>
    1118:	84000317 	ldw	r16,12(r16)
    111c:	81c0f826 	beq	r16,r7,1500 <_malloc_r+0x5bc>
    1120:	80800117 	ldw	r2,4(r16)
    1124:	1284703a 	and	r2,r2,r10
    1128:	1447c83a 	sub	r3,r2,r17
    112c:	48fff90e 	bge	r9,r3,1114 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001114>
    1130:	80800317 	ldw	r2,12(r16)
    1134:	81000217 	ldw	r4,8(r16)
    1138:	89400054 	ori	r5,r17,1
    113c:	81400115 	stw	r5,4(r16)
    1140:	20800315 	stw	r2,12(r4)
    1144:	11000215 	stw	r4,8(r2)
    1148:	8463883a 	add	r17,r16,r17
    114c:	9c400515 	stw	r17,20(r19)
    1150:	9c400415 	stw	r17,16(r19)
    1154:	18800054 	ori	r2,r3,1
    1158:	88800115 	stw	r2,4(r17)
    115c:	8a000315 	stw	r8,12(r17)
    1160:	8a000215 	stw	r8,8(r17)
    1164:	88e3883a 	add	r17,r17,r3
    1168:	88c00015 	stw	r3,0(r17)
    116c:	9009883a 	mov	r4,r18
    1170:	000375c0 	call	375c <__malloc_unlock>
    1174:	80800204 	addi	r2,r16,8
    1178:	00001b06 	br	11e8 <_malloc_r+0x2a4>
    117c:	04400404 	movi	r17,16
    1180:	89402536 	bltu	r17,r5,1218 <_malloc_r+0x2d4>
    1184:	00037380 	call	3738 <__malloc_lock>
    1188:	00800184 	movi	r2,6
    118c:	01000084 	movi	r4,2
    1190:	04c00034 	movhi	r19,0
    1194:	1085883a 	add	r2,r2,r2
    1198:	9cdbb204 	addi	r19,r19,28360
    119c:	1085883a 	add	r2,r2,r2
    11a0:	9885883a 	add	r2,r19,r2
    11a4:	14000117 	ldw	r16,4(r2)
    11a8:	10fffe04 	addi	r3,r2,-8
    11ac:	80c0d926 	beq	r16,r3,1514 <_malloc_r+0x5d0>
    11b0:	80c00117 	ldw	r3,4(r16)
    11b4:	81000317 	ldw	r4,12(r16)
    11b8:	00bfff04 	movi	r2,-4
    11bc:	1884703a 	and	r2,r3,r2
    11c0:	81400217 	ldw	r5,8(r16)
    11c4:	8085883a 	add	r2,r16,r2
    11c8:	10c00117 	ldw	r3,4(r2)
    11cc:	29000315 	stw	r4,12(r5)
    11d0:	21400215 	stw	r5,8(r4)
    11d4:	18c00054 	ori	r3,r3,1
    11d8:	10c00115 	stw	r3,4(r2)
    11dc:	9009883a 	mov	r4,r18
    11e0:	000375c0 	call	375c <__malloc_unlock>
    11e4:	80800204 	addi	r2,r16,8
    11e8:	dfc00a17 	ldw	ra,40(sp)
    11ec:	df000917 	ldw	fp,36(sp)
    11f0:	ddc00817 	ldw	r23,32(sp)
    11f4:	dd800717 	ldw	r22,28(sp)
    11f8:	dd400617 	ldw	r21,24(sp)
    11fc:	dd000517 	ldw	r20,20(sp)
    1200:	dcc00417 	ldw	r19,16(sp)
    1204:	dc800317 	ldw	r18,12(sp)
    1208:	dc400217 	ldw	r17,8(sp)
    120c:	dc000117 	ldw	r16,4(sp)
    1210:	dec00b04 	addi	sp,sp,44
    1214:	f800283a 	ret
    1218:	00800304 	movi	r2,12
    121c:	90800015 	stw	r2,0(r18)
    1220:	0005883a 	mov	r2,zero
    1224:	003ff006 	br	11e8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00011e8>
    1228:	01002004 	movi	r4,128
    122c:	02001004 	movi	r8,64
    1230:	01c00fc4 	movi	r7,63
    1234:	003f6106 	br	fbc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000fbc>
    1238:	4009883a 	mov	r4,r8
    123c:	003f7506 	br	1014 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001014>
    1240:	81000317 	ldw	r4,12(r16)
    1244:	003fde06 	br	11c0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00011c0>
    1248:	81c5883a 	add	r2,r16,r7
    124c:	11400117 	ldw	r5,4(r2)
    1250:	9009883a 	mov	r4,r18
    1254:	29400054 	ori	r5,r5,1
    1258:	11400115 	stw	r5,4(r2)
    125c:	000375c0 	call	375c <__malloc_unlock>
    1260:	80800204 	addi	r2,r16,8
    1264:	003fe006 	br	11e8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00011e8>
    1268:	9c000217 	ldw	r16,8(r19)
    126c:	00bfff04 	movi	r2,-4
    1270:	85800117 	ldw	r22,4(r16)
    1274:	b0ac703a 	and	r22,r22,r2
    1278:	b4400336 	bltu	r22,r17,1288 <_malloc_r+0x344>
    127c:	b445c83a 	sub	r2,r22,r17
    1280:	00c003c4 	movi	r3,15
    1284:	18805d16 	blt	r3,r2,13fc <_malloc_r+0x4b8>
    1288:	05c00074 	movhi	r23,1
    128c:	00800074 	movhi	r2,1
    1290:	10a90104 	addi	r2,r2,-23548
    1294:	bde1c704 	addi	r23,r23,-30948
    1298:	15400017 	ldw	r21,0(r2)
    129c:	b8c00017 	ldw	r3,0(r23)
    12a0:	00bfffc4 	movi	r2,-1
    12a4:	858d883a 	add	r6,r16,r22
    12a8:	8d6b883a 	add	r21,r17,r21
    12ac:	1880ea26 	beq	r3,r2,1658 <_malloc_r+0x714>
    12b0:	ad4403c4 	addi	r21,r21,4111
    12b4:	00bc0004 	movi	r2,-4096
    12b8:	a8aa703a 	and	r21,r21,r2
    12bc:	a80b883a 	mov	r5,r21
    12c0:	9009883a 	mov	r4,r18
    12c4:	d9800015 	stw	r6,0(sp)
    12c8:	00021640 	call	2164 <_sbrk_r>
    12cc:	1029883a 	mov	r20,r2
    12d0:	00bfffc4 	movi	r2,-1
    12d4:	d9800017 	ldw	r6,0(sp)
    12d8:	a080e826 	beq	r20,r2,167c <_malloc_r+0x738>
    12dc:	a180a636 	bltu	r20,r6,1578 <_malloc_r+0x634>
    12e0:	07000074 	movhi	fp,1
    12e4:	e7290a04 	addi	fp,fp,-23512
    12e8:	e0800017 	ldw	r2,0(fp)
    12ec:	a887883a 	add	r3,r21,r2
    12f0:	e0c00015 	stw	r3,0(fp)
    12f4:	3500e626 	beq	r6,r20,1690 <_malloc_r+0x74c>
    12f8:	b9000017 	ldw	r4,0(r23)
    12fc:	00bfffc4 	movi	r2,-1
    1300:	2080ee26 	beq	r4,r2,16bc <_malloc_r+0x778>
    1304:	a185c83a 	sub	r2,r20,r6
    1308:	10c5883a 	add	r2,r2,r3
    130c:	e0800015 	stw	r2,0(fp)
    1310:	a0c001cc 	andi	r3,r20,7
    1314:	1800bc26 	beq	r3,zero,1608 <_malloc_r+0x6c4>
    1318:	a0e9c83a 	sub	r20,r20,r3
    131c:	00840204 	movi	r2,4104
    1320:	a5000204 	addi	r20,r20,8
    1324:	10c7c83a 	sub	r3,r2,r3
    1328:	a545883a 	add	r2,r20,r21
    132c:	1083ffcc 	andi	r2,r2,4095
    1330:	18abc83a 	sub	r21,r3,r2
    1334:	a80b883a 	mov	r5,r21
    1338:	9009883a 	mov	r4,r18
    133c:	00021640 	call	2164 <_sbrk_r>
    1340:	00ffffc4 	movi	r3,-1
    1344:	10c0e126 	beq	r2,r3,16cc <_malloc_r+0x788>
    1348:	1505c83a 	sub	r2,r2,r20
    134c:	1545883a 	add	r2,r2,r21
    1350:	10800054 	ori	r2,r2,1
    1354:	e0c00017 	ldw	r3,0(fp)
    1358:	9d000215 	stw	r20,8(r19)
    135c:	a0800115 	stw	r2,4(r20)
    1360:	a8c7883a 	add	r3,r21,r3
    1364:	e0c00015 	stw	r3,0(fp)
    1368:	84c00e26 	beq	r16,r19,13a4 <_malloc_r+0x460>
    136c:	018003c4 	movi	r6,15
    1370:	3580a72e 	bgeu	r6,r22,1610 <_malloc_r+0x6cc>
    1374:	81400117 	ldw	r5,4(r16)
    1378:	013ffe04 	movi	r4,-8
    137c:	b0bffd04 	addi	r2,r22,-12
    1380:	1104703a 	and	r2,r2,r4
    1384:	2900004c 	andi	r4,r5,1
    1388:	2088b03a 	or	r4,r4,r2
    138c:	81000115 	stw	r4,4(r16)
    1390:	01400144 	movi	r5,5
    1394:	8089883a 	add	r4,r16,r2
    1398:	21400115 	stw	r5,4(r4)
    139c:	21400215 	stw	r5,8(r4)
    13a0:	3080cd36 	bltu	r6,r2,16d8 <_malloc_r+0x794>
    13a4:	00800074 	movhi	r2,1
    13a8:	10a90004 	addi	r2,r2,-23552
    13ac:	11000017 	ldw	r4,0(r2)
    13b0:	20c0012e 	bgeu	r4,r3,13b8 <_malloc_r+0x474>
    13b4:	10c00015 	stw	r3,0(r2)
    13b8:	00800074 	movhi	r2,1
    13bc:	10a8ff04 	addi	r2,r2,-23556
    13c0:	11000017 	ldw	r4,0(r2)
    13c4:	9c000217 	ldw	r16,8(r19)
    13c8:	20c0012e 	bgeu	r4,r3,13d0 <_malloc_r+0x48c>
    13cc:	10c00015 	stw	r3,0(r2)
    13d0:	80c00117 	ldw	r3,4(r16)
    13d4:	00bfff04 	movi	r2,-4
    13d8:	1886703a 	and	r3,r3,r2
    13dc:	1c45c83a 	sub	r2,r3,r17
    13e0:	1c400236 	bltu	r3,r17,13ec <_malloc_r+0x4a8>
    13e4:	00c003c4 	movi	r3,15
    13e8:	18800416 	blt	r3,r2,13fc <_malloc_r+0x4b8>
    13ec:	9009883a 	mov	r4,r18
    13f0:	000375c0 	call	375c <__malloc_unlock>
    13f4:	0005883a 	mov	r2,zero
    13f8:	003f7b06 	br	11e8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00011e8>
    13fc:	88c00054 	ori	r3,r17,1
    1400:	80c00115 	stw	r3,4(r16)
    1404:	8463883a 	add	r17,r16,r17
    1408:	10800054 	ori	r2,r2,1
    140c:	9c400215 	stw	r17,8(r19)
    1410:	88800115 	stw	r2,4(r17)
    1414:	9009883a 	mov	r4,r18
    1418:	000375c0 	call	375c <__malloc_unlock>
    141c:	80800204 	addi	r2,r16,8
    1420:	003f7106 	br	11e8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00011e8>
    1424:	00c00504 	movi	r3,20
    1428:	18804a2e 	bgeu	r3,r2,1554 <_malloc_r+0x610>
    142c:	00c01504 	movi	r3,84
    1430:	18806e36 	bltu	r3,r2,15ec <_malloc_r+0x6a8>
    1434:	8804d33a 	srli	r2,r17,12
    1438:	12001bc4 	addi	r8,r2,111
    143c:	11c01b84 	addi	r7,r2,110
    1440:	4209883a 	add	r4,r8,r8
    1444:	003edd06 	br	fbc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000fbc>
    1448:	3804d27a 	srli	r2,r7,9
    144c:	00c00104 	movi	r3,4
    1450:	1880442e 	bgeu	r3,r2,1564 <_malloc_r+0x620>
    1454:	00c00504 	movi	r3,20
    1458:	18808136 	bltu	r3,r2,1660 <_malloc_r+0x71c>
    145c:	11401704 	addi	r5,r2,92
    1460:	10c016c4 	addi	r3,r2,91
    1464:	294b883a 	add	r5,r5,r5
    1468:	294b883a 	add	r5,r5,r5
    146c:	294b883a 	add	r5,r5,r5
    1470:	994b883a 	add	r5,r19,r5
    1474:	28800017 	ldw	r2,0(r5)
    1478:	01800034 	movhi	r6,0
    147c:	297ffe04 	addi	r5,r5,-8
    1480:	319bb204 	addi	r6,r6,28360
    1484:	28806526 	beq	r5,r2,161c <_malloc_r+0x6d8>
    1488:	01bfff04 	movi	r6,-4
    148c:	10c00117 	ldw	r3,4(r2)
    1490:	1986703a 	and	r3,r3,r6
    1494:	38c0022e 	bgeu	r7,r3,14a0 <_malloc_r+0x55c>
    1498:	10800217 	ldw	r2,8(r2)
    149c:	28bffb1e 	bne	r5,r2,148c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000148c>
    14a0:	11400317 	ldw	r5,12(r2)
    14a4:	98c00117 	ldw	r3,4(r19)
    14a8:	81400315 	stw	r5,12(r16)
    14ac:	80800215 	stw	r2,8(r16)
    14b0:	2c000215 	stw	r16,8(r5)
    14b4:	14000315 	stw	r16,12(r2)
    14b8:	003ef806 	br	109c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000109c>
    14bc:	88c00054 	ori	r3,r17,1
    14c0:	80c00115 	stw	r3,4(r16)
    14c4:	8463883a 	add	r17,r16,r17
    14c8:	34400515 	stw	r17,20(r6)
    14cc:	34400415 	stw	r17,16(r6)
    14d0:	10c00054 	ori	r3,r2,1
    14d4:	8a000315 	stw	r8,12(r17)
    14d8:	8a000215 	stw	r8,8(r17)
    14dc:	88c00115 	stw	r3,4(r17)
    14e0:	88a3883a 	add	r17,r17,r2
    14e4:	88800015 	stw	r2,0(r17)
    14e8:	9009883a 	mov	r4,r18
    14ec:	000375c0 	call	375c <__malloc_unlock>
    14f0:	80800204 	addi	r2,r16,8
    14f4:	003f3c06 	br	11e8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00011e8>
    14f8:	30c00117 	ldw	r3,4(r6)
    14fc:	003ee706 	br	109c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000109c>
    1500:	5ac00044 	addi	r11,r11,1
    1504:	588000cc 	andi	r2,r11,3
    1508:	31800204 	addi	r6,r6,8
    150c:	103efd1e 	bne	r2,zero,1104 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001104>
    1510:	00002406 	br	15a4 <_malloc_r+0x660>
    1514:	14000317 	ldw	r16,12(r2)
    1518:	143f251e 	bne	r2,r16,11b0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00011b0>
    151c:	21000084 	addi	r4,r4,2
    1520:	003ebc06 	br	1014 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001014>
    1524:	8085883a 	add	r2,r16,r2
    1528:	10c00117 	ldw	r3,4(r2)
    152c:	81000317 	ldw	r4,12(r16)
    1530:	81400217 	ldw	r5,8(r16)
    1534:	18c00054 	ori	r3,r3,1
    1538:	10c00115 	stw	r3,4(r2)
    153c:	29000315 	stw	r4,12(r5)
    1540:	21400215 	stw	r5,8(r4)
    1544:	9009883a 	mov	r4,r18
    1548:	000375c0 	call	375c <__malloc_unlock>
    154c:	80800204 	addi	r2,r16,8
    1550:	003f2506 	br	11e8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00011e8>
    1554:	12001704 	addi	r8,r2,92
    1558:	11c016c4 	addi	r7,r2,91
    155c:	4209883a 	add	r4,r8,r8
    1560:	003e9606 	br	fbc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000fbc>
    1564:	3804d1ba 	srli	r2,r7,6
    1568:	11400e44 	addi	r5,r2,57
    156c:	10c00e04 	addi	r3,r2,56
    1570:	294b883a 	add	r5,r5,r5
    1574:	003fbc06 	br	1468 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001468>
    1578:	84ff5926 	beq	r16,r19,12e0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00012e0>
    157c:	00800034 	movhi	r2,0
    1580:	109bb204 	addi	r2,r2,28360
    1584:	14000217 	ldw	r16,8(r2)
    1588:	00bfff04 	movi	r2,-4
    158c:	80c00117 	ldw	r3,4(r16)
    1590:	1886703a 	and	r3,r3,r2
    1594:	003f9106 	br	13dc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00013dc>
    1598:	60800217 	ldw	r2,8(r12)
    159c:	213fffc4 	addi	r4,r4,-1
    15a0:	1300651e 	bne	r2,r12,1738 <_malloc_r+0x7f4>
    15a4:	208000cc 	andi	r2,r4,3
    15a8:	633ffe04 	addi	r12,r12,-8
    15ac:	103ffa1e 	bne	r2,zero,1598 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001598>
    15b0:	98800117 	ldw	r2,4(r19)
    15b4:	0146303a 	nor	r3,zero,r5
    15b8:	1884703a 	and	r2,r3,r2
    15bc:	98800115 	stw	r2,4(r19)
    15c0:	294b883a 	add	r5,r5,r5
    15c4:	117f2836 	bltu	r2,r5,1268 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001268>
    15c8:	283f2726 	beq	r5,zero,1268 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001268>
    15cc:	2886703a 	and	r3,r5,r2
    15d0:	5809883a 	mov	r4,r11
    15d4:	183ec31e 	bne	r3,zero,10e4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00010e4>
    15d8:	294b883a 	add	r5,r5,r5
    15dc:	2886703a 	and	r3,r5,r2
    15e0:	21000104 	addi	r4,r4,4
    15e4:	183ffc26 	beq	r3,zero,15d8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00015d8>
    15e8:	003ebe06 	br	10e4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00010e4>
    15ec:	00c05504 	movi	r3,340
    15f0:	18801236 	bltu	r3,r2,163c <_malloc_r+0x6f8>
    15f4:	8804d3fa 	srli	r2,r17,15
    15f8:	12001e04 	addi	r8,r2,120
    15fc:	11c01dc4 	addi	r7,r2,119
    1600:	4209883a 	add	r4,r8,r8
    1604:	003e6d06 	br	fbc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000fbc>
    1608:	00c40004 	movi	r3,4096
    160c:	003f4606 	br	1328 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001328>
    1610:	00800044 	movi	r2,1
    1614:	a0800115 	stw	r2,4(r20)
    1618:	003f7406 	br	13ec <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00013ec>
    161c:	1805d0ba 	srai	r2,r3,2
    1620:	01c00044 	movi	r7,1
    1624:	30c00117 	ldw	r3,4(r6)
    1628:	388e983a 	sll	r7,r7,r2
    162c:	2805883a 	mov	r2,r5
    1630:	38c6b03a 	or	r3,r7,r3
    1634:	30c00115 	stw	r3,4(r6)
    1638:	003f9b06 	br	14a8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00014a8>
    163c:	00c15504 	movi	r3,1364
    1640:	18801a36 	bltu	r3,r2,16ac <_malloc_r+0x768>
    1644:	8804d4ba 	srli	r2,r17,18
    1648:	12001f44 	addi	r8,r2,125
    164c:	11c01f04 	addi	r7,r2,124
    1650:	4209883a 	add	r4,r8,r8
    1654:	003e5906 	br	fbc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000fbc>
    1658:	ad400404 	addi	r21,r21,16
    165c:	003f1706 	br	12bc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00012bc>
    1660:	00c01504 	movi	r3,84
    1664:	18802336 	bltu	r3,r2,16f4 <_malloc_r+0x7b0>
    1668:	3804d33a 	srli	r2,r7,12
    166c:	11401bc4 	addi	r5,r2,111
    1670:	10c01b84 	addi	r3,r2,110
    1674:	294b883a 	add	r5,r5,r5
    1678:	003f7b06 	br	1468 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001468>
    167c:	9c000217 	ldw	r16,8(r19)
    1680:	00bfff04 	movi	r2,-4
    1684:	80c00117 	ldw	r3,4(r16)
    1688:	1886703a 	and	r3,r3,r2
    168c:	003f5306 	br	13dc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00013dc>
    1690:	3083ffcc 	andi	r2,r6,4095
    1694:	103f181e 	bne	r2,zero,12f8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00012f8>
    1698:	99000217 	ldw	r4,8(r19)
    169c:	b545883a 	add	r2,r22,r21
    16a0:	10800054 	ori	r2,r2,1
    16a4:	20800115 	stw	r2,4(r4)
    16a8:	003f3e06 	br	13a4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00013a4>
    16ac:	01003f84 	movi	r4,254
    16b0:	02001fc4 	movi	r8,127
    16b4:	01c01f84 	movi	r7,126
    16b8:	003e4006 	br	fbc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000fbc>
    16bc:	00800074 	movhi	r2,1
    16c0:	10a1c704 	addi	r2,r2,-30948
    16c4:	15000015 	stw	r20,0(r2)
    16c8:	003f1106 	br	1310 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001310>
    16cc:	00800044 	movi	r2,1
    16d0:	002b883a 	mov	r21,zero
    16d4:	003f1f06 	br	1354 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001354>
    16d8:	81400204 	addi	r5,r16,8
    16dc:	9009883a 	mov	r4,r18
    16e0:	00029cc0 	call	29cc <_free_r>
    16e4:	00800074 	movhi	r2,1
    16e8:	10a90a04 	addi	r2,r2,-23512
    16ec:	10c00017 	ldw	r3,0(r2)
    16f0:	003f2c06 	br	13a4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00013a4>
    16f4:	00c05504 	movi	r3,340
    16f8:	18800536 	bltu	r3,r2,1710 <_malloc_r+0x7cc>
    16fc:	3804d3fa 	srli	r2,r7,15
    1700:	11401e04 	addi	r5,r2,120
    1704:	10c01dc4 	addi	r3,r2,119
    1708:	294b883a 	add	r5,r5,r5
    170c:	003f5606 	br	1468 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001468>
    1710:	00c15504 	movi	r3,1364
    1714:	18800536 	bltu	r3,r2,172c <_malloc_r+0x7e8>
    1718:	3804d4ba 	srli	r2,r7,18
    171c:	11401f44 	addi	r5,r2,125
    1720:	10c01f04 	addi	r3,r2,124
    1724:	294b883a 	add	r5,r5,r5
    1728:	003f4f06 	br	1468 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001468>
    172c:	01403f84 	movi	r5,254
    1730:	00c01f84 	movi	r3,126
    1734:	003f4c06 	br	1468 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001468>
    1738:	98800117 	ldw	r2,4(r19)
    173c:	003fa006 	br	15c0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00015c0>
    1740:	8808d0fa 	srli	r4,r17,3
    1744:	20800044 	addi	r2,r4,1
    1748:	1085883a 	add	r2,r2,r2
    174c:	003e9006 	br	1190 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001190>

00001750 <memchr>:
    1750:	208000cc 	andi	r2,r4,3
    1754:	280f883a 	mov	r7,r5
    1758:	10003426 	beq	r2,zero,182c <memchr+0xdc>
    175c:	30bfffc4 	addi	r2,r6,-1
    1760:	30001a26 	beq	r6,zero,17cc <memchr+0x7c>
    1764:	20c00003 	ldbu	r3,0(r4)
    1768:	29803fcc 	andi	r6,r5,255
    176c:	30c0051e 	bne	r6,r3,1784 <memchr+0x34>
    1770:	00001806 	br	17d4 <memchr+0x84>
    1774:	10001526 	beq	r2,zero,17cc <memchr+0x7c>
    1778:	20c00003 	ldbu	r3,0(r4)
    177c:	10bfffc4 	addi	r2,r2,-1
    1780:	30c01426 	beq	r6,r3,17d4 <memchr+0x84>
    1784:	21000044 	addi	r4,r4,1
    1788:	20c000cc 	andi	r3,r4,3
    178c:	183ff91e 	bne	r3,zero,1774 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001774>
    1790:	020000c4 	movi	r8,3
    1794:	40801136 	bltu	r8,r2,17dc <memchr+0x8c>
    1798:	10000c26 	beq	r2,zero,17cc <memchr+0x7c>
    179c:	20c00003 	ldbu	r3,0(r4)
    17a0:	29403fcc 	andi	r5,r5,255
    17a4:	28c00b26 	beq	r5,r3,17d4 <memchr+0x84>
    17a8:	20c00044 	addi	r3,r4,1
    17ac:	39803fcc 	andi	r6,r7,255
    17b0:	2089883a 	add	r4,r4,r2
    17b4:	00000306 	br	17c4 <memchr+0x74>
    17b8:	18c00044 	addi	r3,r3,1
    17bc:	197fffc3 	ldbu	r5,-1(r3)
    17c0:	31400526 	beq	r6,r5,17d8 <memchr+0x88>
    17c4:	1805883a 	mov	r2,r3
    17c8:	20fffb1e 	bne	r4,r3,17b8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00017b8>
    17cc:	0005883a 	mov	r2,zero
    17d0:	f800283a 	ret
    17d4:	2005883a 	mov	r2,r4
    17d8:	f800283a 	ret
    17dc:	28c03fcc 	andi	r3,r5,255
    17e0:	1812923a 	slli	r9,r3,8
    17e4:	02ffbff4 	movhi	r11,65279
    17e8:	02a02074 	movhi	r10,32897
    17ec:	48d2b03a 	or	r9,r9,r3
    17f0:	4806943a 	slli	r3,r9,16
    17f4:	5affbfc4 	addi	r11,r11,-257
    17f8:	52a02004 	addi	r10,r10,-32640
    17fc:	48d2b03a 	or	r9,r9,r3
    1800:	20c00017 	ldw	r3,0(r4)
    1804:	48c6f03a 	xor	r3,r9,r3
    1808:	1acd883a 	add	r6,r3,r11
    180c:	00c6303a 	nor	r3,zero,r3
    1810:	30c6703a 	and	r3,r6,r3
    1814:	1a86703a 	and	r3,r3,r10
    1818:	183fe01e 	bne	r3,zero,179c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000179c>
    181c:	10bfff04 	addi	r2,r2,-4
    1820:	21000104 	addi	r4,r4,4
    1824:	40bff636 	bltu	r8,r2,1800 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001800>
    1828:	003fdb06 	br	1798 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001798>
    182c:	3005883a 	mov	r2,r6
    1830:	003fd706 	br	1790 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001790>

00001834 <memcpy>:
    1834:	defffd04 	addi	sp,sp,-12
    1838:	dfc00215 	stw	ra,8(sp)
    183c:	dc400115 	stw	r17,4(sp)
    1840:	dc000015 	stw	r16,0(sp)
    1844:	00c003c4 	movi	r3,15
    1848:	2005883a 	mov	r2,r4
    184c:	1980452e 	bgeu	r3,r6,1964 <memcpy+0x130>
    1850:	2906b03a 	or	r3,r5,r4
    1854:	18c000cc 	andi	r3,r3,3
    1858:	1800441e 	bne	r3,zero,196c <memcpy+0x138>
    185c:	347ffc04 	addi	r17,r6,-16
    1860:	8822d13a 	srli	r17,r17,4
    1864:	28c00104 	addi	r3,r5,4
    1868:	23400104 	addi	r13,r4,4
    186c:	8820913a 	slli	r16,r17,4
    1870:	2b000204 	addi	r12,r5,8
    1874:	22c00204 	addi	r11,r4,8
    1878:	84000504 	addi	r16,r16,20
    187c:	2a800304 	addi	r10,r5,12
    1880:	22400304 	addi	r9,r4,12
    1884:	2c21883a 	add	r16,r5,r16
    1888:	2811883a 	mov	r8,r5
    188c:	200f883a 	mov	r7,r4
    1890:	41000017 	ldw	r4,0(r8)
    1894:	1fc00017 	ldw	ra,0(r3)
    1898:	63c00017 	ldw	r15,0(r12)
    189c:	39000015 	stw	r4,0(r7)
    18a0:	53800017 	ldw	r14,0(r10)
    18a4:	6fc00015 	stw	ra,0(r13)
    18a8:	5bc00015 	stw	r15,0(r11)
    18ac:	4b800015 	stw	r14,0(r9)
    18b0:	18c00404 	addi	r3,r3,16
    18b4:	39c00404 	addi	r7,r7,16
    18b8:	42000404 	addi	r8,r8,16
    18bc:	6b400404 	addi	r13,r13,16
    18c0:	63000404 	addi	r12,r12,16
    18c4:	5ac00404 	addi	r11,r11,16
    18c8:	52800404 	addi	r10,r10,16
    18cc:	4a400404 	addi	r9,r9,16
    18d0:	1c3fef1e 	bne	r3,r16,1890 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001890>
    18d4:	89c00044 	addi	r7,r17,1
    18d8:	380e913a 	slli	r7,r7,4
    18dc:	310003cc 	andi	r4,r6,15
    18e0:	02c000c4 	movi	r11,3
    18e4:	11c7883a 	add	r3,r2,r7
    18e8:	29cb883a 	add	r5,r5,r7
    18ec:	5900212e 	bgeu	r11,r4,1974 <memcpy+0x140>
    18f0:	1813883a 	mov	r9,r3
    18f4:	2811883a 	mov	r8,r5
    18f8:	200f883a 	mov	r7,r4
    18fc:	42800017 	ldw	r10,0(r8)
    1900:	4a400104 	addi	r9,r9,4
    1904:	39ffff04 	addi	r7,r7,-4
    1908:	4abfff15 	stw	r10,-4(r9)
    190c:	42000104 	addi	r8,r8,4
    1910:	59fffa36 	bltu	r11,r7,18fc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00018fc>
    1914:	213fff04 	addi	r4,r4,-4
    1918:	2008d0ba 	srli	r4,r4,2
    191c:	318000cc 	andi	r6,r6,3
    1920:	21000044 	addi	r4,r4,1
    1924:	2109883a 	add	r4,r4,r4
    1928:	2109883a 	add	r4,r4,r4
    192c:	1907883a 	add	r3,r3,r4
    1930:	290b883a 	add	r5,r5,r4
    1934:	30000626 	beq	r6,zero,1950 <memcpy+0x11c>
    1938:	198d883a 	add	r6,r3,r6
    193c:	29c00003 	ldbu	r7,0(r5)
    1940:	18c00044 	addi	r3,r3,1
    1944:	29400044 	addi	r5,r5,1
    1948:	19ffffc5 	stb	r7,-1(r3)
    194c:	19bffb1e 	bne	r3,r6,193c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000193c>
    1950:	dfc00217 	ldw	ra,8(sp)
    1954:	dc400117 	ldw	r17,4(sp)
    1958:	dc000017 	ldw	r16,0(sp)
    195c:	dec00304 	addi	sp,sp,12
    1960:	f800283a 	ret
    1964:	2007883a 	mov	r3,r4
    1968:	003ff206 	br	1934 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001934>
    196c:	2007883a 	mov	r3,r4
    1970:	003ff106 	br	1938 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001938>
    1974:	200d883a 	mov	r6,r4
    1978:	003fee06 	br	1934 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001934>

0000197c <memmove>:
    197c:	2005883a 	mov	r2,r4
    1980:	29000b2e 	bgeu	r5,r4,19b0 <memmove+0x34>
    1984:	298f883a 	add	r7,r5,r6
    1988:	21c0092e 	bgeu	r4,r7,19b0 <memmove+0x34>
    198c:	2187883a 	add	r3,r4,r6
    1990:	198bc83a 	sub	r5,r3,r6
    1994:	30004826 	beq	r6,zero,1ab8 <memmove+0x13c>
    1998:	39ffffc4 	addi	r7,r7,-1
    199c:	39000003 	ldbu	r4,0(r7)
    19a0:	18ffffc4 	addi	r3,r3,-1
    19a4:	19000005 	stb	r4,0(r3)
    19a8:	28fffb1e 	bne	r5,r3,1998 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001998>
    19ac:	f800283a 	ret
    19b0:	00c003c4 	movi	r3,15
    19b4:	1980412e 	bgeu	r3,r6,1abc <memmove+0x140>
    19b8:	2886b03a 	or	r3,r5,r2
    19bc:	18c000cc 	andi	r3,r3,3
    19c0:	1800401e 	bne	r3,zero,1ac4 <memmove+0x148>
    19c4:	33fffc04 	addi	r15,r6,-16
    19c8:	781ed13a 	srli	r15,r15,4
    19cc:	28c00104 	addi	r3,r5,4
    19d0:	13400104 	addi	r13,r2,4
    19d4:	781c913a 	slli	r14,r15,4
    19d8:	2b000204 	addi	r12,r5,8
    19dc:	12c00204 	addi	r11,r2,8
    19e0:	73800504 	addi	r14,r14,20
    19e4:	2a800304 	addi	r10,r5,12
    19e8:	12400304 	addi	r9,r2,12
    19ec:	2b9d883a 	add	r14,r5,r14
    19f0:	2811883a 	mov	r8,r5
    19f4:	100f883a 	mov	r7,r2
    19f8:	41000017 	ldw	r4,0(r8)
    19fc:	39c00404 	addi	r7,r7,16
    1a00:	18c00404 	addi	r3,r3,16
    1a04:	393ffc15 	stw	r4,-16(r7)
    1a08:	193ffc17 	ldw	r4,-16(r3)
    1a0c:	6b400404 	addi	r13,r13,16
    1a10:	5ac00404 	addi	r11,r11,16
    1a14:	693ffc15 	stw	r4,-16(r13)
    1a18:	61000017 	ldw	r4,0(r12)
    1a1c:	4a400404 	addi	r9,r9,16
    1a20:	42000404 	addi	r8,r8,16
    1a24:	593ffc15 	stw	r4,-16(r11)
    1a28:	51000017 	ldw	r4,0(r10)
    1a2c:	63000404 	addi	r12,r12,16
    1a30:	52800404 	addi	r10,r10,16
    1a34:	493ffc15 	stw	r4,-16(r9)
    1a38:	1bbfef1e 	bne	r3,r14,19f8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00019f8>
    1a3c:	79000044 	addi	r4,r15,1
    1a40:	2008913a 	slli	r4,r4,4
    1a44:	328003cc 	andi	r10,r6,15
    1a48:	02c000c4 	movi	r11,3
    1a4c:	1107883a 	add	r3,r2,r4
    1a50:	290b883a 	add	r5,r5,r4
    1a54:	5a801e2e 	bgeu	r11,r10,1ad0 <memmove+0x154>
    1a58:	1813883a 	mov	r9,r3
    1a5c:	2811883a 	mov	r8,r5
    1a60:	500f883a 	mov	r7,r10
    1a64:	41000017 	ldw	r4,0(r8)
    1a68:	4a400104 	addi	r9,r9,4
    1a6c:	39ffff04 	addi	r7,r7,-4
    1a70:	493fff15 	stw	r4,-4(r9)
    1a74:	42000104 	addi	r8,r8,4
    1a78:	59fffa36 	bltu	r11,r7,1a64 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001a64>
    1a7c:	513fff04 	addi	r4,r10,-4
    1a80:	2008d0ba 	srli	r4,r4,2
    1a84:	318000cc 	andi	r6,r6,3
    1a88:	21000044 	addi	r4,r4,1
    1a8c:	2109883a 	add	r4,r4,r4
    1a90:	2109883a 	add	r4,r4,r4
    1a94:	1907883a 	add	r3,r3,r4
    1a98:	290b883a 	add	r5,r5,r4
    1a9c:	30000b26 	beq	r6,zero,1acc <memmove+0x150>
    1aa0:	198d883a 	add	r6,r3,r6
    1aa4:	29c00003 	ldbu	r7,0(r5)
    1aa8:	18c00044 	addi	r3,r3,1
    1aac:	29400044 	addi	r5,r5,1
    1ab0:	19ffffc5 	stb	r7,-1(r3)
    1ab4:	19bffb1e 	bne	r3,r6,1aa4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001aa4>
    1ab8:	f800283a 	ret
    1abc:	1007883a 	mov	r3,r2
    1ac0:	003ff606 	br	1a9c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001a9c>
    1ac4:	1007883a 	mov	r3,r2
    1ac8:	003ff506 	br	1aa0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001aa0>
    1acc:	f800283a 	ret
    1ad0:	500d883a 	mov	r6,r10
    1ad4:	003ff106 	br	1a9c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001a9c>

00001ad8 <memset>:
    1ad8:	20c000cc 	andi	r3,r4,3
    1adc:	2005883a 	mov	r2,r4
    1ae0:	18004426 	beq	r3,zero,1bf4 <memset+0x11c>
    1ae4:	31ffffc4 	addi	r7,r6,-1
    1ae8:	30004026 	beq	r6,zero,1bec <memset+0x114>
    1aec:	2813883a 	mov	r9,r5
    1af0:	200d883a 	mov	r6,r4
    1af4:	2007883a 	mov	r3,r4
    1af8:	00000406 	br	1b0c <memset+0x34>
    1afc:	3a3fffc4 	addi	r8,r7,-1
    1b00:	31800044 	addi	r6,r6,1
    1b04:	38003926 	beq	r7,zero,1bec <memset+0x114>
    1b08:	400f883a 	mov	r7,r8
    1b0c:	18c00044 	addi	r3,r3,1
    1b10:	32400005 	stb	r9,0(r6)
    1b14:	1a0000cc 	andi	r8,r3,3
    1b18:	403ff81e 	bne	r8,zero,1afc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001afc>
    1b1c:	010000c4 	movi	r4,3
    1b20:	21c02d2e 	bgeu	r4,r7,1bd8 <memset+0x100>
    1b24:	29003fcc 	andi	r4,r5,255
    1b28:	200c923a 	slli	r6,r4,8
    1b2c:	3108b03a 	or	r4,r6,r4
    1b30:	200c943a 	slli	r6,r4,16
    1b34:	218cb03a 	or	r6,r4,r6
    1b38:	010003c4 	movi	r4,15
    1b3c:	21c0182e 	bgeu	r4,r7,1ba0 <memset+0xc8>
    1b40:	3b3ffc04 	addi	r12,r7,-16
    1b44:	6018d13a 	srli	r12,r12,4
    1b48:	1a000104 	addi	r8,r3,4
    1b4c:	1ac00204 	addi	r11,r3,8
    1b50:	6008913a 	slli	r4,r12,4
    1b54:	1a800304 	addi	r10,r3,12
    1b58:	1813883a 	mov	r9,r3
    1b5c:	21000504 	addi	r4,r4,20
    1b60:	1909883a 	add	r4,r3,r4
    1b64:	49800015 	stw	r6,0(r9)
    1b68:	41800015 	stw	r6,0(r8)
    1b6c:	59800015 	stw	r6,0(r11)
    1b70:	51800015 	stw	r6,0(r10)
    1b74:	42000404 	addi	r8,r8,16
    1b78:	4a400404 	addi	r9,r9,16
    1b7c:	5ac00404 	addi	r11,r11,16
    1b80:	52800404 	addi	r10,r10,16
    1b84:	413ff71e 	bne	r8,r4,1b64 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001b64>
    1b88:	63000044 	addi	r12,r12,1
    1b8c:	6018913a 	slli	r12,r12,4
    1b90:	39c003cc 	andi	r7,r7,15
    1b94:	010000c4 	movi	r4,3
    1b98:	1b07883a 	add	r3,r3,r12
    1b9c:	21c00e2e 	bgeu	r4,r7,1bd8 <memset+0x100>
    1ba0:	1813883a 	mov	r9,r3
    1ba4:	3811883a 	mov	r8,r7
    1ba8:	010000c4 	movi	r4,3
    1bac:	49800015 	stw	r6,0(r9)
    1bb0:	423fff04 	addi	r8,r8,-4
    1bb4:	4a400104 	addi	r9,r9,4
    1bb8:	223ffc36 	bltu	r4,r8,1bac <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001bac>
    1bbc:	393fff04 	addi	r4,r7,-4
    1bc0:	2008d0ba 	srli	r4,r4,2
    1bc4:	39c000cc 	andi	r7,r7,3
    1bc8:	21000044 	addi	r4,r4,1
    1bcc:	2109883a 	add	r4,r4,r4
    1bd0:	2109883a 	add	r4,r4,r4
    1bd4:	1907883a 	add	r3,r3,r4
    1bd8:	38000526 	beq	r7,zero,1bf0 <memset+0x118>
    1bdc:	19cf883a 	add	r7,r3,r7
    1be0:	19400005 	stb	r5,0(r3)
    1be4:	18c00044 	addi	r3,r3,1
    1be8:	38fffd1e 	bne	r7,r3,1be0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001be0>
    1bec:	f800283a 	ret
    1bf0:	f800283a 	ret
    1bf4:	2007883a 	mov	r3,r4
    1bf8:	300f883a 	mov	r7,r6
    1bfc:	003fc706 	br	1b1c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001b1c>

00001c00 <_realloc_r>:
    1c00:	defff604 	addi	sp,sp,-40
    1c04:	dc400115 	stw	r17,4(sp)
    1c08:	dfc00915 	stw	ra,36(sp)
    1c0c:	df000815 	stw	fp,32(sp)
    1c10:	ddc00715 	stw	r23,28(sp)
    1c14:	dd800615 	stw	r22,24(sp)
    1c18:	dd400515 	stw	r21,20(sp)
    1c1c:	dd000415 	stw	r20,16(sp)
    1c20:	dcc00315 	stw	r19,12(sp)
    1c24:	dc800215 	stw	r18,8(sp)
    1c28:	dc000015 	stw	r16,0(sp)
    1c2c:	3023883a 	mov	r17,r6
    1c30:	2800b626 	beq	r5,zero,1f0c <_realloc_r+0x30c>
    1c34:	2829883a 	mov	r20,r5
    1c38:	2025883a 	mov	r18,r4
    1c3c:	00037380 	call	3738 <__malloc_lock>
    1c40:	a0ffff17 	ldw	r3,-4(r20)
    1c44:	043fff04 	movi	r16,-4
    1c48:	888002c4 	addi	r2,r17,11
    1c4c:	01000584 	movi	r4,22
    1c50:	a57ffe04 	addi	r21,r20,-8
    1c54:	1c20703a 	and	r16,r3,r16
    1c58:	2080332e 	bgeu	r4,r2,1d28 <_realloc_r+0x128>
    1c5c:	05bffe04 	movi	r22,-8
    1c60:	15ac703a 	and	r22,r2,r22
    1c64:	b005883a 	mov	r2,r22
    1c68:	b0005716 	blt	r22,zero,1dc8 <_realloc_r+0x1c8>
    1c6c:	b4405636 	bltu	r22,r17,1dc8 <_realloc_r+0x1c8>
    1c70:	8080300e 	bge	r16,r2,1d34 <_realloc_r+0x134>
    1c74:	07000034 	movhi	fp,0
    1c78:	e71bb204 	addi	fp,fp,28360
    1c7c:	e2000217 	ldw	r8,8(fp)
    1c80:	ac09883a 	add	r4,r21,r16
    1c84:	22006126 	beq	r4,r8,1e0c <_realloc_r+0x20c>
    1c88:	22400117 	ldw	r9,4(r4)
    1c8c:	01ffff84 	movi	r7,-2
    1c90:	49ce703a 	and	r7,r9,r7
    1c94:	21cf883a 	add	r7,r4,r7
    1c98:	39800117 	ldw	r6,4(r7)
    1c9c:	3180004c 	andi	r6,r6,1
    1ca0:	30003e26 	beq	r6,zero,1d9c <_realloc_r+0x19c>
    1ca4:	18c0004c 	andi	r3,r3,1
    1ca8:	18008126 	beq	r3,zero,1eb0 <_realloc_r+0x2b0>
    1cac:	880b883a 	mov	r5,r17
    1cb0:	9009883a 	mov	r4,r18
    1cb4:	0000f440 	call	f44 <_malloc_r>
    1cb8:	1023883a 	mov	r17,r2
    1cbc:	10011e26 	beq	r2,zero,2138 <_realloc_r+0x538>
    1cc0:	a0ffff17 	ldw	r3,-4(r20)
    1cc4:	113ffe04 	addi	r4,r2,-8
    1cc8:	00bfff84 	movi	r2,-2
    1ccc:	1884703a 	and	r2,r3,r2
    1cd0:	a885883a 	add	r2,r21,r2
    1cd4:	2080ee26 	beq	r4,r2,2090 <_realloc_r+0x490>
    1cd8:	81bfff04 	addi	r6,r16,-4
    1cdc:	00800904 	movi	r2,36
    1ce0:	1180b836 	bltu	r2,r6,1fc4 <_realloc_r+0x3c4>
    1ce4:	00c004c4 	movi	r3,19
    1ce8:	19809536 	bltu	r3,r6,1f40 <_realloc_r+0x340>
    1cec:	8805883a 	mov	r2,r17
    1cf0:	a007883a 	mov	r3,r20
    1cf4:	19000017 	ldw	r4,0(r3)
    1cf8:	11000015 	stw	r4,0(r2)
    1cfc:	19000117 	ldw	r4,4(r3)
    1d00:	11000115 	stw	r4,4(r2)
    1d04:	18c00217 	ldw	r3,8(r3)
    1d08:	10c00215 	stw	r3,8(r2)
    1d0c:	a00b883a 	mov	r5,r20
    1d10:	9009883a 	mov	r4,r18
    1d14:	00029cc0 	call	29cc <_free_r>
    1d18:	9009883a 	mov	r4,r18
    1d1c:	000375c0 	call	375c <__malloc_unlock>
    1d20:	8805883a 	mov	r2,r17
    1d24:	00001106 	br	1d6c <_realloc_r+0x16c>
    1d28:	00800404 	movi	r2,16
    1d2c:	102d883a 	mov	r22,r2
    1d30:	003fce06 	br	1c6c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001c6c>
    1d34:	a023883a 	mov	r17,r20
    1d38:	858fc83a 	sub	r7,r16,r22
    1d3c:	008003c4 	movi	r2,15
    1d40:	18c0004c 	andi	r3,r3,1
    1d44:	11c02436 	bltu	r2,r7,1dd8 <_realloc_r+0x1d8>
    1d48:	1c06b03a 	or	r3,r3,r16
    1d4c:	a8c00115 	stw	r3,4(r21)
    1d50:	ac21883a 	add	r16,r21,r16
    1d54:	80800117 	ldw	r2,4(r16)
    1d58:	10800054 	ori	r2,r2,1
    1d5c:	80800115 	stw	r2,4(r16)
    1d60:	9009883a 	mov	r4,r18
    1d64:	000375c0 	call	375c <__malloc_unlock>
    1d68:	8805883a 	mov	r2,r17
    1d6c:	dfc00917 	ldw	ra,36(sp)
    1d70:	df000817 	ldw	fp,32(sp)
    1d74:	ddc00717 	ldw	r23,28(sp)
    1d78:	dd800617 	ldw	r22,24(sp)
    1d7c:	dd400517 	ldw	r21,20(sp)
    1d80:	dd000417 	ldw	r20,16(sp)
    1d84:	dcc00317 	ldw	r19,12(sp)
    1d88:	dc800217 	ldw	r18,8(sp)
    1d8c:	dc400117 	ldw	r17,4(sp)
    1d90:	dc000017 	ldw	r16,0(sp)
    1d94:	dec00a04 	addi	sp,sp,40
    1d98:	f800283a 	ret
    1d9c:	017fff04 	movi	r5,-4
    1da0:	494a703a 	and	r5,r9,r5
    1da4:	814d883a 	add	r6,r16,r5
    1da8:	30801e16 	blt	r6,r2,1e24 <_realloc_r+0x224>
    1dac:	20800317 	ldw	r2,12(r4)
    1db0:	21000217 	ldw	r4,8(r4)
    1db4:	a023883a 	mov	r17,r20
    1db8:	3021883a 	mov	r16,r6
    1dbc:	20800315 	stw	r2,12(r4)
    1dc0:	11000215 	stw	r4,8(r2)
    1dc4:	003fdc06 	br	1d38 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d38>
    1dc8:	00800304 	movi	r2,12
    1dcc:	90800015 	stw	r2,0(r18)
    1dd0:	0005883a 	mov	r2,zero
    1dd4:	003fe506 	br	1d6c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d6c>
    1dd8:	1d86b03a 	or	r3,r3,r22
    1ddc:	a8c00115 	stw	r3,4(r21)
    1de0:	ad8b883a 	add	r5,r21,r22
    1de4:	38c00054 	ori	r3,r7,1
    1de8:	28c00115 	stw	r3,4(r5)
    1dec:	29cf883a 	add	r7,r5,r7
    1df0:	38c00117 	ldw	r3,4(r7)
    1df4:	29400204 	addi	r5,r5,8
    1df8:	9009883a 	mov	r4,r18
    1dfc:	18800054 	ori	r2,r3,1
    1e00:	38800115 	stw	r2,4(r7)
    1e04:	00029cc0 	call	29cc <_free_r>
    1e08:	003fd506 	br	1d60 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d60>
    1e0c:	21c00117 	ldw	r7,4(r4)
    1e10:	017fff04 	movi	r5,-4
    1e14:	b1800404 	addi	r6,r22,16
    1e18:	394a703a 	and	r5,r7,r5
    1e1c:	814f883a 	add	r7,r16,r5
    1e20:	39805b0e 	bge	r7,r6,1f90 <_realloc_r+0x390>
    1e24:	18c0004c 	andi	r3,r3,1
    1e28:	183fa01e 	bne	r3,zero,1cac <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001cac>
    1e2c:	a4fffe17 	ldw	r19,-8(r20)
    1e30:	00ffff04 	movi	r3,-4
    1e34:	ace7c83a 	sub	r19,r21,r19
    1e38:	99800117 	ldw	r6,4(r19)
    1e3c:	30c6703a 	and	r3,r6,r3
    1e40:	20002026 	beq	r4,zero,1ec4 <_realloc_r+0x2c4>
    1e44:	80ef883a 	add	r23,r16,r3
    1e48:	b96f883a 	add	r23,r23,r5
    1e4c:	22006126 	beq	r4,r8,1fd4 <_realloc_r+0x3d4>
    1e50:	b8801c16 	blt	r23,r2,1ec4 <_realloc_r+0x2c4>
    1e54:	20800317 	ldw	r2,12(r4)
    1e58:	20c00217 	ldw	r3,8(r4)
    1e5c:	81bfff04 	addi	r6,r16,-4
    1e60:	01000904 	movi	r4,36
    1e64:	18800315 	stw	r2,12(r3)
    1e68:	10c00215 	stw	r3,8(r2)
    1e6c:	98c00217 	ldw	r3,8(r19)
    1e70:	98800317 	ldw	r2,12(r19)
    1e74:	9c400204 	addi	r17,r19,8
    1e78:	18800315 	stw	r2,12(r3)
    1e7c:	10c00215 	stw	r3,8(r2)
    1e80:	21801b36 	bltu	r4,r6,1ef0 <_realloc_r+0x2f0>
    1e84:	008004c4 	movi	r2,19
    1e88:	1180362e 	bgeu	r2,r6,1f64 <_realloc_r+0x364>
    1e8c:	a0800017 	ldw	r2,0(r20)
    1e90:	98800215 	stw	r2,8(r19)
    1e94:	a0800117 	ldw	r2,4(r20)
    1e98:	98800315 	stw	r2,12(r19)
    1e9c:	008006c4 	movi	r2,27
    1ea0:	11808136 	bltu	r2,r6,20a8 <_realloc_r+0x4a8>
    1ea4:	98800404 	addi	r2,r19,16
    1ea8:	a5000204 	addi	r20,r20,8
    1eac:	00002e06 	br	1f68 <_realloc_r+0x368>
    1eb0:	a4fffe17 	ldw	r19,-8(r20)
    1eb4:	00ffff04 	movi	r3,-4
    1eb8:	ace7c83a 	sub	r19,r21,r19
    1ebc:	99000117 	ldw	r4,4(r19)
    1ec0:	20c6703a 	and	r3,r4,r3
    1ec4:	983f7926 	beq	r19,zero,1cac <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001cac>
    1ec8:	80ef883a 	add	r23,r16,r3
    1ecc:	b8bf7716 	blt	r23,r2,1cac <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001cac>
    1ed0:	98800317 	ldw	r2,12(r19)
    1ed4:	98c00217 	ldw	r3,8(r19)
    1ed8:	81bfff04 	addi	r6,r16,-4
    1edc:	01000904 	movi	r4,36
    1ee0:	18800315 	stw	r2,12(r3)
    1ee4:	10c00215 	stw	r3,8(r2)
    1ee8:	9c400204 	addi	r17,r19,8
    1eec:	21bfe52e 	bgeu	r4,r6,1e84 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001e84>
    1ef0:	a00b883a 	mov	r5,r20
    1ef4:	8809883a 	mov	r4,r17
    1ef8:	000197c0 	call	197c <memmove>
    1efc:	98c00117 	ldw	r3,4(r19)
    1f00:	b821883a 	mov	r16,r23
    1f04:	982b883a 	mov	r21,r19
    1f08:	003f8b06 	br	1d38 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d38>
    1f0c:	300b883a 	mov	r5,r6
    1f10:	dfc00917 	ldw	ra,36(sp)
    1f14:	df000817 	ldw	fp,32(sp)
    1f18:	ddc00717 	ldw	r23,28(sp)
    1f1c:	dd800617 	ldw	r22,24(sp)
    1f20:	dd400517 	ldw	r21,20(sp)
    1f24:	dd000417 	ldw	r20,16(sp)
    1f28:	dcc00317 	ldw	r19,12(sp)
    1f2c:	dc800217 	ldw	r18,8(sp)
    1f30:	dc400117 	ldw	r17,4(sp)
    1f34:	dc000017 	ldw	r16,0(sp)
    1f38:	dec00a04 	addi	sp,sp,40
    1f3c:	0000f441 	jmpi	f44 <_malloc_r>
    1f40:	a0c00017 	ldw	r3,0(r20)
    1f44:	88c00015 	stw	r3,0(r17)
    1f48:	a0c00117 	ldw	r3,4(r20)
    1f4c:	88c00115 	stw	r3,4(r17)
    1f50:	00c006c4 	movi	r3,27
    1f54:	19804636 	bltu	r3,r6,2070 <_realloc_r+0x470>
    1f58:	88800204 	addi	r2,r17,8
    1f5c:	a0c00204 	addi	r3,r20,8
    1f60:	003f6406 	br	1cf4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001cf4>
    1f64:	8805883a 	mov	r2,r17
    1f68:	a0c00017 	ldw	r3,0(r20)
    1f6c:	b821883a 	mov	r16,r23
    1f70:	982b883a 	mov	r21,r19
    1f74:	10c00015 	stw	r3,0(r2)
    1f78:	a0c00117 	ldw	r3,4(r20)
    1f7c:	10c00115 	stw	r3,4(r2)
    1f80:	a0c00217 	ldw	r3,8(r20)
    1f84:	10c00215 	stw	r3,8(r2)
    1f88:	98c00117 	ldw	r3,4(r19)
    1f8c:	003f6a06 	br	1d38 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d38>
    1f90:	adab883a 	add	r21,r21,r22
    1f94:	3d85c83a 	sub	r2,r7,r22
    1f98:	e5400215 	stw	r21,8(fp)
    1f9c:	10800054 	ori	r2,r2,1
    1fa0:	a8800115 	stw	r2,4(r21)
    1fa4:	a0bfff17 	ldw	r2,-4(r20)
    1fa8:	9009883a 	mov	r4,r18
    1fac:	1080004c 	andi	r2,r2,1
    1fb0:	1584b03a 	or	r2,r2,r22
    1fb4:	a0bfff15 	stw	r2,-4(r20)
    1fb8:	000375c0 	call	375c <__malloc_unlock>
    1fbc:	a005883a 	mov	r2,r20
    1fc0:	003f6a06 	br	1d6c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d6c>
    1fc4:	a00b883a 	mov	r5,r20
    1fc8:	8809883a 	mov	r4,r17
    1fcc:	000197c0 	call	197c <memmove>
    1fd0:	003f4e06 	br	1d0c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d0c>
    1fd4:	b1000404 	addi	r4,r22,16
    1fd8:	b93fba16 	blt	r23,r4,1ec4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001ec4>
    1fdc:	98800317 	ldw	r2,12(r19)
    1fe0:	98c00217 	ldw	r3,8(r19)
    1fe4:	81bfff04 	addi	r6,r16,-4
    1fe8:	01000904 	movi	r4,36
    1fec:	18800315 	stw	r2,12(r3)
    1ff0:	10c00215 	stw	r3,8(r2)
    1ff4:	9c400204 	addi	r17,r19,8
    1ff8:	21804336 	bltu	r4,r6,2108 <_realloc_r+0x508>
    1ffc:	008004c4 	movi	r2,19
    2000:	11803f2e 	bgeu	r2,r6,2100 <_realloc_r+0x500>
    2004:	a0800017 	ldw	r2,0(r20)
    2008:	98800215 	stw	r2,8(r19)
    200c:	a0800117 	ldw	r2,4(r20)
    2010:	98800315 	stw	r2,12(r19)
    2014:	008006c4 	movi	r2,27
    2018:	11803f36 	bltu	r2,r6,2118 <_realloc_r+0x518>
    201c:	98800404 	addi	r2,r19,16
    2020:	a5000204 	addi	r20,r20,8
    2024:	a0c00017 	ldw	r3,0(r20)
    2028:	10c00015 	stw	r3,0(r2)
    202c:	a0c00117 	ldw	r3,4(r20)
    2030:	10c00115 	stw	r3,4(r2)
    2034:	a0c00217 	ldw	r3,8(r20)
    2038:	10c00215 	stw	r3,8(r2)
    203c:	9d87883a 	add	r3,r19,r22
    2040:	bd85c83a 	sub	r2,r23,r22
    2044:	e0c00215 	stw	r3,8(fp)
    2048:	10800054 	ori	r2,r2,1
    204c:	18800115 	stw	r2,4(r3)
    2050:	98800117 	ldw	r2,4(r19)
    2054:	9009883a 	mov	r4,r18
    2058:	1080004c 	andi	r2,r2,1
    205c:	1584b03a 	or	r2,r2,r22
    2060:	98800115 	stw	r2,4(r19)
    2064:	000375c0 	call	375c <__malloc_unlock>
    2068:	8805883a 	mov	r2,r17
    206c:	003f3f06 	br	1d6c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d6c>
    2070:	a0c00217 	ldw	r3,8(r20)
    2074:	88c00215 	stw	r3,8(r17)
    2078:	a0c00317 	ldw	r3,12(r20)
    207c:	88c00315 	stw	r3,12(r17)
    2080:	30801126 	beq	r6,r2,20c8 <_realloc_r+0x4c8>
    2084:	88800404 	addi	r2,r17,16
    2088:	a0c00404 	addi	r3,r20,16
    208c:	003f1906 	br	1cf4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001cf4>
    2090:	893fff17 	ldw	r4,-4(r17)
    2094:	00bfff04 	movi	r2,-4
    2098:	a023883a 	mov	r17,r20
    209c:	2084703a 	and	r2,r4,r2
    20a0:	80a1883a 	add	r16,r16,r2
    20a4:	003f2406 	br	1d38 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d38>
    20a8:	a0800217 	ldw	r2,8(r20)
    20ac:	98800415 	stw	r2,16(r19)
    20b0:	a0800317 	ldw	r2,12(r20)
    20b4:	98800515 	stw	r2,20(r19)
    20b8:	31000a26 	beq	r6,r4,20e4 <_realloc_r+0x4e4>
    20bc:	98800604 	addi	r2,r19,24
    20c0:	a5000404 	addi	r20,r20,16
    20c4:	003fa806 	br	1f68 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001f68>
    20c8:	a1000417 	ldw	r4,16(r20)
    20cc:	88800604 	addi	r2,r17,24
    20d0:	a0c00604 	addi	r3,r20,24
    20d4:	89000415 	stw	r4,16(r17)
    20d8:	a1000517 	ldw	r4,20(r20)
    20dc:	89000515 	stw	r4,20(r17)
    20e0:	003f0406 	br	1cf4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001cf4>
    20e4:	a0c00417 	ldw	r3,16(r20)
    20e8:	a5000604 	addi	r20,r20,24
    20ec:	98800804 	addi	r2,r19,32
    20f0:	98c00615 	stw	r3,24(r19)
    20f4:	a0ffff17 	ldw	r3,-4(r20)
    20f8:	98c00715 	stw	r3,28(r19)
    20fc:	003f9a06 	br	1f68 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001f68>
    2100:	8805883a 	mov	r2,r17
    2104:	003fc706 	br	2024 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002024>
    2108:	a00b883a 	mov	r5,r20
    210c:	8809883a 	mov	r4,r17
    2110:	000197c0 	call	197c <memmove>
    2114:	003fc906 	br	203c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000203c>
    2118:	a0800217 	ldw	r2,8(r20)
    211c:	98800415 	stw	r2,16(r19)
    2120:	a0800317 	ldw	r2,12(r20)
    2124:	98800515 	stw	r2,20(r19)
    2128:	31000726 	beq	r6,r4,2148 <_realloc_r+0x548>
    212c:	98800604 	addi	r2,r19,24
    2130:	a5000404 	addi	r20,r20,16
    2134:	003fbb06 	br	2024 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002024>
    2138:	9009883a 	mov	r4,r18
    213c:	000375c0 	call	375c <__malloc_unlock>
    2140:	0005883a 	mov	r2,zero
    2144:	003f0906 	br	1d6c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d6c>
    2148:	a0c00417 	ldw	r3,16(r20)
    214c:	a5000604 	addi	r20,r20,24
    2150:	98800804 	addi	r2,r19,32
    2154:	98c00615 	stw	r3,24(r19)
    2158:	a0ffff17 	ldw	r3,-4(r20)
    215c:	98c00715 	stw	r3,28(r19)
    2160:	003fb006 	br	2024 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002024>

00002164 <_sbrk_r>:
    2164:	defffd04 	addi	sp,sp,-12
    2168:	dc000015 	stw	r16,0(sp)
    216c:	04000074 	movhi	r16,1
    2170:	dc400115 	stw	r17,4(sp)
    2174:	84290204 	addi	r16,r16,-23544
    2178:	2023883a 	mov	r17,r4
    217c:	2809883a 	mov	r4,r5
    2180:	dfc00215 	stw	ra,8(sp)
    2184:	80000015 	stw	zero,0(r16)
    2188:	000391c0 	call	391c <sbrk>
    218c:	00ffffc4 	movi	r3,-1
    2190:	10c00526 	beq	r2,r3,21a8 <_sbrk_r+0x44>
    2194:	dfc00217 	ldw	ra,8(sp)
    2198:	dc400117 	ldw	r17,4(sp)
    219c:	dc000017 	ldw	r16,0(sp)
    21a0:	dec00304 	addi	sp,sp,12
    21a4:	f800283a 	ret
    21a8:	80c00017 	ldw	r3,0(r16)
    21ac:	183ff926 	beq	r3,zero,2194 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002194>
    21b0:	88c00015 	stw	r3,0(r17)
    21b4:	003ff706 	br	2194 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002194>

000021b8 <__sread>:
    21b8:	defffe04 	addi	sp,sp,-8
    21bc:	dc000015 	stw	r16,0(sp)
    21c0:	2821883a 	mov	r16,r5
    21c4:	2940038f 	ldh	r5,14(r5)
    21c8:	dfc00115 	stw	ra,4(sp)
    21cc:	0002ef80 	call	2ef8 <_read_r>
    21d0:	10000716 	blt	r2,zero,21f0 <__sread+0x38>
    21d4:	80c01417 	ldw	r3,80(r16)
    21d8:	1887883a 	add	r3,r3,r2
    21dc:	80c01415 	stw	r3,80(r16)
    21e0:	dfc00117 	ldw	ra,4(sp)
    21e4:	dc000017 	ldw	r16,0(sp)
    21e8:	dec00204 	addi	sp,sp,8
    21ec:	f800283a 	ret
    21f0:	80c0030b 	ldhu	r3,12(r16)
    21f4:	18fbffcc 	andi	r3,r3,61439
    21f8:	80c0030d 	sth	r3,12(r16)
    21fc:	dfc00117 	ldw	ra,4(sp)
    2200:	dc000017 	ldw	r16,0(sp)
    2204:	dec00204 	addi	sp,sp,8
    2208:	f800283a 	ret

0000220c <__seofread>:
    220c:	0005883a 	mov	r2,zero
    2210:	f800283a 	ret

00002214 <__swrite>:
    2214:	2880030b 	ldhu	r2,12(r5)
    2218:	defffb04 	addi	sp,sp,-20
    221c:	dcc00315 	stw	r19,12(sp)
    2220:	dc800215 	stw	r18,8(sp)
    2224:	dc400115 	stw	r17,4(sp)
    2228:	dc000015 	stw	r16,0(sp)
    222c:	dfc00415 	stw	ra,16(sp)
    2230:	10c0400c 	andi	r3,r2,256
    2234:	2821883a 	mov	r16,r5
    2238:	2023883a 	mov	r17,r4
    223c:	3025883a 	mov	r18,r6
    2240:	3827883a 	mov	r19,r7
    2244:	18000526 	beq	r3,zero,225c <__swrite+0x48>
    2248:	2940038f 	ldh	r5,14(r5)
    224c:	01c00084 	movi	r7,2
    2250:	000d883a 	mov	r6,zero
    2254:	0002cdc0 	call	2cdc <_lseek_r>
    2258:	8080030b 	ldhu	r2,12(r16)
    225c:	8140038f 	ldh	r5,14(r16)
    2260:	10bbffcc 	andi	r2,r2,61439
    2264:	980f883a 	mov	r7,r19
    2268:	900d883a 	mov	r6,r18
    226c:	8809883a 	mov	r4,r17
    2270:	8080030d 	sth	r2,12(r16)
    2274:	dfc00417 	ldw	ra,16(sp)
    2278:	dcc00317 	ldw	r19,12(sp)
    227c:	dc800217 	ldw	r18,8(sp)
    2280:	dc400117 	ldw	r17,4(sp)
    2284:	dc000017 	ldw	r16,0(sp)
    2288:	dec00504 	addi	sp,sp,20
    228c:	00022f41 	jmpi	22f4 <_write_r>

00002290 <__sseek>:
    2290:	defffe04 	addi	sp,sp,-8
    2294:	dc000015 	stw	r16,0(sp)
    2298:	2821883a 	mov	r16,r5
    229c:	2940038f 	ldh	r5,14(r5)
    22a0:	dfc00115 	stw	ra,4(sp)
    22a4:	0002cdc0 	call	2cdc <_lseek_r>
    22a8:	00ffffc4 	movi	r3,-1
    22ac:	10c00826 	beq	r2,r3,22d0 <__sseek+0x40>
    22b0:	80c0030b 	ldhu	r3,12(r16)
    22b4:	80801415 	stw	r2,80(r16)
    22b8:	18c40014 	ori	r3,r3,4096
    22bc:	80c0030d 	sth	r3,12(r16)
    22c0:	dfc00117 	ldw	ra,4(sp)
    22c4:	dc000017 	ldw	r16,0(sp)
    22c8:	dec00204 	addi	sp,sp,8
    22cc:	f800283a 	ret
    22d0:	80c0030b 	ldhu	r3,12(r16)
    22d4:	18fbffcc 	andi	r3,r3,61439
    22d8:	80c0030d 	sth	r3,12(r16)
    22dc:	dfc00117 	ldw	ra,4(sp)
    22e0:	dc000017 	ldw	r16,0(sp)
    22e4:	dec00204 	addi	sp,sp,8
    22e8:	f800283a 	ret

000022ec <__sclose>:
    22ec:	2940038f 	ldh	r5,14(r5)
    22f0:	00024a81 	jmpi	24a8 <_close_r>

000022f4 <_write_r>:
    22f4:	defffd04 	addi	sp,sp,-12
    22f8:	2805883a 	mov	r2,r5
    22fc:	dc000015 	stw	r16,0(sp)
    2300:	04000074 	movhi	r16,1
    2304:	dc400115 	stw	r17,4(sp)
    2308:	300b883a 	mov	r5,r6
    230c:	84290204 	addi	r16,r16,-23544
    2310:	2023883a 	mov	r17,r4
    2314:	380d883a 	mov	r6,r7
    2318:	1009883a 	mov	r4,r2
    231c:	dfc00215 	stw	ra,8(sp)
    2320:	80000015 	stw	zero,0(r16)
    2324:	0003a080 	call	3a08 <write>
    2328:	00ffffc4 	movi	r3,-1
    232c:	10c00526 	beq	r2,r3,2344 <_write_r+0x50>
    2330:	dfc00217 	ldw	ra,8(sp)
    2334:	dc400117 	ldw	r17,4(sp)
    2338:	dc000017 	ldw	r16,0(sp)
    233c:	dec00304 	addi	sp,sp,12
    2340:	f800283a 	ret
    2344:	80c00017 	ldw	r3,0(r16)
    2348:	183ff926 	beq	r3,zero,2330 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002330>
    234c:	88c00015 	stw	r3,0(r17)
    2350:	003ff706 	br	2330 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002330>

00002354 <__swsetup_r>:
    2354:	00800074 	movhi	r2,1
    2358:	defffd04 	addi	sp,sp,-12
    235c:	10a1c604 	addi	r2,r2,-30952
    2360:	dc400115 	stw	r17,4(sp)
    2364:	2023883a 	mov	r17,r4
    2368:	11000017 	ldw	r4,0(r2)
    236c:	dc000015 	stw	r16,0(sp)
    2370:	dfc00215 	stw	ra,8(sp)
    2374:	2821883a 	mov	r16,r5
    2378:	20000226 	beq	r4,zero,2384 <__swsetup_r+0x30>
    237c:	20800e17 	ldw	r2,56(r4)
    2380:	10003126 	beq	r2,zero,2448 <__swsetup_r+0xf4>
    2384:	8080030b 	ldhu	r2,12(r16)
    2388:	10c0020c 	andi	r3,r2,8
    238c:	1009883a 	mov	r4,r2
    2390:	18000f26 	beq	r3,zero,23d0 <__swsetup_r+0x7c>
    2394:	80c00417 	ldw	r3,16(r16)
    2398:	18001526 	beq	r3,zero,23f0 <__swsetup_r+0x9c>
    239c:	1100004c 	andi	r4,r2,1
    23a0:	20001c1e 	bne	r4,zero,2414 <__swsetup_r+0xc0>
    23a4:	1080008c 	andi	r2,r2,2
    23a8:	1000291e 	bne	r2,zero,2450 <__swsetup_r+0xfc>
    23ac:	80800517 	ldw	r2,20(r16)
    23b0:	80800215 	stw	r2,8(r16)
    23b4:	18001c26 	beq	r3,zero,2428 <__swsetup_r+0xd4>
    23b8:	0005883a 	mov	r2,zero
    23bc:	dfc00217 	ldw	ra,8(sp)
    23c0:	dc400117 	ldw	r17,4(sp)
    23c4:	dc000017 	ldw	r16,0(sp)
    23c8:	dec00304 	addi	sp,sp,12
    23cc:	f800283a 	ret
    23d0:	2080040c 	andi	r2,r4,16
    23d4:	10002e26 	beq	r2,zero,2490 <__swsetup_r+0x13c>
    23d8:	2080010c 	andi	r2,r4,4
    23dc:	10001e1e 	bne	r2,zero,2458 <__swsetup_r+0x104>
    23e0:	80c00417 	ldw	r3,16(r16)
    23e4:	20800214 	ori	r2,r4,8
    23e8:	8080030d 	sth	r2,12(r16)
    23ec:	183feb1e 	bne	r3,zero,239c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000239c>
    23f0:	1100a00c 	andi	r4,r2,640
    23f4:	01408004 	movi	r5,512
    23f8:	217fe826 	beq	r4,r5,239c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000239c>
    23fc:	800b883a 	mov	r5,r16
    2400:	8809883a 	mov	r4,r17
    2404:	0002d3c0 	call	2d3c <__smakebuf_r>
    2408:	8080030b 	ldhu	r2,12(r16)
    240c:	80c00417 	ldw	r3,16(r16)
    2410:	003fe206 	br	239c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000239c>
    2414:	80800517 	ldw	r2,20(r16)
    2418:	80000215 	stw	zero,8(r16)
    241c:	0085c83a 	sub	r2,zero,r2
    2420:	80800615 	stw	r2,24(r16)
    2424:	183fe41e 	bne	r3,zero,23b8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00023b8>
    2428:	80c0030b 	ldhu	r3,12(r16)
    242c:	0005883a 	mov	r2,zero
    2430:	1900200c 	andi	r4,r3,128
    2434:	203fe126 	beq	r4,zero,23bc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00023bc>
    2438:	18c01014 	ori	r3,r3,64
    243c:	80c0030d 	sth	r3,12(r16)
    2440:	00bfffc4 	movi	r2,-1
    2444:	003fdd06 	br	23bc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00023bc>
    2448:	00008b00 	call	8b0 <__sinit>
    244c:	003fcd06 	br	2384 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002384>
    2450:	0005883a 	mov	r2,zero
    2454:	003fd606 	br	23b0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00023b0>
    2458:	81400c17 	ldw	r5,48(r16)
    245c:	28000626 	beq	r5,zero,2478 <__swsetup_r+0x124>
    2460:	80801004 	addi	r2,r16,64
    2464:	28800326 	beq	r5,r2,2474 <__swsetup_r+0x120>
    2468:	8809883a 	mov	r4,r17
    246c:	00029cc0 	call	29cc <_free_r>
    2470:	8100030b 	ldhu	r4,12(r16)
    2474:	80000c15 	stw	zero,48(r16)
    2478:	80c00417 	ldw	r3,16(r16)
    247c:	00bff6c4 	movi	r2,-37
    2480:	1108703a 	and	r4,r2,r4
    2484:	80000115 	stw	zero,4(r16)
    2488:	80c00015 	stw	r3,0(r16)
    248c:	003fd506 	br	23e4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00023e4>
    2490:	00800244 	movi	r2,9
    2494:	88800015 	stw	r2,0(r17)
    2498:	20801014 	ori	r2,r4,64
    249c:	8080030d 	sth	r2,12(r16)
    24a0:	00bfffc4 	movi	r2,-1
    24a4:	003fc506 	br	23bc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00023bc>

000024a8 <_close_r>:
    24a8:	defffd04 	addi	sp,sp,-12
    24ac:	dc000015 	stw	r16,0(sp)
    24b0:	04000074 	movhi	r16,1
    24b4:	dc400115 	stw	r17,4(sp)
    24b8:	84290204 	addi	r16,r16,-23544
    24bc:	2023883a 	mov	r17,r4
    24c0:	2809883a 	mov	r4,r5
    24c4:	dfc00215 	stw	ra,8(sp)
    24c8:	80000015 	stw	zero,0(r16)
    24cc:	00031f80 	call	31f8 <close>
    24d0:	00ffffc4 	movi	r3,-1
    24d4:	10c00526 	beq	r2,r3,24ec <_close_r+0x44>
    24d8:	dfc00217 	ldw	ra,8(sp)
    24dc:	dc400117 	ldw	r17,4(sp)
    24e0:	dc000017 	ldw	r16,0(sp)
    24e4:	dec00304 	addi	sp,sp,12
    24e8:	f800283a 	ret
    24ec:	80c00017 	ldw	r3,0(r16)
    24f0:	183ff926 	beq	r3,zero,24d8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00024d8>
    24f4:	88c00015 	stw	r3,0(r17)
    24f8:	003ff706 	br	24d8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00024d8>

000024fc <_fclose_r>:
    24fc:	28003926 	beq	r5,zero,25e4 <_fclose_r+0xe8>
    2500:	defffc04 	addi	sp,sp,-16
    2504:	dc400115 	stw	r17,4(sp)
    2508:	dc000015 	stw	r16,0(sp)
    250c:	dfc00315 	stw	ra,12(sp)
    2510:	dc800215 	stw	r18,8(sp)
    2514:	2023883a 	mov	r17,r4
    2518:	2821883a 	mov	r16,r5
    251c:	20000226 	beq	r4,zero,2528 <_fclose_r+0x2c>
    2520:	20800e17 	ldw	r2,56(r4)
    2524:	10002726 	beq	r2,zero,25c4 <_fclose_r+0xc8>
    2528:	8080030f 	ldh	r2,12(r16)
    252c:	1000071e 	bne	r2,zero,254c <_fclose_r+0x50>
    2530:	0005883a 	mov	r2,zero
    2534:	dfc00317 	ldw	ra,12(sp)
    2538:	dc800217 	ldw	r18,8(sp)
    253c:	dc400117 	ldw	r17,4(sp)
    2540:	dc000017 	ldw	r16,0(sp)
    2544:	dec00404 	addi	sp,sp,16
    2548:	f800283a 	ret
    254c:	800b883a 	mov	r5,r16
    2550:	8809883a 	mov	r4,r17
    2554:	00026000 	call	2600 <__sflush_r>
    2558:	1025883a 	mov	r18,r2
    255c:	80800b17 	ldw	r2,44(r16)
    2560:	10000426 	beq	r2,zero,2574 <_fclose_r+0x78>
    2564:	81400717 	ldw	r5,28(r16)
    2568:	8809883a 	mov	r4,r17
    256c:	103ee83a 	callr	r2
    2570:	10001616 	blt	r2,zero,25cc <_fclose_r+0xd0>
    2574:	8080030b 	ldhu	r2,12(r16)
    2578:	1080200c 	andi	r2,r2,128
    257c:	1000151e 	bne	r2,zero,25d4 <_fclose_r+0xd8>
    2580:	81400c17 	ldw	r5,48(r16)
    2584:	28000526 	beq	r5,zero,259c <_fclose_r+0xa0>
    2588:	80801004 	addi	r2,r16,64
    258c:	28800226 	beq	r5,r2,2598 <_fclose_r+0x9c>
    2590:	8809883a 	mov	r4,r17
    2594:	00029cc0 	call	29cc <_free_r>
    2598:	80000c15 	stw	zero,48(r16)
    259c:	81401117 	ldw	r5,68(r16)
    25a0:	28000326 	beq	r5,zero,25b0 <_fclose_r+0xb4>
    25a4:	8809883a 	mov	r4,r17
    25a8:	00029cc0 	call	29cc <_free_r>
    25ac:	80001115 	stw	zero,68(r16)
    25b0:	00008c00 	call	8c0 <__sfp_lock_acquire>
    25b4:	8000030d 	sth	zero,12(r16)
    25b8:	00008c40 	call	8c4 <__sfp_lock_release>
    25bc:	9005883a 	mov	r2,r18
    25c0:	003fdc06 	br	2534 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002534>
    25c4:	00008b00 	call	8b0 <__sinit>
    25c8:	003fd706 	br	2528 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002528>
    25cc:	04bfffc4 	movi	r18,-1
    25d0:	003fe806 	br	2574 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002574>
    25d4:	81400417 	ldw	r5,16(r16)
    25d8:	8809883a 	mov	r4,r17
    25dc:	00029cc0 	call	29cc <_free_r>
    25e0:	003fe706 	br	2580 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002580>
    25e4:	0005883a 	mov	r2,zero
    25e8:	f800283a 	ret

000025ec <fclose>:
    25ec:	00800074 	movhi	r2,1
    25f0:	10a1c604 	addi	r2,r2,-30952
    25f4:	200b883a 	mov	r5,r4
    25f8:	11000017 	ldw	r4,0(r2)
    25fc:	00024fc1 	jmpi	24fc <_fclose_r>

00002600 <__sflush_r>:
    2600:	2880030b 	ldhu	r2,12(r5)
    2604:	defffb04 	addi	sp,sp,-20
    2608:	dcc00315 	stw	r19,12(sp)
    260c:	dc400115 	stw	r17,4(sp)
    2610:	dfc00415 	stw	ra,16(sp)
    2614:	dc800215 	stw	r18,8(sp)
    2618:	dc000015 	stw	r16,0(sp)
    261c:	10c0020c 	andi	r3,r2,8
    2620:	2823883a 	mov	r17,r5
    2624:	2027883a 	mov	r19,r4
    2628:	1800311e 	bne	r3,zero,26f0 <__sflush_r+0xf0>
    262c:	28c00117 	ldw	r3,4(r5)
    2630:	10820014 	ori	r2,r2,2048
    2634:	2880030d 	sth	r2,12(r5)
    2638:	00c04b0e 	bge	zero,r3,2768 <__sflush_r+0x168>
    263c:	8a000a17 	ldw	r8,40(r17)
    2640:	40002326 	beq	r8,zero,26d0 <__sflush_r+0xd0>
    2644:	9c000017 	ldw	r16,0(r19)
    2648:	10c4000c 	andi	r3,r2,4096
    264c:	98000015 	stw	zero,0(r19)
    2650:	18004826 	beq	r3,zero,2774 <__sflush_r+0x174>
    2654:	89801417 	ldw	r6,80(r17)
    2658:	10c0010c 	andi	r3,r2,4
    265c:	18000626 	beq	r3,zero,2678 <__sflush_r+0x78>
    2660:	88c00117 	ldw	r3,4(r17)
    2664:	88800c17 	ldw	r2,48(r17)
    2668:	30cdc83a 	sub	r6,r6,r3
    266c:	10000226 	beq	r2,zero,2678 <__sflush_r+0x78>
    2670:	88800f17 	ldw	r2,60(r17)
    2674:	308dc83a 	sub	r6,r6,r2
    2678:	89400717 	ldw	r5,28(r17)
    267c:	000f883a 	mov	r7,zero
    2680:	9809883a 	mov	r4,r19
    2684:	403ee83a 	callr	r8
    2688:	00ffffc4 	movi	r3,-1
    268c:	10c04426 	beq	r2,r3,27a0 <__sflush_r+0x1a0>
    2690:	88c0030b 	ldhu	r3,12(r17)
    2694:	89000417 	ldw	r4,16(r17)
    2698:	88000115 	stw	zero,4(r17)
    269c:	197dffcc 	andi	r5,r3,63487
    26a0:	8940030d 	sth	r5,12(r17)
    26a4:	89000015 	stw	r4,0(r17)
    26a8:	18c4000c 	andi	r3,r3,4096
    26ac:	18002c1e 	bne	r3,zero,2760 <__sflush_r+0x160>
    26b0:	89400c17 	ldw	r5,48(r17)
    26b4:	9c000015 	stw	r16,0(r19)
    26b8:	28000526 	beq	r5,zero,26d0 <__sflush_r+0xd0>
    26bc:	88801004 	addi	r2,r17,64
    26c0:	28800226 	beq	r5,r2,26cc <__sflush_r+0xcc>
    26c4:	9809883a 	mov	r4,r19
    26c8:	00029cc0 	call	29cc <_free_r>
    26cc:	88000c15 	stw	zero,48(r17)
    26d0:	0005883a 	mov	r2,zero
    26d4:	dfc00417 	ldw	ra,16(sp)
    26d8:	dcc00317 	ldw	r19,12(sp)
    26dc:	dc800217 	ldw	r18,8(sp)
    26e0:	dc400117 	ldw	r17,4(sp)
    26e4:	dc000017 	ldw	r16,0(sp)
    26e8:	dec00504 	addi	sp,sp,20
    26ec:	f800283a 	ret
    26f0:	2c800417 	ldw	r18,16(r5)
    26f4:	903ff626 	beq	r18,zero,26d0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00026d0>
    26f8:	2c000017 	ldw	r16,0(r5)
    26fc:	108000cc 	andi	r2,r2,3
    2700:	2c800015 	stw	r18,0(r5)
    2704:	84a1c83a 	sub	r16,r16,r18
    2708:	1000131e 	bne	r2,zero,2758 <__sflush_r+0x158>
    270c:	28800517 	ldw	r2,20(r5)
    2710:	88800215 	stw	r2,8(r17)
    2714:	04000316 	blt	zero,r16,2724 <__sflush_r+0x124>
    2718:	003fed06 	br	26d0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00026d0>
    271c:	90a5883a 	add	r18,r18,r2
    2720:	043feb0e 	bge	zero,r16,26d0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00026d0>
    2724:	88800917 	ldw	r2,36(r17)
    2728:	89400717 	ldw	r5,28(r17)
    272c:	800f883a 	mov	r7,r16
    2730:	900d883a 	mov	r6,r18
    2734:	9809883a 	mov	r4,r19
    2738:	103ee83a 	callr	r2
    273c:	80a1c83a 	sub	r16,r16,r2
    2740:	00bff616 	blt	zero,r2,271c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000271c>
    2744:	88c0030b 	ldhu	r3,12(r17)
    2748:	00bfffc4 	movi	r2,-1
    274c:	18c01014 	ori	r3,r3,64
    2750:	88c0030d 	sth	r3,12(r17)
    2754:	003fdf06 	br	26d4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00026d4>
    2758:	0005883a 	mov	r2,zero
    275c:	003fec06 	br	2710 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002710>
    2760:	88801415 	stw	r2,80(r17)
    2764:	003fd206 	br	26b0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00026b0>
    2768:	28c00f17 	ldw	r3,60(r5)
    276c:	00ffb316 	blt	zero,r3,263c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000263c>
    2770:	003fd706 	br	26d0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00026d0>
    2774:	89400717 	ldw	r5,28(r17)
    2778:	000d883a 	mov	r6,zero
    277c:	01c00044 	movi	r7,1
    2780:	9809883a 	mov	r4,r19
    2784:	403ee83a 	callr	r8
    2788:	100d883a 	mov	r6,r2
    278c:	00bfffc4 	movi	r2,-1
    2790:	30801426 	beq	r6,r2,27e4 <__sflush_r+0x1e4>
    2794:	8880030b 	ldhu	r2,12(r17)
    2798:	8a000a17 	ldw	r8,40(r17)
    279c:	003fae06 	br	2658 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002658>
    27a0:	98c00017 	ldw	r3,0(r19)
    27a4:	183fba26 	beq	r3,zero,2690 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002690>
    27a8:	01000744 	movi	r4,29
    27ac:	19000626 	beq	r3,r4,27c8 <__sflush_r+0x1c8>
    27b0:	01000584 	movi	r4,22
    27b4:	19000426 	beq	r3,r4,27c8 <__sflush_r+0x1c8>
    27b8:	88c0030b 	ldhu	r3,12(r17)
    27bc:	18c01014 	ori	r3,r3,64
    27c0:	88c0030d 	sth	r3,12(r17)
    27c4:	003fc306 	br	26d4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00026d4>
    27c8:	8880030b 	ldhu	r2,12(r17)
    27cc:	88c00417 	ldw	r3,16(r17)
    27d0:	88000115 	stw	zero,4(r17)
    27d4:	10bdffcc 	andi	r2,r2,63487
    27d8:	8880030d 	sth	r2,12(r17)
    27dc:	88c00015 	stw	r3,0(r17)
    27e0:	003fb306 	br	26b0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00026b0>
    27e4:	98800017 	ldw	r2,0(r19)
    27e8:	103fea26 	beq	r2,zero,2794 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002794>
    27ec:	00c00744 	movi	r3,29
    27f0:	10c00226 	beq	r2,r3,27fc <__sflush_r+0x1fc>
    27f4:	00c00584 	movi	r3,22
    27f8:	10c0031e 	bne	r2,r3,2808 <__sflush_r+0x208>
    27fc:	9c000015 	stw	r16,0(r19)
    2800:	0005883a 	mov	r2,zero
    2804:	003fb306 	br	26d4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00026d4>
    2808:	88c0030b 	ldhu	r3,12(r17)
    280c:	3005883a 	mov	r2,r6
    2810:	18c01014 	ori	r3,r3,64
    2814:	88c0030d 	sth	r3,12(r17)
    2818:	003fae06 	br	26d4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00026d4>

0000281c <_fflush_r>:
    281c:	defffd04 	addi	sp,sp,-12
    2820:	dc000115 	stw	r16,4(sp)
    2824:	dfc00215 	stw	ra,8(sp)
    2828:	2021883a 	mov	r16,r4
    282c:	20000226 	beq	r4,zero,2838 <_fflush_r+0x1c>
    2830:	20800e17 	ldw	r2,56(r4)
    2834:	10000c26 	beq	r2,zero,2868 <_fflush_r+0x4c>
    2838:	2880030f 	ldh	r2,12(r5)
    283c:	1000051e 	bne	r2,zero,2854 <_fflush_r+0x38>
    2840:	0005883a 	mov	r2,zero
    2844:	dfc00217 	ldw	ra,8(sp)
    2848:	dc000117 	ldw	r16,4(sp)
    284c:	dec00304 	addi	sp,sp,12
    2850:	f800283a 	ret
    2854:	8009883a 	mov	r4,r16
    2858:	dfc00217 	ldw	ra,8(sp)
    285c:	dc000117 	ldw	r16,4(sp)
    2860:	dec00304 	addi	sp,sp,12
    2864:	00026001 	jmpi	2600 <__sflush_r>
    2868:	d9400015 	stw	r5,0(sp)
    286c:	00008b00 	call	8b0 <__sinit>
    2870:	d9400017 	ldw	r5,0(sp)
    2874:	003ff006 	br	2838 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002838>

00002878 <fflush>:
    2878:	20000526 	beq	r4,zero,2890 <fflush+0x18>
    287c:	00800074 	movhi	r2,1
    2880:	10a1c604 	addi	r2,r2,-30952
    2884:	200b883a 	mov	r5,r4
    2888:	11000017 	ldw	r4,0(r2)
    288c:	000281c1 	jmpi	281c <_fflush_r>
    2890:	00800074 	movhi	r2,1
    2894:	10a1c504 	addi	r2,r2,-30956
    2898:	11000017 	ldw	r4,0(r2)
    289c:	01400034 	movhi	r5,0
    28a0:	294a0704 	addi	r5,r5,10268
    28a4:	0000e801 	jmpi	e80 <_fwalk_reent>

000028a8 <_malloc_trim_r>:
    28a8:	defffb04 	addi	sp,sp,-20
    28ac:	dcc00315 	stw	r19,12(sp)
    28b0:	04c00034 	movhi	r19,0
    28b4:	dc800215 	stw	r18,8(sp)
    28b8:	dc400115 	stw	r17,4(sp)
    28bc:	dc000015 	stw	r16,0(sp)
    28c0:	dfc00415 	stw	ra,16(sp)
    28c4:	2821883a 	mov	r16,r5
    28c8:	9cdbb204 	addi	r19,r19,28360
    28cc:	2025883a 	mov	r18,r4
    28d0:	00037380 	call	3738 <__malloc_lock>
    28d4:	98800217 	ldw	r2,8(r19)
    28d8:	14400117 	ldw	r17,4(r2)
    28dc:	00bfff04 	movi	r2,-4
    28e0:	88a2703a 	and	r17,r17,r2
    28e4:	8c21c83a 	sub	r16,r17,r16
    28e8:	8403fbc4 	addi	r16,r16,4079
    28ec:	8020d33a 	srli	r16,r16,12
    28f0:	0083ffc4 	movi	r2,4095
    28f4:	843fffc4 	addi	r16,r16,-1
    28f8:	8020933a 	slli	r16,r16,12
    28fc:	1400060e 	bge	r2,r16,2918 <_malloc_trim_r+0x70>
    2900:	000b883a 	mov	r5,zero
    2904:	9009883a 	mov	r4,r18
    2908:	00021640 	call	2164 <_sbrk_r>
    290c:	98c00217 	ldw	r3,8(r19)
    2910:	1c47883a 	add	r3,r3,r17
    2914:	10c00a26 	beq	r2,r3,2940 <_malloc_trim_r+0x98>
    2918:	9009883a 	mov	r4,r18
    291c:	000375c0 	call	375c <__malloc_unlock>
    2920:	0005883a 	mov	r2,zero
    2924:	dfc00417 	ldw	ra,16(sp)
    2928:	dcc00317 	ldw	r19,12(sp)
    292c:	dc800217 	ldw	r18,8(sp)
    2930:	dc400117 	ldw	r17,4(sp)
    2934:	dc000017 	ldw	r16,0(sp)
    2938:	dec00504 	addi	sp,sp,20
    293c:	f800283a 	ret
    2940:	040bc83a 	sub	r5,zero,r16
    2944:	9009883a 	mov	r4,r18
    2948:	00021640 	call	2164 <_sbrk_r>
    294c:	00ffffc4 	movi	r3,-1
    2950:	10c00d26 	beq	r2,r3,2988 <_malloc_trim_r+0xe0>
    2954:	00c00074 	movhi	r3,1
    2958:	18e90a04 	addi	r3,r3,-23512
    295c:	18800017 	ldw	r2,0(r3)
    2960:	99000217 	ldw	r4,8(r19)
    2964:	8c23c83a 	sub	r17,r17,r16
    2968:	8c400054 	ori	r17,r17,1
    296c:	1421c83a 	sub	r16,r2,r16
    2970:	24400115 	stw	r17,4(r4)
    2974:	9009883a 	mov	r4,r18
    2978:	1c000015 	stw	r16,0(r3)
    297c:	000375c0 	call	375c <__malloc_unlock>
    2980:	00800044 	movi	r2,1
    2984:	003fe706 	br	2924 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002924>
    2988:	000b883a 	mov	r5,zero
    298c:	9009883a 	mov	r4,r18
    2990:	00021640 	call	2164 <_sbrk_r>
    2994:	99000217 	ldw	r4,8(r19)
    2998:	014003c4 	movi	r5,15
    299c:	1107c83a 	sub	r3,r2,r4
    29a0:	28ffdd0e 	bge	r5,r3,2918 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002918>
    29a4:	01400074 	movhi	r5,1
    29a8:	2961c704 	addi	r5,r5,-30948
    29ac:	29400017 	ldw	r5,0(r5)
    29b0:	18c00054 	ori	r3,r3,1
    29b4:	20c00115 	stw	r3,4(r4)
    29b8:	00c00074 	movhi	r3,1
    29bc:	1145c83a 	sub	r2,r2,r5
    29c0:	18e90a04 	addi	r3,r3,-23512
    29c4:	18800015 	stw	r2,0(r3)
    29c8:	003fd306 	br	2918 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002918>

000029cc <_free_r>:
    29cc:	28004126 	beq	r5,zero,2ad4 <_free_r+0x108>
    29d0:	defffd04 	addi	sp,sp,-12
    29d4:	dc400115 	stw	r17,4(sp)
    29d8:	dc000015 	stw	r16,0(sp)
    29dc:	2023883a 	mov	r17,r4
    29e0:	2821883a 	mov	r16,r5
    29e4:	dfc00215 	stw	ra,8(sp)
    29e8:	00037380 	call	3738 <__malloc_lock>
    29ec:	81ffff17 	ldw	r7,-4(r16)
    29f0:	00bfff84 	movi	r2,-2
    29f4:	01000034 	movhi	r4,0
    29f8:	81bffe04 	addi	r6,r16,-8
    29fc:	3884703a 	and	r2,r7,r2
    2a00:	211bb204 	addi	r4,r4,28360
    2a04:	308b883a 	add	r5,r6,r2
    2a08:	2a400117 	ldw	r9,4(r5)
    2a0c:	22000217 	ldw	r8,8(r4)
    2a10:	00ffff04 	movi	r3,-4
    2a14:	48c6703a 	and	r3,r9,r3
    2a18:	2a005726 	beq	r5,r8,2b78 <_free_r+0x1ac>
    2a1c:	28c00115 	stw	r3,4(r5)
    2a20:	39c0004c 	andi	r7,r7,1
    2a24:	3800091e 	bne	r7,zero,2a4c <_free_r+0x80>
    2a28:	823ffe17 	ldw	r8,-8(r16)
    2a2c:	22400204 	addi	r9,r4,8
    2a30:	320dc83a 	sub	r6,r6,r8
    2a34:	31c00217 	ldw	r7,8(r6)
    2a38:	1205883a 	add	r2,r2,r8
    2a3c:	3a406526 	beq	r7,r9,2bd4 <_free_r+0x208>
    2a40:	32000317 	ldw	r8,12(r6)
    2a44:	3a000315 	stw	r8,12(r7)
    2a48:	41c00215 	stw	r7,8(r8)
    2a4c:	28cf883a 	add	r7,r5,r3
    2a50:	39c00117 	ldw	r7,4(r7)
    2a54:	39c0004c 	andi	r7,r7,1
    2a58:	38003a26 	beq	r7,zero,2b44 <_free_r+0x178>
    2a5c:	10c00054 	ori	r3,r2,1
    2a60:	30c00115 	stw	r3,4(r6)
    2a64:	3087883a 	add	r3,r6,r2
    2a68:	18800015 	stw	r2,0(r3)
    2a6c:	00c07fc4 	movi	r3,511
    2a70:	18801936 	bltu	r3,r2,2ad8 <_free_r+0x10c>
    2a74:	1004d0fa 	srli	r2,r2,3
    2a78:	01c00044 	movi	r7,1
    2a7c:	21400117 	ldw	r5,4(r4)
    2a80:	10c00044 	addi	r3,r2,1
    2a84:	18c7883a 	add	r3,r3,r3
    2a88:	1005d0ba 	srai	r2,r2,2
    2a8c:	18c7883a 	add	r3,r3,r3
    2a90:	18c7883a 	add	r3,r3,r3
    2a94:	1907883a 	add	r3,r3,r4
    2a98:	3884983a 	sll	r2,r7,r2
    2a9c:	19c00017 	ldw	r7,0(r3)
    2aa0:	1a3ffe04 	addi	r8,r3,-8
    2aa4:	1144b03a 	or	r2,r2,r5
    2aa8:	32000315 	stw	r8,12(r6)
    2aac:	31c00215 	stw	r7,8(r6)
    2ab0:	20800115 	stw	r2,4(r4)
    2ab4:	19800015 	stw	r6,0(r3)
    2ab8:	39800315 	stw	r6,12(r7)
    2abc:	8809883a 	mov	r4,r17
    2ac0:	dfc00217 	ldw	ra,8(sp)
    2ac4:	dc400117 	ldw	r17,4(sp)
    2ac8:	dc000017 	ldw	r16,0(sp)
    2acc:	dec00304 	addi	sp,sp,12
    2ad0:	000375c1 	jmpi	375c <__malloc_unlock>
    2ad4:	f800283a 	ret
    2ad8:	100ad27a 	srli	r5,r2,9
    2adc:	00c00104 	movi	r3,4
    2ae0:	19404a36 	bltu	r3,r5,2c0c <_free_r+0x240>
    2ae4:	100ad1ba 	srli	r5,r2,6
    2ae8:	28c00e44 	addi	r3,r5,57
    2aec:	18c7883a 	add	r3,r3,r3
    2af0:	29400e04 	addi	r5,r5,56
    2af4:	18c7883a 	add	r3,r3,r3
    2af8:	18c7883a 	add	r3,r3,r3
    2afc:	1909883a 	add	r4,r3,r4
    2b00:	20c00017 	ldw	r3,0(r4)
    2b04:	01c00034 	movhi	r7,0
    2b08:	213ffe04 	addi	r4,r4,-8
    2b0c:	39dbb204 	addi	r7,r7,28360
    2b10:	20c04426 	beq	r4,r3,2c24 <_free_r+0x258>
    2b14:	01ffff04 	movi	r7,-4
    2b18:	19400117 	ldw	r5,4(r3)
    2b1c:	29ca703a 	and	r5,r5,r7
    2b20:	1140022e 	bgeu	r2,r5,2b2c <_free_r+0x160>
    2b24:	18c00217 	ldw	r3,8(r3)
    2b28:	20fffb1e 	bne	r4,r3,2b18 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002b18>
    2b2c:	19000317 	ldw	r4,12(r3)
    2b30:	31000315 	stw	r4,12(r6)
    2b34:	30c00215 	stw	r3,8(r6)
    2b38:	21800215 	stw	r6,8(r4)
    2b3c:	19800315 	stw	r6,12(r3)
    2b40:	003fde06 	br	2abc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002abc>
    2b44:	29c00217 	ldw	r7,8(r5)
    2b48:	10c5883a 	add	r2,r2,r3
    2b4c:	00c00034 	movhi	r3,0
    2b50:	18dbb404 	addi	r3,r3,28368
    2b54:	38c03b26 	beq	r7,r3,2c44 <_free_r+0x278>
    2b58:	2a000317 	ldw	r8,12(r5)
    2b5c:	11400054 	ori	r5,r2,1
    2b60:	3087883a 	add	r3,r6,r2
    2b64:	3a000315 	stw	r8,12(r7)
    2b68:	41c00215 	stw	r7,8(r8)
    2b6c:	31400115 	stw	r5,4(r6)
    2b70:	18800015 	stw	r2,0(r3)
    2b74:	003fbd06 	br	2a6c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002a6c>
    2b78:	39c0004c 	andi	r7,r7,1
    2b7c:	10c5883a 	add	r2,r2,r3
    2b80:	3800071e 	bne	r7,zero,2ba0 <_free_r+0x1d4>
    2b84:	81fffe17 	ldw	r7,-8(r16)
    2b88:	31cdc83a 	sub	r6,r6,r7
    2b8c:	30c00317 	ldw	r3,12(r6)
    2b90:	31400217 	ldw	r5,8(r6)
    2b94:	11c5883a 	add	r2,r2,r7
    2b98:	28c00315 	stw	r3,12(r5)
    2b9c:	19400215 	stw	r5,8(r3)
    2ba0:	10c00054 	ori	r3,r2,1
    2ba4:	30c00115 	stw	r3,4(r6)
    2ba8:	00c00074 	movhi	r3,1
    2bac:	18e1c804 	addi	r3,r3,-30944
    2bb0:	18c00017 	ldw	r3,0(r3)
    2bb4:	21800215 	stw	r6,8(r4)
    2bb8:	10ffc036 	bltu	r2,r3,2abc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002abc>
    2bbc:	00800074 	movhi	r2,1
    2bc0:	10a90104 	addi	r2,r2,-23548
    2bc4:	11400017 	ldw	r5,0(r2)
    2bc8:	8809883a 	mov	r4,r17
    2bcc:	00028a80 	call	28a8 <_malloc_trim_r>
    2bd0:	003fba06 	br	2abc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002abc>
    2bd4:	28c9883a 	add	r4,r5,r3
    2bd8:	21000117 	ldw	r4,4(r4)
    2bdc:	2100004c 	andi	r4,r4,1
    2be0:	2000391e 	bne	r4,zero,2cc8 <_free_r+0x2fc>
    2be4:	29c00217 	ldw	r7,8(r5)
    2be8:	29000317 	ldw	r4,12(r5)
    2bec:	1885883a 	add	r2,r3,r2
    2bf0:	10c00054 	ori	r3,r2,1
    2bf4:	39000315 	stw	r4,12(r7)
    2bf8:	21c00215 	stw	r7,8(r4)
    2bfc:	30c00115 	stw	r3,4(r6)
    2c00:	308d883a 	add	r6,r6,r2
    2c04:	30800015 	stw	r2,0(r6)
    2c08:	003fac06 	br	2abc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002abc>
    2c0c:	00c00504 	movi	r3,20
    2c10:	19401536 	bltu	r3,r5,2c68 <_free_r+0x29c>
    2c14:	28c01704 	addi	r3,r5,92
    2c18:	18c7883a 	add	r3,r3,r3
    2c1c:	294016c4 	addi	r5,r5,91
    2c20:	003fb406 	br	2af4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002af4>
    2c24:	280bd0ba 	srai	r5,r5,2
    2c28:	00c00044 	movi	r3,1
    2c2c:	38800117 	ldw	r2,4(r7)
    2c30:	194a983a 	sll	r5,r3,r5
    2c34:	2007883a 	mov	r3,r4
    2c38:	2884b03a 	or	r2,r5,r2
    2c3c:	38800115 	stw	r2,4(r7)
    2c40:	003fbb06 	br	2b30 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002b30>
    2c44:	21800515 	stw	r6,20(r4)
    2c48:	21800415 	stw	r6,16(r4)
    2c4c:	10c00054 	ori	r3,r2,1
    2c50:	31c00315 	stw	r7,12(r6)
    2c54:	31c00215 	stw	r7,8(r6)
    2c58:	30c00115 	stw	r3,4(r6)
    2c5c:	308d883a 	add	r6,r6,r2
    2c60:	30800015 	stw	r2,0(r6)
    2c64:	003f9506 	br	2abc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002abc>
    2c68:	00c01504 	movi	r3,84
    2c6c:	19400536 	bltu	r3,r5,2c84 <_free_r+0x2b8>
    2c70:	100ad33a 	srli	r5,r2,12
    2c74:	28c01bc4 	addi	r3,r5,111
    2c78:	18c7883a 	add	r3,r3,r3
    2c7c:	29401b84 	addi	r5,r5,110
    2c80:	003f9c06 	br	2af4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002af4>
    2c84:	00c05504 	movi	r3,340
    2c88:	19400536 	bltu	r3,r5,2ca0 <_free_r+0x2d4>
    2c8c:	100ad3fa 	srli	r5,r2,15
    2c90:	28c01e04 	addi	r3,r5,120
    2c94:	18c7883a 	add	r3,r3,r3
    2c98:	29401dc4 	addi	r5,r5,119
    2c9c:	003f9506 	br	2af4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002af4>
    2ca0:	00c15504 	movi	r3,1364
    2ca4:	19400536 	bltu	r3,r5,2cbc <_free_r+0x2f0>
    2ca8:	100ad4ba 	srli	r5,r2,18
    2cac:	28c01f44 	addi	r3,r5,125
    2cb0:	18c7883a 	add	r3,r3,r3
    2cb4:	29401f04 	addi	r5,r5,124
    2cb8:	003f8e06 	br	2af4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002af4>
    2cbc:	00c03f84 	movi	r3,254
    2cc0:	01401f84 	movi	r5,126
    2cc4:	003f8b06 	br	2af4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002af4>
    2cc8:	10c00054 	ori	r3,r2,1
    2ccc:	30c00115 	stw	r3,4(r6)
    2cd0:	308d883a 	add	r6,r6,r2
    2cd4:	30800015 	stw	r2,0(r6)
    2cd8:	003f7806 	br	2abc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002abc>

00002cdc <_lseek_r>:
    2cdc:	defffd04 	addi	sp,sp,-12
    2ce0:	2805883a 	mov	r2,r5
    2ce4:	dc000015 	stw	r16,0(sp)
    2ce8:	04000074 	movhi	r16,1
    2cec:	dc400115 	stw	r17,4(sp)
    2cf0:	300b883a 	mov	r5,r6
    2cf4:	84290204 	addi	r16,r16,-23544
    2cf8:	2023883a 	mov	r17,r4
    2cfc:	380d883a 	mov	r6,r7
    2d00:	1009883a 	mov	r4,r2
    2d04:	dfc00215 	stw	ra,8(sp)
    2d08:	80000015 	stw	zero,0(r16)
    2d0c:	00035e80 	call	35e8 <lseek>
    2d10:	00ffffc4 	movi	r3,-1
    2d14:	10c00526 	beq	r2,r3,2d2c <_lseek_r+0x50>
    2d18:	dfc00217 	ldw	ra,8(sp)
    2d1c:	dc400117 	ldw	r17,4(sp)
    2d20:	dc000017 	ldw	r16,0(sp)
    2d24:	dec00304 	addi	sp,sp,12
    2d28:	f800283a 	ret
    2d2c:	80c00017 	ldw	r3,0(r16)
    2d30:	183ff926 	beq	r3,zero,2d18 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002d18>
    2d34:	88c00015 	stw	r3,0(r17)
    2d38:	003ff706 	br	2d18 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002d18>

00002d3c <__smakebuf_r>:
    2d3c:	2880030b 	ldhu	r2,12(r5)
    2d40:	10c0008c 	andi	r3,r2,2
    2d44:	1800411e 	bne	r3,zero,2e4c <__smakebuf_r+0x110>
    2d48:	deffec04 	addi	sp,sp,-80
    2d4c:	dc000f15 	stw	r16,60(sp)
    2d50:	2821883a 	mov	r16,r5
    2d54:	2940038f 	ldh	r5,14(r5)
    2d58:	dc401015 	stw	r17,64(sp)
    2d5c:	dfc01315 	stw	ra,76(sp)
    2d60:	dcc01215 	stw	r19,72(sp)
    2d64:	dc801115 	stw	r18,68(sp)
    2d68:	2023883a 	mov	r17,r4
    2d6c:	28001c16 	blt	r5,zero,2de0 <__smakebuf_r+0xa4>
    2d70:	d80d883a 	mov	r6,sp
    2d74:	0002f580 	call	2f58 <_fstat_r>
    2d78:	10001816 	blt	r2,zero,2ddc <__smakebuf_r+0xa0>
    2d7c:	d8800117 	ldw	r2,4(sp)
    2d80:	00e00014 	movui	r3,32768
    2d84:	10bc000c 	andi	r2,r2,61440
    2d88:	14c80020 	cmpeqi	r19,r2,8192
    2d8c:	10c03726 	beq	r2,r3,2e6c <__smakebuf_r+0x130>
    2d90:	80c0030b 	ldhu	r3,12(r16)
    2d94:	18c20014 	ori	r3,r3,2048
    2d98:	80c0030d 	sth	r3,12(r16)
    2d9c:	00c80004 	movi	r3,8192
    2da0:	10c0521e 	bne	r2,r3,2eec <__smakebuf_r+0x1b0>
    2da4:	8140038f 	ldh	r5,14(r16)
    2da8:	8809883a 	mov	r4,r17
    2dac:	0002fb40 	call	2fb4 <_isatty_r>
    2db0:	10004c26 	beq	r2,zero,2ee4 <__smakebuf_r+0x1a8>
    2db4:	8080030b 	ldhu	r2,12(r16)
    2db8:	80c010c4 	addi	r3,r16,67
    2dbc:	80c00015 	stw	r3,0(r16)
    2dc0:	10800054 	ori	r2,r2,1
    2dc4:	8080030d 	sth	r2,12(r16)
    2dc8:	00800044 	movi	r2,1
    2dcc:	80c00415 	stw	r3,16(r16)
    2dd0:	80800515 	stw	r2,20(r16)
    2dd4:	04810004 	movi	r18,1024
    2dd8:	00000706 	br	2df8 <__smakebuf_r+0xbc>
    2ddc:	8080030b 	ldhu	r2,12(r16)
    2de0:	10c0200c 	andi	r3,r2,128
    2de4:	18001f1e 	bne	r3,zero,2e64 <__smakebuf_r+0x128>
    2de8:	04810004 	movi	r18,1024
    2dec:	10820014 	ori	r2,r2,2048
    2df0:	8080030d 	sth	r2,12(r16)
    2df4:	0027883a 	mov	r19,zero
    2df8:	900b883a 	mov	r5,r18
    2dfc:	8809883a 	mov	r4,r17
    2e00:	0000f440 	call	f44 <_malloc_r>
    2e04:	10002c26 	beq	r2,zero,2eb8 <__smakebuf_r+0x17c>
    2e08:	80c0030b 	ldhu	r3,12(r16)
    2e0c:	01000034 	movhi	r4,0
    2e10:	21015a04 	addi	r4,r4,1384
    2e14:	89000f15 	stw	r4,60(r17)
    2e18:	18c02014 	ori	r3,r3,128
    2e1c:	80c0030d 	sth	r3,12(r16)
    2e20:	80800015 	stw	r2,0(r16)
    2e24:	80800415 	stw	r2,16(r16)
    2e28:	84800515 	stw	r18,20(r16)
    2e2c:	98001a1e 	bne	r19,zero,2e98 <__smakebuf_r+0x15c>
    2e30:	dfc01317 	ldw	ra,76(sp)
    2e34:	dcc01217 	ldw	r19,72(sp)
    2e38:	dc801117 	ldw	r18,68(sp)
    2e3c:	dc401017 	ldw	r17,64(sp)
    2e40:	dc000f17 	ldw	r16,60(sp)
    2e44:	dec01404 	addi	sp,sp,80
    2e48:	f800283a 	ret
    2e4c:	288010c4 	addi	r2,r5,67
    2e50:	28800015 	stw	r2,0(r5)
    2e54:	28800415 	stw	r2,16(r5)
    2e58:	00800044 	movi	r2,1
    2e5c:	28800515 	stw	r2,20(r5)
    2e60:	f800283a 	ret
    2e64:	04801004 	movi	r18,64
    2e68:	003fe006 	br	2dec <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002dec>
    2e6c:	81000a17 	ldw	r4,40(r16)
    2e70:	00c00034 	movhi	r3,0
    2e74:	18c8a404 	addi	r3,r3,8848
    2e78:	20ffc51e 	bne	r4,r3,2d90 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002d90>
    2e7c:	8080030b 	ldhu	r2,12(r16)
    2e80:	04810004 	movi	r18,1024
    2e84:	84801315 	stw	r18,76(r16)
    2e88:	1484b03a 	or	r2,r2,r18
    2e8c:	8080030d 	sth	r2,12(r16)
    2e90:	0027883a 	mov	r19,zero
    2e94:	003fd806 	br	2df8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002df8>
    2e98:	8140038f 	ldh	r5,14(r16)
    2e9c:	8809883a 	mov	r4,r17
    2ea0:	0002fb40 	call	2fb4 <_isatty_r>
    2ea4:	103fe226 	beq	r2,zero,2e30 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002e30>
    2ea8:	8080030b 	ldhu	r2,12(r16)
    2eac:	10800054 	ori	r2,r2,1
    2eb0:	8080030d 	sth	r2,12(r16)
    2eb4:	003fde06 	br	2e30 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002e30>
    2eb8:	8080030b 	ldhu	r2,12(r16)
    2ebc:	10c0800c 	andi	r3,r2,512
    2ec0:	183fdb1e 	bne	r3,zero,2e30 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002e30>
    2ec4:	10800094 	ori	r2,r2,2
    2ec8:	80c010c4 	addi	r3,r16,67
    2ecc:	8080030d 	sth	r2,12(r16)
    2ed0:	00800044 	movi	r2,1
    2ed4:	80c00015 	stw	r3,0(r16)
    2ed8:	80c00415 	stw	r3,16(r16)
    2edc:	80800515 	stw	r2,20(r16)
    2ee0:	003fd306 	br	2e30 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002e30>
    2ee4:	04810004 	movi	r18,1024
    2ee8:	003fc306 	br	2df8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002df8>
    2eec:	0027883a 	mov	r19,zero
    2ef0:	04810004 	movi	r18,1024
    2ef4:	003fc006 	br	2df8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002df8>

00002ef8 <_read_r>:
    2ef8:	defffd04 	addi	sp,sp,-12
    2efc:	2805883a 	mov	r2,r5
    2f00:	dc000015 	stw	r16,0(sp)
    2f04:	04000074 	movhi	r16,1
    2f08:	dc400115 	stw	r17,4(sp)
    2f0c:	300b883a 	mov	r5,r6
    2f10:	84290204 	addi	r16,r16,-23544
    2f14:	2023883a 	mov	r17,r4
    2f18:	380d883a 	mov	r6,r7
    2f1c:	1009883a 	mov	r4,r2
    2f20:	dfc00215 	stw	ra,8(sp)
    2f24:	80000015 	stw	zero,0(r16)
    2f28:	00037bc0 	call	37bc <read>
    2f2c:	00ffffc4 	movi	r3,-1
    2f30:	10c00526 	beq	r2,r3,2f48 <_read_r+0x50>
    2f34:	dfc00217 	ldw	ra,8(sp)
    2f38:	dc400117 	ldw	r17,4(sp)
    2f3c:	dc000017 	ldw	r16,0(sp)
    2f40:	dec00304 	addi	sp,sp,12
    2f44:	f800283a 	ret
    2f48:	80c00017 	ldw	r3,0(r16)
    2f4c:	183ff926 	beq	r3,zero,2f34 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002f34>
    2f50:	88c00015 	stw	r3,0(r17)
    2f54:	003ff706 	br	2f34 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002f34>

00002f58 <_fstat_r>:
    2f58:	defffd04 	addi	sp,sp,-12
    2f5c:	2805883a 	mov	r2,r5
    2f60:	dc000015 	stw	r16,0(sp)
    2f64:	04000074 	movhi	r16,1
    2f68:	dc400115 	stw	r17,4(sp)
    2f6c:	84290204 	addi	r16,r16,-23544
    2f70:	2023883a 	mov	r17,r4
    2f74:	300b883a 	mov	r5,r6
    2f78:	1009883a 	mov	r4,r2
    2f7c:	dfc00215 	stw	ra,8(sp)
    2f80:	80000015 	stw	zero,0(r16)
    2f84:	00033300 	call	3330 <fstat>
    2f88:	00ffffc4 	movi	r3,-1
    2f8c:	10c00526 	beq	r2,r3,2fa4 <_fstat_r+0x4c>
    2f90:	dfc00217 	ldw	ra,8(sp)
    2f94:	dc400117 	ldw	r17,4(sp)
    2f98:	dc000017 	ldw	r16,0(sp)
    2f9c:	dec00304 	addi	sp,sp,12
    2fa0:	f800283a 	ret
    2fa4:	80c00017 	ldw	r3,0(r16)
    2fa8:	183ff926 	beq	r3,zero,2f90 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002f90>
    2fac:	88c00015 	stw	r3,0(r17)
    2fb0:	003ff706 	br	2f90 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002f90>

00002fb4 <_isatty_r>:
    2fb4:	defffd04 	addi	sp,sp,-12
    2fb8:	dc000015 	stw	r16,0(sp)
    2fbc:	04000074 	movhi	r16,1
    2fc0:	dc400115 	stw	r17,4(sp)
    2fc4:	84290204 	addi	r16,r16,-23544
    2fc8:	2023883a 	mov	r17,r4
    2fcc:	2809883a 	mov	r4,r5
    2fd0:	dfc00215 	stw	ra,8(sp)
    2fd4:	80000015 	stw	zero,0(r16)
    2fd8:	000341c0 	call	341c <isatty>
    2fdc:	00ffffc4 	movi	r3,-1
    2fe0:	10c00526 	beq	r2,r3,2ff8 <_isatty_r+0x44>
    2fe4:	dfc00217 	ldw	ra,8(sp)
    2fe8:	dc400117 	ldw	r17,4(sp)
    2fec:	dc000017 	ldw	r16,0(sp)
    2ff0:	dec00304 	addi	sp,sp,12
    2ff4:	f800283a 	ret
    2ff8:	80c00017 	ldw	r3,0(r16)
    2ffc:	183ff926 	beq	r3,zero,2fe4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002fe4>
    3000:	88c00015 	stw	r3,0(r17)
    3004:	003ff706 	br	2fe4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002fe4>

00003008 <__divsi3>:
    3008:	20001b16 	blt	r4,zero,3078 <__divsi3+0x70>
    300c:	000f883a 	mov	r7,zero
    3010:	28001616 	blt	r5,zero,306c <__divsi3+0x64>
    3014:	200d883a 	mov	r6,r4
    3018:	29001a2e 	bgeu	r5,r4,3084 <__divsi3+0x7c>
    301c:	00800804 	movi	r2,32
    3020:	00c00044 	movi	r3,1
    3024:	00000106 	br	302c <__divsi3+0x24>
    3028:	10000d26 	beq	r2,zero,3060 <__divsi3+0x58>
    302c:	294b883a 	add	r5,r5,r5
    3030:	10bfffc4 	addi	r2,r2,-1
    3034:	18c7883a 	add	r3,r3,r3
    3038:	293ffb36 	bltu	r5,r4,3028 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003028>
    303c:	0005883a 	mov	r2,zero
    3040:	18000726 	beq	r3,zero,3060 <__divsi3+0x58>
    3044:	0005883a 	mov	r2,zero
    3048:	31400236 	bltu	r6,r5,3054 <__divsi3+0x4c>
    304c:	314dc83a 	sub	r6,r6,r5
    3050:	10c4b03a 	or	r2,r2,r3
    3054:	1806d07a 	srli	r3,r3,1
    3058:	280ad07a 	srli	r5,r5,1
    305c:	183ffa1e 	bne	r3,zero,3048 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003048>
    3060:	38000126 	beq	r7,zero,3068 <__divsi3+0x60>
    3064:	0085c83a 	sub	r2,zero,r2
    3068:	f800283a 	ret
    306c:	014bc83a 	sub	r5,zero,r5
    3070:	39c0005c 	xori	r7,r7,1
    3074:	003fe706 	br	3014 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003014>
    3078:	0109c83a 	sub	r4,zero,r4
    307c:	01c00044 	movi	r7,1
    3080:	003fe306 	br	3010 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003010>
    3084:	00c00044 	movi	r3,1
    3088:	003fee06 	br	3044 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003044>

0000308c <__modsi3>:
    308c:	20001716 	blt	r4,zero,30ec <__modsi3+0x60>
    3090:	000f883a 	mov	r7,zero
    3094:	2005883a 	mov	r2,r4
    3098:	28001216 	blt	r5,zero,30e4 <__modsi3+0x58>
    309c:	2900162e 	bgeu	r5,r4,30f8 <__modsi3+0x6c>
    30a0:	01800804 	movi	r6,32
    30a4:	00c00044 	movi	r3,1
    30a8:	00000106 	br	30b0 <__modsi3+0x24>
    30ac:	30000a26 	beq	r6,zero,30d8 <__modsi3+0x4c>
    30b0:	294b883a 	add	r5,r5,r5
    30b4:	31bfffc4 	addi	r6,r6,-1
    30b8:	18c7883a 	add	r3,r3,r3
    30bc:	293ffb36 	bltu	r5,r4,30ac <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00030ac>
    30c0:	18000526 	beq	r3,zero,30d8 <__modsi3+0x4c>
    30c4:	1806d07a 	srli	r3,r3,1
    30c8:	11400136 	bltu	r2,r5,30d0 <__modsi3+0x44>
    30cc:	1145c83a 	sub	r2,r2,r5
    30d0:	280ad07a 	srli	r5,r5,1
    30d4:	183ffb1e 	bne	r3,zero,30c4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00030c4>
    30d8:	38000126 	beq	r7,zero,30e0 <__modsi3+0x54>
    30dc:	0085c83a 	sub	r2,zero,r2
    30e0:	f800283a 	ret
    30e4:	014bc83a 	sub	r5,zero,r5
    30e8:	003fec06 	br	309c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000309c>
    30ec:	0109c83a 	sub	r4,zero,r4
    30f0:	01c00044 	movi	r7,1
    30f4:	003fe706 	br	3094 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003094>
    30f8:	00c00044 	movi	r3,1
    30fc:	003ff106 	br	30c4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00030c4>

00003100 <__udivsi3>:
    3100:	200d883a 	mov	r6,r4
    3104:	2900152e 	bgeu	r5,r4,315c <__udivsi3+0x5c>
    3108:	28001416 	blt	r5,zero,315c <__udivsi3+0x5c>
    310c:	00800804 	movi	r2,32
    3110:	00c00044 	movi	r3,1
    3114:	00000206 	br	3120 <__udivsi3+0x20>
    3118:	10000e26 	beq	r2,zero,3154 <__udivsi3+0x54>
    311c:	28000516 	blt	r5,zero,3134 <__udivsi3+0x34>
    3120:	294b883a 	add	r5,r5,r5
    3124:	10bfffc4 	addi	r2,r2,-1
    3128:	18c7883a 	add	r3,r3,r3
    312c:	293ffa36 	bltu	r5,r4,3118 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003118>
    3130:	18000826 	beq	r3,zero,3154 <__udivsi3+0x54>
    3134:	0005883a 	mov	r2,zero
    3138:	31400236 	bltu	r6,r5,3144 <__udivsi3+0x44>
    313c:	314dc83a 	sub	r6,r6,r5
    3140:	10c4b03a 	or	r2,r2,r3
    3144:	1806d07a 	srli	r3,r3,1
    3148:	280ad07a 	srli	r5,r5,1
    314c:	183ffa1e 	bne	r3,zero,3138 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003138>
    3150:	f800283a 	ret
    3154:	0005883a 	mov	r2,zero
    3158:	f800283a 	ret
    315c:	00c00044 	movi	r3,1
    3160:	003ff406 	br	3134 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003134>

00003164 <__umodsi3>:
    3164:	2005883a 	mov	r2,r4
    3168:	2900122e 	bgeu	r5,r4,31b4 <__umodsi3+0x50>
    316c:	28001116 	blt	r5,zero,31b4 <__umodsi3+0x50>
    3170:	01800804 	movi	r6,32
    3174:	00c00044 	movi	r3,1
    3178:	00000206 	br	3184 <__umodsi3+0x20>
    317c:	30000c26 	beq	r6,zero,31b0 <__umodsi3+0x4c>
    3180:	28000516 	blt	r5,zero,3198 <__umodsi3+0x34>
    3184:	294b883a 	add	r5,r5,r5
    3188:	31bfffc4 	addi	r6,r6,-1
    318c:	18c7883a 	add	r3,r3,r3
    3190:	293ffa36 	bltu	r5,r4,317c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000317c>
    3194:	18000626 	beq	r3,zero,31b0 <__umodsi3+0x4c>
    3198:	1806d07a 	srli	r3,r3,1
    319c:	11400136 	bltu	r2,r5,31a4 <__umodsi3+0x40>
    31a0:	1145c83a 	sub	r2,r2,r5
    31a4:	280ad07a 	srli	r5,r5,1
    31a8:	183ffb1e 	bne	r3,zero,3198 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003198>
    31ac:	f800283a 	ret
    31b0:	f800283a 	ret
    31b4:	00c00044 	movi	r3,1
    31b8:	003ff706 	br	3198 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003198>

000031bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    31bc:	defffe04 	addi	sp,sp,-8
    31c0:	dfc00115 	stw	ra,4(sp)
    31c4:	df000015 	stw	fp,0(sp)
    31c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    31cc:	d0a00b17 	ldw	r2,-32724(gp)
    31d0:	10000326 	beq	r2,zero,31e0 <alt_get_errno+0x24>
    31d4:	d0a00b17 	ldw	r2,-32724(gp)
    31d8:	103ee83a 	callr	r2
    31dc:	00000106 	br	31e4 <alt_get_errno+0x28>
    31e0:	d0a73f04 	addi	r2,gp,-25348
}
    31e4:	e037883a 	mov	sp,fp
    31e8:	dfc00117 	ldw	ra,4(sp)
    31ec:	df000017 	ldw	fp,0(sp)
    31f0:	dec00204 	addi	sp,sp,8
    31f4:	f800283a 	ret

000031f8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    31f8:	defffb04 	addi	sp,sp,-20
    31fc:	dfc00415 	stw	ra,16(sp)
    3200:	df000315 	stw	fp,12(sp)
    3204:	df000304 	addi	fp,sp,12
    3208:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    320c:	e0bfff17 	ldw	r2,-4(fp)
    3210:	10000616 	blt	r2,zero,322c <close+0x34>
    3214:	e0bfff17 	ldw	r2,-4(fp)
    3218:	10c00324 	muli	r3,r2,12
    321c:	00800034 	movhi	r2,0
    3220:	109cbe04 	addi	r2,r2,29432
    3224:	1885883a 	add	r2,r3,r2
    3228:	00000106 	br	3230 <close+0x38>
    322c:	0005883a 	mov	r2,zero
    3230:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    3234:	e0bffd17 	ldw	r2,-12(fp)
    3238:	10001926 	beq	r2,zero,32a0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    323c:	e0bffd17 	ldw	r2,-12(fp)
    3240:	10800017 	ldw	r2,0(r2)
    3244:	10800417 	ldw	r2,16(r2)
    3248:	10000626 	beq	r2,zero,3264 <close+0x6c>
    324c:	e0bffd17 	ldw	r2,-12(fp)
    3250:	10800017 	ldw	r2,0(r2)
    3254:	10800417 	ldw	r2,16(r2)
    3258:	e13ffd17 	ldw	r4,-12(fp)
    325c:	103ee83a 	callr	r2
    3260:	00000106 	br	3268 <close+0x70>
    3264:	0005883a 	mov	r2,zero
    3268:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    326c:	e13fff17 	ldw	r4,-4(fp)
    3270:	00038b80 	call	38b8 <alt_release_fd>
    if (rval < 0)
    3274:	e0bffe17 	ldw	r2,-8(fp)
    3278:	1000070e 	bge	r2,zero,3298 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    327c:	00031bc0 	call	31bc <alt_get_errno>
    3280:	1007883a 	mov	r3,r2
    3284:	e0bffe17 	ldw	r2,-8(fp)
    3288:	0085c83a 	sub	r2,zero,r2
    328c:	18800015 	stw	r2,0(r3)
      return -1;
    3290:	00bfffc4 	movi	r2,-1
    3294:	00000706 	br	32b4 <close+0xbc>
    }
    return 0;
    3298:	0005883a 	mov	r2,zero
    329c:	00000506 	br	32b4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    32a0:	00031bc0 	call	31bc <alt_get_errno>
    32a4:	1007883a 	mov	r3,r2
    32a8:	00801444 	movi	r2,81
    32ac:	18800015 	stw	r2,0(r3)
    return -1;
    32b0:	00bfffc4 	movi	r2,-1
  }
}
    32b4:	e037883a 	mov	sp,fp
    32b8:	dfc00117 	ldw	ra,4(sp)
    32bc:	df000017 	ldw	fp,0(sp)
    32c0:	dec00204 	addi	sp,sp,8
    32c4:	f800283a 	ret

000032c8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    32c8:	defffc04 	addi	sp,sp,-16
    32cc:	df000315 	stw	fp,12(sp)
    32d0:	df000304 	addi	fp,sp,12
    32d4:	e13ffd15 	stw	r4,-12(fp)
    32d8:	e17ffe15 	stw	r5,-8(fp)
    32dc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    32e0:	e0bfff17 	ldw	r2,-4(fp)
}
    32e4:	e037883a 	mov	sp,fp
    32e8:	df000017 	ldw	fp,0(sp)
    32ec:	dec00104 	addi	sp,sp,4
    32f0:	f800283a 	ret

000032f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    32f4:	defffe04 	addi	sp,sp,-8
    32f8:	dfc00115 	stw	ra,4(sp)
    32fc:	df000015 	stw	fp,0(sp)
    3300:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3304:	d0a00b17 	ldw	r2,-32724(gp)
    3308:	10000326 	beq	r2,zero,3318 <alt_get_errno+0x24>
    330c:	d0a00b17 	ldw	r2,-32724(gp)
    3310:	103ee83a 	callr	r2
    3314:	00000106 	br	331c <alt_get_errno+0x28>
    3318:	d0a73f04 	addi	r2,gp,-25348
}
    331c:	e037883a 	mov	sp,fp
    3320:	dfc00117 	ldw	ra,4(sp)
    3324:	df000017 	ldw	fp,0(sp)
    3328:	dec00204 	addi	sp,sp,8
    332c:	f800283a 	ret

00003330 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    3330:	defffb04 	addi	sp,sp,-20
    3334:	dfc00415 	stw	ra,16(sp)
    3338:	df000315 	stw	fp,12(sp)
    333c:	df000304 	addi	fp,sp,12
    3340:	e13ffe15 	stw	r4,-8(fp)
    3344:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3348:	e0bffe17 	ldw	r2,-8(fp)
    334c:	10000616 	blt	r2,zero,3368 <fstat+0x38>
    3350:	e0bffe17 	ldw	r2,-8(fp)
    3354:	10c00324 	muli	r3,r2,12
    3358:	00800034 	movhi	r2,0
    335c:	109cbe04 	addi	r2,r2,29432
    3360:	1885883a 	add	r2,r3,r2
    3364:	00000106 	br	336c <fstat+0x3c>
    3368:	0005883a 	mov	r2,zero
    336c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    3370:	e0bffd17 	ldw	r2,-12(fp)
    3374:	10001026 	beq	r2,zero,33b8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    3378:	e0bffd17 	ldw	r2,-12(fp)
    337c:	10800017 	ldw	r2,0(r2)
    3380:	10800817 	ldw	r2,32(r2)
    3384:	10000726 	beq	r2,zero,33a4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    3388:	e0bffd17 	ldw	r2,-12(fp)
    338c:	10800017 	ldw	r2,0(r2)
    3390:	10800817 	ldw	r2,32(r2)
    3394:	e17fff17 	ldw	r5,-4(fp)
    3398:	e13ffd17 	ldw	r4,-12(fp)
    339c:	103ee83a 	callr	r2
    33a0:	00000a06 	br	33cc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    33a4:	e0bfff17 	ldw	r2,-4(fp)
    33a8:	00c80004 	movi	r3,8192
    33ac:	10c00115 	stw	r3,4(r2)
      return 0;
    33b0:	0005883a 	mov	r2,zero
    33b4:	00000506 	br	33cc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    33b8:	00032f40 	call	32f4 <alt_get_errno>
    33bc:	1007883a 	mov	r3,r2
    33c0:	00801444 	movi	r2,81
    33c4:	18800015 	stw	r2,0(r3)
    return -1;
    33c8:	00bfffc4 	movi	r2,-1
  }
}
    33cc:	e037883a 	mov	sp,fp
    33d0:	dfc00117 	ldw	ra,4(sp)
    33d4:	df000017 	ldw	fp,0(sp)
    33d8:	dec00204 	addi	sp,sp,8
    33dc:	f800283a 	ret

000033e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    33e0:	defffe04 	addi	sp,sp,-8
    33e4:	dfc00115 	stw	ra,4(sp)
    33e8:	df000015 	stw	fp,0(sp)
    33ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    33f0:	d0a00b17 	ldw	r2,-32724(gp)
    33f4:	10000326 	beq	r2,zero,3404 <alt_get_errno+0x24>
    33f8:	d0a00b17 	ldw	r2,-32724(gp)
    33fc:	103ee83a 	callr	r2
    3400:	00000106 	br	3408 <alt_get_errno+0x28>
    3404:	d0a73f04 	addi	r2,gp,-25348
}
    3408:	e037883a 	mov	sp,fp
    340c:	dfc00117 	ldw	ra,4(sp)
    3410:	df000017 	ldw	fp,0(sp)
    3414:	dec00204 	addi	sp,sp,8
    3418:	f800283a 	ret

0000341c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    341c:	deffed04 	addi	sp,sp,-76
    3420:	dfc01215 	stw	ra,72(sp)
    3424:	df001115 	stw	fp,68(sp)
    3428:	df001104 	addi	fp,sp,68
    342c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3430:	e0bfff17 	ldw	r2,-4(fp)
    3434:	10000616 	blt	r2,zero,3450 <isatty+0x34>
    3438:	e0bfff17 	ldw	r2,-4(fp)
    343c:	10c00324 	muli	r3,r2,12
    3440:	00800034 	movhi	r2,0
    3444:	109cbe04 	addi	r2,r2,29432
    3448:	1885883a 	add	r2,r3,r2
    344c:	00000106 	br	3454 <isatty+0x38>
    3450:	0005883a 	mov	r2,zero
    3454:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    3458:	e0bfef17 	ldw	r2,-68(fp)
    345c:	10000e26 	beq	r2,zero,3498 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    3460:	e0bfef17 	ldw	r2,-68(fp)
    3464:	10800017 	ldw	r2,0(r2)
    3468:	10800817 	ldw	r2,32(r2)
    346c:	1000021e 	bne	r2,zero,3478 <isatty+0x5c>
    {
      return 1;
    3470:	00800044 	movi	r2,1
    3474:	00000d06 	br	34ac <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3478:	e0bff004 	addi	r2,fp,-64
    347c:	100b883a 	mov	r5,r2
    3480:	e13fff17 	ldw	r4,-4(fp)
    3484:	00033300 	call	3330 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3488:	e0bff117 	ldw	r2,-60(fp)
    348c:	10880020 	cmpeqi	r2,r2,8192
    3490:	10803fcc 	andi	r2,r2,255
    3494:	00000506 	br	34ac <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3498:	00033e00 	call	33e0 <alt_get_errno>
    349c:	1007883a 	mov	r3,r2
    34a0:	00801444 	movi	r2,81
    34a4:	18800015 	stw	r2,0(r3)
    return 0;
    34a8:	0005883a 	mov	r2,zero
  }
}
    34ac:	e037883a 	mov	sp,fp
    34b0:	dfc00117 	ldw	ra,4(sp)
    34b4:	df000017 	ldw	fp,0(sp)
    34b8:	dec00204 	addi	sp,sp,8
    34bc:	f800283a 	ret

000034c0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    34c0:	defffc04 	addi	sp,sp,-16
    34c4:	df000315 	stw	fp,12(sp)
    34c8:	df000304 	addi	fp,sp,12
    34cc:	e13ffd15 	stw	r4,-12(fp)
    34d0:	e17ffe15 	stw	r5,-8(fp)
    34d4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    34d8:	e0fffe17 	ldw	r3,-8(fp)
    34dc:	e0bffd17 	ldw	r2,-12(fp)
    34e0:	18800c26 	beq	r3,r2,3514 <alt_load_section+0x54>
  {
    while( to != end )
    34e4:	00000806 	br	3508 <alt_load_section+0x48>
    {
      *to++ = *from++;
    34e8:	e0bffe17 	ldw	r2,-8(fp)
    34ec:	10c00104 	addi	r3,r2,4
    34f0:	e0fffe15 	stw	r3,-8(fp)
    34f4:	e0fffd17 	ldw	r3,-12(fp)
    34f8:	19000104 	addi	r4,r3,4
    34fc:	e13ffd15 	stw	r4,-12(fp)
    3500:	18c00017 	ldw	r3,0(r3)
    3504:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    3508:	e0fffe17 	ldw	r3,-8(fp)
    350c:	e0bfff17 	ldw	r2,-4(fp)
    3510:	18bff51e 	bne	r3,r2,34e8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00034e8>
    {
      *to++ = *from++;
    }
  }
}
    3514:	0001883a 	nop
    3518:	e037883a 	mov	sp,fp
    351c:	df000017 	ldw	fp,0(sp)
    3520:	dec00104 	addi	sp,sp,4
    3524:	f800283a 	ret

00003528 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    3528:	defffe04 	addi	sp,sp,-8
    352c:	dfc00115 	stw	ra,4(sp)
    3530:	df000015 	stw	fp,0(sp)
    3534:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    3538:	01800074 	movhi	r6,1
    353c:	31a1d304 	addi	r6,r6,-30900
    3540:	01400034 	movhi	r5,0
    3544:	295aa904 	addi	r5,r5,27300
    3548:	01000074 	movhi	r4,1
    354c:	2121d304 	addi	r4,r4,-30900
    3550:	00034c00 	call	34c0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    3554:	01800034 	movhi	r6,0
    3558:	31809204 	addi	r6,r6,584
    355c:	01400034 	movhi	r5,0
    3560:	29400804 	addi	r5,r5,32
    3564:	01000034 	movhi	r4,0
    3568:	21000804 	addi	r4,r4,32
    356c:	00034c00 	call	34c0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    3570:	01800034 	movhi	r6,0
    3574:	319aa904 	addi	r6,r6,27300
    3578:	01400034 	movhi	r5,0
    357c:	295a6004 	addi	r5,r5,27008
    3580:	01000034 	movhi	r4,0
    3584:	211a6004 	addi	r4,r4,27008
    3588:	00034c00 	call	34c0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    358c:	00059b40 	call	59b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    3590:	0005c040 	call	5c04 <alt_icache_flush_all>
}
    3594:	0001883a 	nop
    3598:	e037883a 	mov	sp,fp
    359c:	dfc00117 	ldw	ra,4(sp)
    35a0:	df000017 	ldw	fp,0(sp)
    35a4:	dec00204 	addi	sp,sp,8
    35a8:	f800283a 	ret

000035ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    35ac:	defffe04 	addi	sp,sp,-8
    35b0:	dfc00115 	stw	ra,4(sp)
    35b4:	df000015 	stw	fp,0(sp)
    35b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    35bc:	d0a00b17 	ldw	r2,-32724(gp)
    35c0:	10000326 	beq	r2,zero,35d0 <alt_get_errno+0x24>
    35c4:	d0a00b17 	ldw	r2,-32724(gp)
    35c8:	103ee83a 	callr	r2
    35cc:	00000106 	br	35d4 <alt_get_errno+0x28>
    35d0:	d0a73f04 	addi	r2,gp,-25348
}
    35d4:	e037883a 	mov	sp,fp
    35d8:	dfc00117 	ldw	ra,4(sp)
    35dc:	df000017 	ldw	fp,0(sp)
    35e0:	dec00204 	addi	sp,sp,8
    35e4:	f800283a 	ret

000035e8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    35e8:	defff904 	addi	sp,sp,-28
    35ec:	dfc00615 	stw	ra,24(sp)
    35f0:	df000515 	stw	fp,20(sp)
    35f4:	df000504 	addi	fp,sp,20
    35f8:	e13ffd15 	stw	r4,-12(fp)
    35fc:	e17ffe15 	stw	r5,-8(fp)
    3600:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    3604:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3608:	e0bffd17 	ldw	r2,-12(fp)
    360c:	10000616 	blt	r2,zero,3628 <lseek+0x40>
    3610:	e0bffd17 	ldw	r2,-12(fp)
    3614:	10c00324 	muli	r3,r2,12
    3618:	00800034 	movhi	r2,0
    361c:	109cbe04 	addi	r2,r2,29432
    3620:	1885883a 	add	r2,r3,r2
    3624:	00000106 	br	362c <lseek+0x44>
    3628:	0005883a 	mov	r2,zero
    362c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    3630:	e0bffc17 	ldw	r2,-16(fp)
    3634:	10001026 	beq	r2,zero,3678 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    3638:	e0bffc17 	ldw	r2,-16(fp)
    363c:	10800017 	ldw	r2,0(r2)
    3640:	10800717 	ldw	r2,28(r2)
    3644:	10000926 	beq	r2,zero,366c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    3648:	e0bffc17 	ldw	r2,-16(fp)
    364c:	10800017 	ldw	r2,0(r2)
    3650:	10800717 	ldw	r2,28(r2)
    3654:	e1bfff17 	ldw	r6,-4(fp)
    3658:	e17ffe17 	ldw	r5,-8(fp)
    365c:	e13ffc17 	ldw	r4,-16(fp)
    3660:	103ee83a 	callr	r2
    3664:	e0bffb15 	stw	r2,-20(fp)
    3668:	00000506 	br	3680 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    366c:	00bfde84 	movi	r2,-134
    3670:	e0bffb15 	stw	r2,-20(fp)
    3674:	00000206 	br	3680 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    3678:	00bfebc4 	movi	r2,-81
    367c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    3680:	e0bffb17 	ldw	r2,-20(fp)
    3684:	1000070e 	bge	r2,zero,36a4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    3688:	00035ac0 	call	35ac <alt_get_errno>
    368c:	1007883a 	mov	r3,r2
    3690:	e0bffb17 	ldw	r2,-20(fp)
    3694:	0085c83a 	sub	r2,zero,r2
    3698:	18800015 	stw	r2,0(r3)
    rc = -1;
    369c:	00bfffc4 	movi	r2,-1
    36a0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    36a4:	e0bffb17 	ldw	r2,-20(fp)
}
    36a8:	e037883a 	mov	sp,fp
    36ac:	dfc00117 	ldw	ra,4(sp)
    36b0:	df000017 	ldw	fp,0(sp)
    36b4:	dec00204 	addi	sp,sp,8
    36b8:	f800283a 	ret

000036bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    36bc:	defffd04 	addi	sp,sp,-12
    36c0:	dfc00215 	stw	ra,8(sp)
    36c4:	df000115 	stw	fp,4(sp)
    36c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    36cc:	0009883a 	mov	r4,zero
    36d0:	0003b340 	call	3b34 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    36d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    36d8:	0003b6c0 	call	3b6c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    36dc:	01800034 	movhi	r6,0
    36e0:	319a6704 	addi	r6,r6,27036
    36e4:	01400034 	movhi	r5,0
    36e8:	295a6704 	addi	r5,r5,27036
    36ec:	01000034 	movhi	r4,0
    36f0:	211a6704 	addi	r4,r4,27036
    36f4:	0005cfc0 	call	5cfc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    36f8:	0005ab40 	call	5ab4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    36fc:	01000034 	movhi	r4,0
    3700:	2116c504 	addi	r4,r4,23316
    3704:	00065ec0 	call	65ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3708:	d0a74017 	ldw	r2,-25344(gp)
    370c:	d0e74117 	ldw	r3,-25340(gp)
    3710:	d1274217 	ldw	r4,-25336(gp)
    3714:	200d883a 	mov	r6,r4
    3718:	180b883a 	mov	r5,r3
    371c:	1009883a 	mov	r4,r2
    3720:	00002840 	call	284 <main>
    3724:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3728:	01000044 	movi	r4,1
    372c:	00031f80 	call	31f8 <close>
  exit (result);
    3730:	e13fff17 	ldw	r4,-4(fp)
    3734:	00066000 	call	6600 <exit>

00003738 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3738:	defffe04 	addi	sp,sp,-8
    373c:	df000115 	stw	fp,4(sp)
    3740:	df000104 	addi	fp,sp,4
    3744:	e13fff15 	stw	r4,-4(fp)
}
    3748:	0001883a 	nop
    374c:	e037883a 	mov	sp,fp
    3750:	df000017 	ldw	fp,0(sp)
    3754:	dec00104 	addi	sp,sp,4
    3758:	f800283a 	ret

0000375c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    375c:	defffe04 	addi	sp,sp,-8
    3760:	df000115 	stw	fp,4(sp)
    3764:	df000104 	addi	fp,sp,4
    3768:	e13fff15 	stw	r4,-4(fp)
}
    376c:	0001883a 	nop
    3770:	e037883a 	mov	sp,fp
    3774:	df000017 	ldw	fp,0(sp)
    3778:	dec00104 	addi	sp,sp,4
    377c:	f800283a 	ret

00003780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3780:	defffe04 	addi	sp,sp,-8
    3784:	dfc00115 	stw	ra,4(sp)
    3788:	df000015 	stw	fp,0(sp)
    378c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3790:	d0a00b17 	ldw	r2,-32724(gp)
    3794:	10000326 	beq	r2,zero,37a4 <alt_get_errno+0x24>
    3798:	d0a00b17 	ldw	r2,-32724(gp)
    379c:	103ee83a 	callr	r2
    37a0:	00000106 	br	37a8 <alt_get_errno+0x28>
    37a4:	d0a73f04 	addi	r2,gp,-25348
}
    37a8:	e037883a 	mov	sp,fp
    37ac:	dfc00117 	ldw	ra,4(sp)
    37b0:	df000017 	ldw	fp,0(sp)
    37b4:	dec00204 	addi	sp,sp,8
    37b8:	f800283a 	ret

000037bc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    37bc:	defff904 	addi	sp,sp,-28
    37c0:	dfc00615 	stw	ra,24(sp)
    37c4:	df000515 	stw	fp,20(sp)
    37c8:	df000504 	addi	fp,sp,20
    37cc:	e13ffd15 	stw	r4,-12(fp)
    37d0:	e17ffe15 	stw	r5,-8(fp)
    37d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    37d8:	e0bffd17 	ldw	r2,-12(fp)
    37dc:	10000616 	blt	r2,zero,37f8 <read+0x3c>
    37e0:	e0bffd17 	ldw	r2,-12(fp)
    37e4:	10c00324 	muli	r3,r2,12
    37e8:	00800034 	movhi	r2,0
    37ec:	109cbe04 	addi	r2,r2,29432
    37f0:	1885883a 	add	r2,r3,r2
    37f4:	00000106 	br	37fc <read+0x40>
    37f8:	0005883a 	mov	r2,zero
    37fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3800:	e0bffb17 	ldw	r2,-20(fp)
    3804:	10002226 	beq	r2,zero,3890 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3808:	e0bffb17 	ldw	r2,-20(fp)
    380c:	10800217 	ldw	r2,8(r2)
    3810:	108000cc 	andi	r2,r2,3
    3814:	10800060 	cmpeqi	r2,r2,1
    3818:	1000181e 	bne	r2,zero,387c <read+0xc0>
        (fd->dev->read))
    381c:	e0bffb17 	ldw	r2,-20(fp)
    3820:	10800017 	ldw	r2,0(r2)
    3824:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3828:	10001426 	beq	r2,zero,387c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    382c:	e0bffb17 	ldw	r2,-20(fp)
    3830:	10800017 	ldw	r2,0(r2)
    3834:	10800517 	ldw	r2,20(r2)
    3838:	e0ffff17 	ldw	r3,-4(fp)
    383c:	180d883a 	mov	r6,r3
    3840:	e17ffe17 	ldw	r5,-8(fp)
    3844:	e13ffb17 	ldw	r4,-20(fp)
    3848:	103ee83a 	callr	r2
    384c:	e0bffc15 	stw	r2,-16(fp)
    3850:	e0bffc17 	ldw	r2,-16(fp)
    3854:	1000070e 	bge	r2,zero,3874 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    3858:	00037800 	call	3780 <alt_get_errno>
    385c:	1007883a 	mov	r3,r2
    3860:	e0bffc17 	ldw	r2,-16(fp)
    3864:	0085c83a 	sub	r2,zero,r2
    3868:	18800015 	stw	r2,0(r3)
          return -1;
    386c:	00bfffc4 	movi	r2,-1
    3870:	00000c06 	br	38a4 <read+0xe8>
        }
        return rval;
    3874:	e0bffc17 	ldw	r2,-16(fp)
    3878:	00000a06 	br	38a4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    387c:	00037800 	call	3780 <alt_get_errno>
    3880:	1007883a 	mov	r3,r2
    3884:	00800344 	movi	r2,13
    3888:	18800015 	stw	r2,0(r3)
    388c:	00000406 	br	38a0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3890:	00037800 	call	3780 <alt_get_errno>
    3894:	1007883a 	mov	r3,r2
    3898:	00801444 	movi	r2,81
    389c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    38a0:	00bfffc4 	movi	r2,-1
}
    38a4:	e037883a 	mov	sp,fp
    38a8:	dfc00117 	ldw	ra,4(sp)
    38ac:	df000017 	ldw	fp,0(sp)
    38b0:	dec00204 	addi	sp,sp,8
    38b4:	f800283a 	ret

000038b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    38b8:	defffe04 	addi	sp,sp,-8
    38bc:	df000115 	stw	fp,4(sp)
    38c0:	df000104 	addi	fp,sp,4
    38c4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    38c8:	e0bfff17 	ldw	r2,-4(fp)
    38cc:	108000d0 	cmplti	r2,r2,3
    38d0:	10000d1e 	bne	r2,zero,3908 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    38d4:	00800034 	movhi	r2,0
    38d8:	109cbe04 	addi	r2,r2,29432
    38dc:	e0ffff17 	ldw	r3,-4(fp)
    38e0:	18c00324 	muli	r3,r3,12
    38e4:	10c5883a 	add	r2,r2,r3
    38e8:	10800204 	addi	r2,r2,8
    38ec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    38f0:	00800034 	movhi	r2,0
    38f4:	109cbe04 	addi	r2,r2,29432
    38f8:	e0ffff17 	ldw	r3,-4(fp)
    38fc:	18c00324 	muli	r3,r3,12
    3900:	10c5883a 	add	r2,r2,r3
    3904:	10000015 	stw	zero,0(r2)
  }
}
    3908:	0001883a 	nop
    390c:	e037883a 	mov	sp,fp
    3910:	df000017 	ldw	fp,0(sp)
    3914:	dec00104 	addi	sp,sp,4
    3918:	f800283a 	ret

0000391c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    391c:	defff904 	addi	sp,sp,-28
    3920:	df000615 	stw	fp,24(sp)
    3924:	df000604 	addi	fp,sp,24
    3928:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    392c:	0005303a 	rdctl	r2,status
    3930:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3934:	e0fffe17 	ldw	r3,-8(fp)
    3938:	00bfff84 	movi	r2,-2
    393c:	1884703a 	and	r2,r3,r2
    3940:	1001703a 	wrctl	status,r2
  
  return context;
    3944:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3948:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    394c:	d0a00c17 	ldw	r2,-32720(gp)
    3950:	10c000c4 	addi	r3,r2,3
    3954:	00bfff04 	movi	r2,-4
    3958:	1884703a 	and	r2,r3,r2
    395c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3960:	d0e00c17 	ldw	r3,-32720(gp)
    3964:	e0bfff17 	ldw	r2,-4(fp)
    3968:	1887883a 	add	r3,r3,r2
    396c:	00808034 	movhi	r2,512
    3970:	10800004 	addi	r2,r2,0
    3974:	10c0062e 	bgeu	r2,r3,3990 <sbrk+0x74>
    3978:	e0bffb17 	ldw	r2,-20(fp)
    397c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3980:	e0bffa17 	ldw	r2,-24(fp)
    3984:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3988:	00bfffc4 	movi	r2,-1
    398c:	00000b06 	br	39bc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    3990:	d0a00c17 	ldw	r2,-32720(gp)
    3994:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    3998:	d0e00c17 	ldw	r3,-32720(gp)
    399c:	e0bfff17 	ldw	r2,-4(fp)
    39a0:	1885883a 	add	r2,r3,r2
    39a4:	d0a00c15 	stw	r2,-32720(gp)
    39a8:	e0bffb17 	ldw	r2,-20(fp)
    39ac:	e0bffc15 	stw	r2,-16(fp)
    39b0:	e0bffc17 	ldw	r2,-16(fp)
    39b4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    39b8:	e0bffd17 	ldw	r2,-12(fp)
} 
    39bc:	e037883a 	mov	sp,fp
    39c0:	df000017 	ldw	fp,0(sp)
    39c4:	dec00104 	addi	sp,sp,4
    39c8:	f800283a 	ret

000039cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    39cc:	defffe04 	addi	sp,sp,-8
    39d0:	dfc00115 	stw	ra,4(sp)
    39d4:	df000015 	stw	fp,0(sp)
    39d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    39dc:	d0a00b17 	ldw	r2,-32724(gp)
    39e0:	10000326 	beq	r2,zero,39f0 <alt_get_errno+0x24>
    39e4:	d0a00b17 	ldw	r2,-32724(gp)
    39e8:	103ee83a 	callr	r2
    39ec:	00000106 	br	39f4 <alt_get_errno+0x28>
    39f0:	d0a73f04 	addi	r2,gp,-25348
}
    39f4:	e037883a 	mov	sp,fp
    39f8:	dfc00117 	ldw	ra,4(sp)
    39fc:	df000017 	ldw	fp,0(sp)
    3a00:	dec00204 	addi	sp,sp,8
    3a04:	f800283a 	ret

00003a08 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    3a08:	defff904 	addi	sp,sp,-28
    3a0c:	dfc00615 	stw	ra,24(sp)
    3a10:	df000515 	stw	fp,20(sp)
    3a14:	df000504 	addi	fp,sp,20
    3a18:	e13ffd15 	stw	r4,-12(fp)
    3a1c:	e17ffe15 	stw	r5,-8(fp)
    3a20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3a24:	e0bffd17 	ldw	r2,-12(fp)
    3a28:	10000616 	blt	r2,zero,3a44 <write+0x3c>
    3a2c:	e0bffd17 	ldw	r2,-12(fp)
    3a30:	10c00324 	muli	r3,r2,12
    3a34:	00800034 	movhi	r2,0
    3a38:	109cbe04 	addi	r2,r2,29432
    3a3c:	1885883a 	add	r2,r3,r2
    3a40:	00000106 	br	3a48 <write+0x40>
    3a44:	0005883a 	mov	r2,zero
    3a48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3a4c:	e0bffb17 	ldw	r2,-20(fp)
    3a50:	10002126 	beq	r2,zero,3ad8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3a54:	e0bffb17 	ldw	r2,-20(fp)
    3a58:	10800217 	ldw	r2,8(r2)
    3a5c:	108000cc 	andi	r2,r2,3
    3a60:	10001826 	beq	r2,zero,3ac4 <write+0xbc>
    3a64:	e0bffb17 	ldw	r2,-20(fp)
    3a68:	10800017 	ldw	r2,0(r2)
    3a6c:	10800617 	ldw	r2,24(r2)
    3a70:	10001426 	beq	r2,zero,3ac4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3a74:	e0bffb17 	ldw	r2,-20(fp)
    3a78:	10800017 	ldw	r2,0(r2)
    3a7c:	10800617 	ldw	r2,24(r2)
    3a80:	e0ffff17 	ldw	r3,-4(fp)
    3a84:	180d883a 	mov	r6,r3
    3a88:	e17ffe17 	ldw	r5,-8(fp)
    3a8c:	e13ffb17 	ldw	r4,-20(fp)
    3a90:	103ee83a 	callr	r2
    3a94:	e0bffc15 	stw	r2,-16(fp)
    3a98:	e0bffc17 	ldw	r2,-16(fp)
    3a9c:	1000070e 	bge	r2,zero,3abc <write+0xb4>
      {
        ALT_ERRNO = -rval;
    3aa0:	00039cc0 	call	39cc <alt_get_errno>
    3aa4:	1007883a 	mov	r3,r2
    3aa8:	e0bffc17 	ldw	r2,-16(fp)
    3aac:	0085c83a 	sub	r2,zero,r2
    3ab0:	18800015 	stw	r2,0(r3)
        return -1;
    3ab4:	00bfffc4 	movi	r2,-1
    3ab8:	00000c06 	br	3aec <write+0xe4>
      }
      return rval;
    3abc:	e0bffc17 	ldw	r2,-16(fp)
    3ac0:	00000a06 	br	3aec <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3ac4:	00039cc0 	call	39cc <alt_get_errno>
    3ac8:	1007883a 	mov	r3,r2
    3acc:	00800344 	movi	r2,13
    3ad0:	18800015 	stw	r2,0(r3)
    3ad4:	00000406 	br	3ae8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3ad8:	00039cc0 	call	39cc <alt_get_errno>
    3adc:	1007883a 	mov	r3,r2
    3ae0:	00801444 	movi	r2,81
    3ae4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3ae8:	00bfffc4 	movi	r2,-1
}
    3aec:	e037883a 	mov	sp,fp
    3af0:	dfc00117 	ldw	ra,4(sp)
    3af4:	df000017 	ldw	fp,0(sp)
    3af8:	dec00204 	addi	sp,sp,8
    3afc:	f800283a 	ret

00003b00 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    3b00:	defffd04 	addi	sp,sp,-12
    3b04:	dfc00215 	stw	ra,8(sp)
    3b08:	df000115 	stw	fp,4(sp)
    3b0c:	df000104 	addi	fp,sp,4
    3b10:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3b14:	d1600804 	addi	r5,gp,-32736
    3b18:	e13fff17 	ldw	r4,-4(fp)
    3b1c:	0005a100 	call	5a10 <alt_dev_llist_insert>
}
    3b20:	e037883a 	mov	sp,fp
    3b24:	dfc00117 	ldw	ra,4(sp)
    3b28:	df000017 	ldw	fp,0(sp)
    3b2c:	dec00204 	addi	sp,sp,8
    3b30:	f800283a 	ret

00003b34 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3b34:	defffd04 	addi	sp,sp,-12
    3b38:	dfc00215 	stw	ra,8(sp)
    3b3c:	df000115 	stw	fp,4(sp)
    3b40:	df000104 	addi	fp,sp,4
    3b44:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    3b48:	00062f00 	call	62f0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3b4c:	00800044 	movi	r2,1
    3b50:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3b54:	0001883a 	nop
    3b58:	e037883a 	mov	sp,fp
    3b5c:	dfc00117 	ldw	ra,4(sp)
    3b60:	df000017 	ldw	fp,0(sp)
    3b64:	dec00204 	addi	sp,sp,8
    3b68:	f800283a 	ret

00003b6c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3b6c:	defffc04 	addi	sp,sp,-16
    3b70:	dfc00315 	stw	ra,12(sp)
    3b74:	df000215 	stw	fp,8(sp)
    3b78:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    3b7c:	01c00204 	movi	r7,8
    3b80:	000d883a 	mov	r6,zero
    3b84:	000b883a 	mov	r5,zero
    3b88:	013fc834 	movhi	r4,65312
    3b8c:	21080004 	addi	r4,r4,8192
    3b90:	0004dd80 	call	4dd8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    3b94:	01800204 	movi	r6,8
    3b98:	000b883a 	mov	r5,zero
    3b9c:	01000034 	movhi	r4,0
    3ba0:	211d2804 	addi	r4,r4,29856
    3ba4:	00044600 	call	4460 <altera_avalon_jtag_uart_init>
    3ba8:	01000034 	movhi	r4,0
    3bac:	211d1e04 	addi	r4,r4,29816
    3bb0:	0003b000 	call	3b00 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    3bb4:	0001883a 	nop
    ALTERA_UP_AVALON_ADC_INIT ( ADC, ADC);
    3bb8:	01000074 	movhi	r4,1
    3bbc:	21213604 	addi	r4,r4,-31528
    3bc0:	0003b000 	call	3b00 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    3bc4:	01000074 	movhi	r4,1
    3bc8:	21214104 	addi	r4,r4,-31484
    3bcc:	0003b000 	call	3b00 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    3bd0:	01000074 	movhi	r4,1
    3bd4:	21214d04 	addi	r4,r4,-31436
    3bd8:	0003b000 	call	3b00 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    3bdc:	01000074 	movhi	r4,1
    3be0:	21215904 	addi	r4,r4,-31388
    3be4:	0003b000 	call	3b00 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    3be8:	01000074 	movhi	r4,1
    3bec:	21216404 	addi	r4,r4,-31344
    3bf0:	00053000 	call	5300 <alt_up_ps2_init>
    3bf4:	01000074 	movhi	r4,1
    3bf8:	21216404 	addi	r4,r4,-31344
    3bfc:	0003b000 	call	3b00 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    3c00:	01000074 	movhi	r4,1
    3c04:	21217204 	addi	r4,r4,-31288
    3c08:	00053000 	call	5300 <alt_up_ps2_init>
    3c0c:	01000074 	movhi	r4,1
    3c10:	21217204 	addi	r4,r4,-31288
    3c14:	0003b000 	call	3b00 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
    3c18:	00800074 	movhi	r2,1
    3c1c:	10a18004 	addi	r2,r2,-31232
    3c20:	10800a17 	ldw	r2,40(r2)
    3c24:	10800017 	ldw	r2,0(r2)
    3c28:	1007883a 	mov	r3,r2
    3c2c:	00800074 	movhi	r2,1
    3c30:	10a18004 	addi	r2,r2,-31232
    3c34:	10c00b15 	stw	r3,44(r2)
    3c38:	00800074 	movhi	r2,1
    3c3c:	10a18004 	addi	r2,r2,-31232
    3c40:	10800a17 	ldw	r2,40(r2)
    3c44:	10800104 	addi	r2,r2,4
    3c48:	10800017 	ldw	r2,0(r2)
    3c4c:	1007883a 	mov	r3,r2
    3c50:	00800074 	movhi	r2,1
    3c54:	10a18004 	addi	r2,r2,-31232
    3c58:	10c00c15 	stw	r3,48(r2)
    3c5c:	00800074 	movhi	r2,1
    3c60:	10a18004 	addi	r2,r2,-31232
    3c64:	10800a17 	ldw	r2,40(r2)
    3c68:	10800204 	addi	r2,r2,8
    3c6c:	10800017 	ldw	r2,0(r2)
    3c70:	10ffffcc 	andi	r3,r2,65535
    3c74:	00800074 	movhi	r2,1
    3c78:	10a18004 	addi	r2,r2,-31232
    3c7c:	10c01115 	stw	r3,68(r2)
    3c80:	00800074 	movhi	r2,1
    3c84:	10a18004 	addi	r2,r2,-31232
    3c88:	10800a17 	ldw	r2,40(r2)
    3c8c:	10800204 	addi	r2,r2,8
    3c90:	10800017 	ldw	r2,0(r2)
    3c94:	1006d43a 	srli	r3,r2,16
    3c98:	00800074 	movhi	r2,1
    3c9c:	10a18004 	addi	r2,r2,-31232
    3ca0:	10c01215 	stw	r3,72(r2)
    3ca4:	00800074 	movhi	r2,1
    3ca8:	10a18004 	addi	r2,r2,-31232
    3cac:	10800a17 	ldw	r2,40(r2)
    3cb0:	10800304 	addi	r2,r2,12
    3cb4:	10800017 	ldw	r2,0(r2)
    3cb8:	1005d07a 	srai	r2,r2,1
    3cbc:	10c0004c 	andi	r3,r2,1
    3cc0:	00800074 	movhi	r2,1
    3cc4:	10a18004 	addi	r2,r2,-31232
    3cc8:	10c00d15 	stw	r3,52(r2)
    3ccc:	00800074 	movhi	r2,1
    3cd0:	10a18004 	addi	r2,r2,-31232
    3cd4:	10800a17 	ldw	r2,40(r2)
    3cd8:	10800304 	addi	r2,r2,12
    3cdc:	10800017 	ldw	r2,0(r2)
    3ce0:	1005d23a 	srai	r2,r2,8
    3ce4:	10c003cc 	andi	r3,r2,15
    3ce8:	00800074 	movhi	r2,1
    3cec:	10a18004 	addi	r2,r2,-31232
    3cf0:	10c00e15 	stw	r3,56(r2)
    3cf4:	00800074 	movhi	r2,1
    3cf8:	10a18004 	addi	r2,r2,-31232
    3cfc:	10800a17 	ldw	r2,40(r2)
    3d00:	10800304 	addi	r2,r2,12
    3d04:	10800017 	ldw	r2,0(r2)
    3d08:	1005d1ba 	srai	r2,r2,6
    3d0c:	10c000cc 	andi	r3,r2,3
    3d10:	00800074 	movhi	r2,1
    3d14:	10a18004 	addi	r2,r2,-31232
    3d18:	10c00f15 	stw	r3,60(r2)
    3d1c:	00800074 	movhi	r2,1
    3d20:	10a18004 	addi	r2,r2,-31232
    3d24:	10800e17 	ldw	r2,56(r2)
    3d28:	1007883a 	mov	r3,r2
    3d2c:	00800074 	movhi	r2,1
    3d30:	10a18004 	addi	r2,r2,-31232
    3d34:	10800f17 	ldw	r2,60(r2)
    3d38:	1885383a 	mul	r2,r3,r2
    3d3c:	e0bffe05 	stb	r2,-8(fp)
    3d40:	e0bffe03 	ldbu	r2,-8(fp)
    3d44:	10800268 	cmpgeui	r2,r2,9
    3d48:	1000051e 	bne	r2,zero,3d60 <alt_sys_init+0x1f4>
    3d4c:	00800074 	movhi	r2,1
    3d50:	10a18004 	addi	r2,r2,-31232
    3d54:	00c00044 	movi	r3,1
    3d58:	10c01015 	stw	r3,64(r2)
    3d5c:	00000c06 	br	3d90 <alt_sys_init+0x224>
    3d60:	e0bffe03 	ldbu	r2,-8(fp)
    3d64:	10800468 	cmpgeui	r2,r2,17
    3d68:	1000051e 	bne	r2,zero,3d80 <alt_sys_init+0x214>
    3d6c:	00800074 	movhi	r2,1
    3d70:	10a18004 	addi	r2,r2,-31232
    3d74:	00c00084 	movi	r3,2
    3d78:	10c01015 	stw	r3,64(r2)
    3d7c:	00000406 	br	3d90 <alt_sys_init+0x224>
    3d80:	00800074 	movhi	r2,1
    3d84:	10a18004 	addi	r2,r2,-31232
    3d88:	00c00104 	movi	r3,4
    3d8c:	10c01015 	stw	r3,64(r2)
    3d90:	00800074 	movhi	r2,1
    3d94:	10a18004 	addi	r2,r2,-31232
    3d98:	10800a17 	ldw	r2,40(r2)
    3d9c:	10800304 	addi	r2,r2,12
    3da0:	10800017 	ldw	r2,0(r2)
    3da4:	1005d43a 	srai	r2,r2,16
    3da8:	e0bffe45 	stb	r2,-7(fp)
    3dac:	00800074 	movhi	r2,1
    3db0:	10a18004 	addi	r2,r2,-31232
    3db4:	10800a17 	ldw	r2,40(r2)
    3db8:	10800304 	addi	r2,r2,12
    3dbc:	10800017 	ldw	r2,0(r2)
    3dc0:	1004d63a 	srli	r2,r2,24
    3dc4:	e0bffe85 	stb	r2,-6(fp)
    3dc8:	00800074 	movhi	r2,1
    3dcc:	10a18004 	addi	r2,r2,-31232
    3dd0:	10801017 	ldw	r2,64(r2)
    3dd4:	10800058 	cmpnei	r2,r2,1
    3dd8:	1000041e 	bne	r2,zero,3dec <alt_sys_init+0x280>
    3ddc:	00800074 	movhi	r2,1
    3de0:	10a18004 	addi	r2,r2,-31232
    3de4:	10001315 	stw	zero,76(r2)
    3de8:	00000e06 	br	3e24 <alt_sys_init+0x2b8>
    3dec:	00800074 	movhi	r2,1
    3df0:	10a18004 	addi	r2,r2,-31232
    3df4:	10801017 	ldw	r2,64(r2)
    3df8:	10800098 	cmpnei	r2,r2,2
    3dfc:	1000051e 	bne	r2,zero,3e14 <alt_sys_init+0x2a8>
    3e00:	00800074 	movhi	r2,1
    3e04:	10a18004 	addi	r2,r2,-31232
    3e08:	00c00044 	movi	r3,1
    3e0c:	10c01315 	stw	r3,76(r2)
    3e10:	00000406 	br	3e24 <alt_sys_init+0x2b8>
    3e14:	00800074 	movhi	r2,1
    3e18:	10a18004 	addi	r2,r2,-31232
    3e1c:	00c00084 	movi	r3,2
    3e20:	10c01315 	stw	r3,76(r2)
    3e24:	e0bffe43 	ldbu	r2,-7(fp)
    3e28:	00c00804 	movi	r3,32
    3e2c:	1885c83a 	sub	r2,r3,r2
    3e30:	00ffffc4 	movi	r3,-1
    3e34:	1886d83a 	srl	r3,r3,r2
    3e38:	00800074 	movhi	r2,1
    3e3c:	10a18004 	addi	r2,r2,-31232
    3e40:	10c01415 	stw	r3,80(r2)
    3e44:	e0fffe43 	ldbu	r3,-7(fp)
    3e48:	00800074 	movhi	r2,1
    3e4c:	10a18004 	addi	r2,r2,-31232
    3e50:	10801317 	ldw	r2,76(r2)
    3e54:	1887883a 	add	r3,r3,r2
    3e58:	00800074 	movhi	r2,1
    3e5c:	10a18004 	addi	r2,r2,-31232
    3e60:	10c01515 	stw	r3,84(r2)
    3e64:	e0bffe83 	ldbu	r2,-6(fp)
    3e68:	00c00804 	movi	r3,32
    3e6c:	1885c83a 	sub	r2,r3,r2
    3e70:	00ffffc4 	movi	r3,-1
    3e74:	1886d83a 	srl	r3,r3,r2
    3e78:	00800074 	movhi	r2,1
    3e7c:	10a18004 	addi	r2,r2,-31232
    3e80:	10c01615 	stw	r3,88(r2)
    3e84:	01000074 	movhi	r4,1
    3e88:	21218004 	addi	r4,r4,-31232
    3e8c:	0003b000 	call	3b00 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
    3e90:	00800074 	movhi	r2,1
    3e94:	10a19704 	addi	r2,r2,-31140
    3e98:	10800a17 	ldw	r2,40(r2)
    3e9c:	10800017 	ldw	r2,0(r2)
    3ea0:	1007883a 	mov	r3,r2
    3ea4:	00800074 	movhi	r2,1
    3ea8:	10a19704 	addi	r2,r2,-31140
    3eac:	10c00b15 	stw	r3,44(r2)
    3eb0:	00800074 	movhi	r2,1
    3eb4:	10a19704 	addi	r2,r2,-31140
    3eb8:	10800a17 	ldw	r2,40(r2)
    3ebc:	10800104 	addi	r2,r2,4
    3ec0:	10800017 	ldw	r2,0(r2)
    3ec4:	1007883a 	mov	r3,r2
    3ec8:	00800074 	movhi	r2,1
    3ecc:	10a19704 	addi	r2,r2,-31140
    3ed0:	10c00c15 	stw	r3,48(r2)
    3ed4:	00800074 	movhi	r2,1
    3ed8:	10a19704 	addi	r2,r2,-31140
    3edc:	10800a17 	ldw	r2,40(r2)
    3ee0:	10800204 	addi	r2,r2,8
    3ee4:	10800017 	ldw	r2,0(r2)
    3ee8:	10ffffcc 	andi	r3,r2,65535
    3eec:	00800074 	movhi	r2,1
    3ef0:	10a19704 	addi	r2,r2,-31140
    3ef4:	10c01115 	stw	r3,68(r2)
    3ef8:	00800074 	movhi	r2,1
    3efc:	10a19704 	addi	r2,r2,-31140
    3f00:	10800a17 	ldw	r2,40(r2)
    3f04:	10800204 	addi	r2,r2,8
    3f08:	10800017 	ldw	r2,0(r2)
    3f0c:	1006d43a 	srli	r3,r2,16
    3f10:	00800074 	movhi	r2,1
    3f14:	10a19704 	addi	r2,r2,-31140
    3f18:	10c01215 	stw	r3,72(r2)
    3f1c:	00800074 	movhi	r2,1
    3f20:	10a19704 	addi	r2,r2,-31140
    3f24:	10800a17 	ldw	r2,40(r2)
    3f28:	10800304 	addi	r2,r2,12
    3f2c:	10800017 	ldw	r2,0(r2)
    3f30:	1005d07a 	srai	r2,r2,1
    3f34:	10c0004c 	andi	r3,r2,1
    3f38:	00800074 	movhi	r2,1
    3f3c:	10a19704 	addi	r2,r2,-31140
    3f40:	10c00d15 	stw	r3,52(r2)
    3f44:	00800074 	movhi	r2,1
    3f48:	10a19704 	addi	r2,r2,-31140
    3f4c:	10800a17 	ldw	r2,40(r2)
    3f50:	10800304 	addi	r2,r2,12
    3f54:	10800017 	ldw	r2,0(r2)
    3f58:	1005d23a 	srai	r2,r2,8
    3f5c:	10c003cc 	andi	r3,r2,15
    3f60:	00800074 	movhi	r2,1
    3f64:	10a19704 	addi	r2,r2,-31140
    3f68:	10c00e15 	stw	r3,56(r2)
    3f6c:	00800074 	movhi	r2,1
    3f70:	10a19704 	addi	r2,r2,-31140
    3f74:	10800a17 	ldw	r2,40(r2)
    3f78:	10800304 	addi	r2,r2,12
    3f7c:	10800017 	ldw	r2,0(r2)
    3f80:	1005d1ba 	srai	r2,r2,6
    3f84:	10c000cc 	andi	r3,r2,3
    3f88:	00800074 	movhi	r2,1
    3f8c:	10a19704 	addi	r2,r2,-31140
    3f90:	10c00f15 	stw	r3,60(r2)
    3f94:	00800074 	movhi	r2,1
    3f98:	10a19704 	addi	r2,r2,-31140
    3f9c:	10800e17 	ldw	r2,56(r2)
    3fa0:	1007883a 	mov	r3,r2
    3fa4:	00800074 	movhi	r2,1
    3fa8:	10a19704 	addi	r2,r2,-31140
    3fac:	10800f17 	ldw	r2,60(r2)
    3fb0:	1885383a 	mul	r2,r3,r2
    3fb4:	e0bffec5 	stb	r2,-5(fp)
    3fb8:	e0bffec3 	ldbu	r2,-5(fp)
    3fbc:	10800268 	cmpgeui	r2,r2,9
    3fc0:	1000051e 	bne	r2,zero,3fd8 <alt_sys_init+0x46c>
    3fc4:	00800074 	movhi	r2,1
    3fc8:	10a19704 	addi	r2,r2,-31140
    3fcc:	00c00044 	movi	r3,1
    3fd0:	10c01015 	stw	r3,64(r2)
    3fd4:	00000c06 	br	4008 <alt_sys_init+0x49c>
    3fd8:	e0bffec3 	ldbu	r2,-5(fp)
    3fdc:	10800468 	cmpgeui	r2,r2,17
    3fe0:	1000051e 	bne	r2,zero,3ff8 <alt_sys_init+0x48c>
    3fe4:	00800074 	movhi	r2,1
    3fe8:	10a19704 	addi	r2,r2,-31140
    3fec:	00c00084 	movi	r3,2
    3ff0:	10c01015 	stw	r3,64(r2)
    3ff4:	00000406 	br	4008 <alt_sys_init+0x49c>
    3ff8:	00800074 	movhi	r2,1
    3ffc:	10a19704 	addi	r2,r2,-31140
    4000:	00c00104 	movi	r3,4
    4004:	10c01015 	stw	r3,64(r2)
    4008:	00800074 	movhi	r2,1
    400c:	10a19704 	addi	r2,r2,-31140
    4010:	10800a17 	ldw	r2,40(r2)
    4014:	10800304 	addi	r2,r2,12
    4018:	10800017 	ldw	r2,0(r2)
    401c:	1005d43a 	srai	r2,r2,16
    4020:	e0bfff05 	stb	r2,-4(fp)
    4024:	00800074 	movhi	r2,1
    4028:	10a19704 	addi	r2,r2,-31140
    402c:	10800a17 	ldw	r2,40(r2)
    4030:	10800304 	addi	r2,r2,12
    4034:	10800017 	ldw	r2,0(r2)
    4038:	1004d63a 	srli	r2,r2,24
    403c:	e0bfff45 	stb	r2,-3(fp)
    4040:	00800074 	movhi	r2,1
    4044:	10a19704 	addi	r2,r2,-31140
    4048:	10801017 	ldw	r2,64(r2)
    404c:	10800058 	cmpnei	r2,r2,1
    4050:	1000041e 	bne	r2,zero,4064 <alt_sys_init+0x4f8>
    4054:	00800074 	movhi	r2,1
    4058:	10a19704 	addi	r2,r2,-31140
    405c:	10001315 	stw	zero,76(r2)
    4060:	00000e06 	br	409c <alt_sys_init+0x530>
    4064:	00800074 	movhi	r2,1
    4068:	10a19704 	addi	r2,r2,-31140
    406c:	10801017 	ldw	r2,64(r2)
    4070:	10800098 	cmpnei	r2,r2,2
    4074:	1000051e 	bne	r2,zero,408c <alt_sys_init+0x520>
    4078:	00800074 	movhi	r2,1
    407c:	10a19704 	addi	r2,r2,-31140
    4080:	00c00044 	movi	r3,1
    4084:	10c01315 	stw	r3,76(r2)
    4088:	00000406 	br	409c <alt_sys_init+0x530>
    408c:	00800074 	movhi	r2,1
    4090:	10a19704 	addi	r2,r2,-31140
    4094:	00c00084 	movi	r3,2
    4098:	10c01315 	stw	r3,76(r2)
    409c:	e0bfff03 	ldbu	r2,-4(fp)
    40a0:	00c00804 	movi	r3,32
    40a4:	1885c83a 	sub	r2,r3,r2
    40a8:	00ffffc4 	movi	r3,-1
    40ac:	1886d83a 	srl	r3,r3,r2
    40b0:	00800074 	movhi	r2,1
    40b4:	10a19704 	addi	r2,r2,-31140
    40b8:	10c01415 	stw	r3,80(r2)
    40bc:	e0ffff03 	ldbu	r3,-4(fp)
    40c0:	00800074 	movhi	r2,1
    40c4:	10a19704 	addi	r2,r2,-31140
    40c8:	10801317 	ldw	r2,76(r2)
    40cc:	1887883a 	add	r3,r3,r2
    40d0:	00800074 	movhi	r2,1
    40d4:	10a19704 	addi	r2,r2,-31140
    40d8:	10c01515 	stw	r3,84(r2)
    40dc:	e0bfff43 	ldbu	r2,-3(fp)
    40e0:	00c00804 	movi	r3,32
    40e4:	1885c83a 	sub	r2,r3,r2
    40e8:	00ffffc4 	movi	r3,-1
    40ec:	1886d83a 	srl	r3,r3,r2
    40f0:	00800074 	movhi	r2,1
    40f4:	10a19704 	addi	r2,r2,-31140
    40f8:	10c01615 	stw	r3,88(r2)
    40fc:	01000074 	movhi	r4,1
    4100:	21219704 	addi	r4,r4,-31140
    4104:	0003b000 	call	3b00 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    4108:	00800074 	movhi	r2,1
    410c:	10a1ae04 	addi	r2,r2,-31048
    4110:	10800a17 	ldw	r2,40(r2)
    4114:	10800017 	ldw	r2,0(r2)
    4118:	1007883a 	mov	r3,r2
    411c:	00800074 	movhi	r2,1
    4120:	10a1ae04 	addi	r2,r2,-31048
    4124:	10c00b15 	stw	r3,44(r2)
    4128:	00800074 	movhi	r2,1
    412c:	10a1ae04 	addi	r2,r2,-31048
    4130:	10800a17 	ldw	r2,40(r2)
    4134:	10800104 	addi	r2,r2,4
    4138:	10800017 	ldw	r2,0(r2)
    413c:	1007883a 	mov	r3,r2
    4140:	00800074 	movhi	r2,1
    4144:	10a1ae04 	addi	r2,r2,-31048
    4148:	10c00c15 	stw	r3,48(r2)
    414c:	00800074 	movhi	r2,1
    4150:	10a1ae04 	addi	r2,r2,-31048
    4154:	10800a17 	ldw	r2,40(r2)
    4158:	10800204 	addi	r2,r2,8
    415c:	10800017 	ldw	r2,0(r2)
    4160:	10ffffcc 	andi	r3,r2,65535
    4164:	00800074 	movhi	r2,1
    4168:	10a1ae04 	addi	r2,r2,-31048
    416c:	10c00f15 	stw	r3,60(r2)
    4170:	00800074 	movhi	r2,1
    4174:	10a1ae04 	addi	r2,r2,-31048
    4178:	10800a17 	ldw	r2,40(r2)
    417c:	10800204 	addi	r2,r2,8
    4180:	10800017 	ldw	r2,0(r2)
    4184:	1006d43a 	srli	r3,r2,16
    4188:	00800074 	movhi	r2,1
    418c:	10a1ae04 	addi	r2,r2,-31048
    4190:	10c01015 	stw	r3,64(r2)
    4194:	00800074 	movhi	r2,1
    4198:	10a1ae04 	addi	r2,r2,-31048
    419c:	10800a17 	ldw	r2,40(r2)
    41a0:	10800304 	addi	r2,r2,12
    41a4:	10800017 	ldw	r2,0(r2)
    41a8:	1005d07a 	srai	r2,r2,1
    41ac:	10c0004c 	andi	r3,r2,1
    41b0:	00800074 	movhi	r2,1
    41b4:	10a1ae04 	addi	r2,r2,-31048
    41b8:	10c00d15 	stw	r3,52(r2)
    41bc:	00800074 	movhi	r2,1
    41c0:	10a1ae04 	addi	r2,r2,-31048
    41c4:	10800a17 	ldw	r2,40(r2)
    41c8:	10800304 	addi	r2,r2,12
    41cc:	10800017 	ldw	r2,0(r2)
    41d0:	1005d13a 	srai	r2,r2,4
    41d4:	10c003cc 	andi	r3,r2,15
    41d8:	00800074 	movhi	r2,1
    41dc:	10a1ae04 	addi	r2,r2,-31048
    41e0:	10c00e15 	stw	r3,56(r2)
    41e4:	00800074 	movhi	r2,1
    41e8:	10a1ae04 	addi	r2,r2,-31048
    41ec:	10800a17 	ldw	r2,40(r2)
    41f0:	10800304 	addi	r2,r2,12
    41f4:	10800017 	ldw	r2,0(r2)
    41f8:	1005d43a 	srai	r2,r2,16
    41fc:	e0bfff85 	stb	r2,-2(fp)
    4200:	00800074 	movhi	r2,1
    4204:	10a1ae04 	addi	r2,r2,-31048
    4208:	10800a17 	ldw	r2,40(r2)
    420c:	10800304 	addi	r2,r2,12
    4210:	10800017 	ldw	r2,0(r2)
    4214:	1004d63a 	srli	r2,r2,24
    4218:	e0bfffc5 	stb	r2,-1(fp)
    421c:	00800074 	movhi	r2,1
    4220:	10a1ae04 	addi	r2,r2,-31048
    4224:	10800e17 	ldw	r2,56(r2)
    4228:	10800058 	cmpnei	r2,r2,1
    422c:	1000041e 	bne	r2,zero,4240 <alt_sys_init+0x6d4>
    4230:	00800074 	movhi	r2,1
    4234:	10a1ae04 	addi	r2,r2,-31048
    4238:	10001115 	stw	zero,68(r2)
    423c:	00000e06 	br	4278 <alt_sys_init+0x70c>
    4240:	00800074 	movhi	r2,1
    4244:	10a1ae04 	addi	r2,r2,-31048
    4248:	10800e17 	ldw	r2,56(r2)
    424c:	10800098 	cmpnei	r2,r2,2
    4250:	1000051e 	bne	r2,zero,4268 <alt_sys_init+0x6fc>
    4254:	00800074 	movhi	r2,1
    4258:	10a1ae04 	addi	r2,r2,-31048
    425c:	00c00044 	movi	r3,1
    4260:	10c01115 	stw	r3,68(r2)
    4264:	00000406 	br	4278 <alt_sys_init+0x70c>
    4268:	00800074 	movhi	r2,1
    426c:	10a1ae04 	addi	r2,r2,-31048
    4270:	00c00084 	movi	r3,2
    4274:	10c01115 	stw	r3,68(r2)
    4278:	e0bfff83 	ldbu	r2,-2(fp)
    427c:	00c00804 	movi	r3,32
    4280:	1885c83a 	sub	r2,r3,r2
    4284:	00ffffc4 	movi	r3,-1
    4288:	1886d83a 	srl	r3,r3,r2
    428c:	00800074 	movhi	r2,1
    4290:	10a1ae04 	addi	r2,r2,-31048
    4294:	10c01215 	stw	r3,72(r2)
    4298:	e0ffff83 	ldbu	r3,-2(fp)
    429c:	00800074 	movhi	r2,1
    42a0:	10a1ae04 	addi	r2,r2,-31048
    42a4:	10801117 	ldw	r2,68(r2)
    42a8:	1887883a 	add	r3,r3,r2
    42ac:	00800074 	movhi	r2,1
    42b0:	10a1ae04 	addi	r2,r2,-31048
    42b4:	10c01315 	stw	r3,76(r2)
    42b8:	e0bfffc3 	ldbu	r2,-1(fp)
    42bc:	00c00804 	movi	r3,32
    42c0:	1885c83a 	sub	r2,r3,r2
    42c4:	00ffffc4 	movi	r3,-1
    42c8:	1886d83a 	srl	r3,r3,r2
    42cc:	00800074 	movhi	r2,1
    42d0:	10a1ae04 	addi	r2,r2,-31048
    42d4:	10c01415 	stw	r3,80(r2)
    42d8:	01000074 	movhi	r4,1
    42dc:	2121ae04 	addi	r4,r4,-31048
    42e0:	0003b000 	call	3b00 <alt_dev_reg>
}
    42e4:	0001883a 	nop
    42e8:	e037883a 	mov	sp,fp
    42ec:	dfc00117 	ldw	ra,4(sp)
    42f0:	df000017 	ldw	fp,0(sp)
    42f4:	dec00204 	addi	sp,sp,8
    42f8:	f800283a 	ret

000042fc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    42fc:	defffa04 	addi	sp,sp,-24
    4300:	dfc00515 	stw	ra,20(sp)
    4304:	df000415 	stw	fp,16(sp)
    4308:	df000404 	addi	fp,sp,16
    430c:	e13ffd15 	stw	r4,-12(fp)
    4310:	e17ffe15 	stw	r5,-8(fp)
    4314:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4318:	e0bffd17 	ldw	r2,-12(fp)
    431c:	10800017 	ldw	r2,0(r2)
    4320:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    4324:	e0bffc17 	ldw	r2,-16(fp)
    4328:	10c00a04 	addi	r3,r2,40
    432c:	e0bffd17 	ldw	r2,-12(fp)
    4330:	10800217 	ldw	r2,8(r2)
    4334:	100f883a 	mov	r7,r2
    4338:	e1bfff17 	ldw	r6,-4(fp)
    433c:	e17ffe17 	ldw	r5,-8(fp)
    4340:	1809883a 	mov	r4,r3
    4344:	000491c0 	call	491c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    4348:	e037883a 	mov	sp,fp
    434c:	dfc00117 	ldw	ra,4(sp)
    4350:	df000017 	ldw	fp,0(sp)
    4354:	dec00204 	addi	sp,sp,8
    4358:	f800283a 	ret

0000435c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    435c:	defffa04 	addi	sp,sp,-24
    4360:	dfc00515 	stw	ra,20(sp)
    4364:	df000415 	stw	fp,16(sp)
    4368:	df000404 	addi	fp,sp,16
    436c:	e13ffd15 	stw	r4,-12(fp)
    4370:	e17ffe15 	stw	r5,-8(fp)
    4374:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4378:	e0bffd17 	ldw	r2,-12(fp)
    437c:	10800017 	ldw	r2,0(r2)
    4380:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    4384:	e0bffc17 	ldw	r2,-16(fp)
    4388:	10c00a04 	addi	r3,r2,40
    438c:	e0bffd17 	ldw	r2,-12(fp)
    4390:	10800217 	ldw	r2,8(r2)
    4394:	100f883a 	mov	r7,r2
    4398:	e1bfff17 	ldw	r6,-4(fp)
    439c:	e17ffe17 	ldw	r5,-8(fp)
    43a0:	1809883a 	mov	r4,r3
    43a4:	0004b380 	call	4b38 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    43a8:	e037883a 	mov	sp,fp
    43ac:	dfc00117 	ldw	ra,4(sp)
    43b0:	df000017 	ldw	fp,0(sp)
    43b4:	dec00204 	addi	sp,sp,8
    43b8:	f800283a 	ret

000043bc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    43bc:	defffc04 	addi	sp,sp,-16
    43c0:	dfc00315 	stw	ra,12(sp)
    43c4:	df000215 	stw	fp,8(sp)
    43c8:	df000204 	addi	fp,sp,8
    43cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    43d0:	e0bfff17 	ldw	r2,-4(fp)
    43d4:	10800017 	ldw	r2,0(r2)
    43d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    43dc:	e0bffe17 	ldw	r2,-8(fp)
    43e0:	10c00a04 	addi	r3,r2,40
    43e4:	e0bfff17 	ldw	r2,-4(fp)
    43e8:	10800217 	ldw	r2,8(r2)
    43ec:	100b883a 	mov	r5,r2
    43f0:	1809883a 	mov	r4,r3
    43f4:	00047c40 	call	47c4 <altera_avalon_jtag_uart_close>
}
    43f8:	e037883a 	mov	sp,fp
    43fc:	dfc00117 	ldw	ra,4(sp)
    4400:	df000017 	ldw	fp,0(sp)
    4404:	dec00204 	addi	sp,sp,8
    4408:	f800283a 	ret

0000440c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    440c:	defffa04 	addi	sp,sp,-24
    4410:	dfc00515 	stw	ra,20(sp)
    4414:	df000415 	stw	fp,16(sp)
    4418:	df000404 	addi	fp,sp,16
    441c:	e13ffd15 	stw	r4,-12(fp)
    4420:	e17ffe15 	stw	r5,-8(fp)
    4424:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    4428:	e0bffd17 	ldw	r2,-12(fp)
    442c:	10800017 	ldw	r2,0(r2)
    4430:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    4434:	e0bffc17 	ldw	r2,-16(fp)
    4438:	10800a04 	addi	r2,r2,40
    443c:	e1bfff17 	ldw	r6,-4(fp)
    4440:	e17ffe17 	ldw	r5,-8(fp)
    4444:	1009883a 	mov	r4,r2
    4448:	000482c0 	call	482c <altera_avalon_jtag_uart_ioctl>
}
    444c:	e037883a 	mov	sp,fp
    4450:	dfc00117 	ldw	ra,4(sp)
    4454:	df000017 	ldw	fp,0(sp)
    4458:	dec00204 	addi	sp,sp,8
    445c:	f800283a 	ret

00004460 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    4460:	defffb04 	addi	sp,sp,-20
    4464:	dfc00415 	stw	ra,16(sp)
    4468:	df000315 	stw	fp,12(sp)
    446c:	df000304 	addi	fp,sp,12
    4470:	e13ffd15 	stw	r4,-12(fp)
    4474:	e17ffe15 	stw	r5,-8(fp)
    4478:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    447c:	e0bffd17 	ldw	r2,-12(fp)
    4480:	00c00044 	movi	r3,1
    4484:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    4488:	e0bffd17 	ldw	r2,-12(fp)
    448c:	10800017 	ldw	r2,0(r2)
    4490:	10800104 	addi	r2,r2,4
    4494:	1007883a 	mov	r3,r2
    4498:	e0bffd17 	ldw	r2,-12(fp)
    449c:	10800817 	ldw	r2,32(r2)
    44a0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    44a4:	e0bfff17 	ldw	r2,-4(fp)
    44a8:	01800034 	movhi	r6,0
    44ac:	31914504 	addi	r6,r6,17684
    44b0:	e17ffd17 	ldw	r5,-12(fp)
    44b4:	1009883a 	mov	r4,r2
    44b8:	0005d780 	call	5d78 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    44bc:	e0bffd17 	ldw	r2,-12(fp)
    44c0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    44c4:	e0bffd17 	ldw	r2,-12(fp)
    44c8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    44cc:	d0e74417 	ldw	r3,-25328(gp)
    44d0:	e1fffd17 	ldw	r7,-12(fp)
    44d4:	01800034 	movhi	r6,0
    44d8:	3191c904 	addi	r6,r6,18212
    44dc:	180b883a 	mov	r5,r3
    44e0:	1009883a 	mov	r4,r2
    44e4:	00058880 	call	5888 <alt_alarm_start>
    44e8:	1000040e 	bge	r2,zero,44fc <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    44ec:	e0fffd17 	ldw	r3,-12(fp)
    44f0:	00a00034 	movhi	r2,32768
    44f4:	10bfffc4 	addi	r2,r2,-1
    44f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    44fc:	0001883a 	nop
    4500:	e037883a 	mov	sp,fp
    4504:	dfc00117 	ldw	ra,4(sp)
    4508:	df000017 	ldw	fp,0(sp)
    450c:	dec00204 	addi	sp,sp,8
    4510:	f800283a 	ret

00004514 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    4514:	defff704 	addi	sp,sp,-36
    4518:	df000815 	stw	fp,32(sp)
    451c:	df000804 	addi	fp,sp,32
    4520:	e13ffe15 	stw	r4,-8(fp)
    4524:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    4528:	e0bffe17 	ldw	r2,-8(fp)
    452c:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
    4530:	e0bffa17 	ldw	r2,-24(fp)
    4534:	10800017 	ldw	r2,0(r2)
    4538:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    453c:	e0bffb17 	ldw	r2,-20(fp)
    4540:	10800104 	addi	r2,r2,4
    4544:	10800037 	ldwio	r2,0(r2)
    4548:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    454c:	e0bffc17 	ldw	r2,-16(fp)
    4550:	1080c00c 	andi	r2,r2,768
    4554:	10006d26 	beq	r2,zero,470c <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    4558:	e0bffc17 	ldw	r2,-16(fp)
    455c:	1080400c 	andi	r2,r2,256
    4560:	10003526 	beq	r2,zero,4638 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    4564:	00800074 	movhi	r2,1
    4568:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    456c:	e0bffa17 	ldw	r2,-24(fp)
    4570:	10800a17 	ldw	r2,40(r2)
    4574:	10800044 	addi	r2,r2,1
    4578:	1081ffcc 	andi	r2,r2,2047
    457c:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
    4580:	e0bffa17 	ldw	r2,-24(fp)
    4584:	10c00b17 	ldw	r3,44(r2)
    4588:	e0bffd17 	ldw	r2,-12(fp)
    458c:	18801526 	beq	r3,r2,45e4 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    4590:	e0bffb17 	ldw	r2,-20(fp)
    4594:	10800037 	ldwio	r2,0(r2)
    4598:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    459c:	e0bff817 	ldw	r2,-32(fp)
    45a0:	10a0000c 	andi	r2,r2,32768
    45a4:	10001126 	beq	r2,zero,45ec <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    45a8:	e0bffa17 	ldw	r2,-24(fp)
    45ac:	10800a17 	ldw	r2,40(r2)
    45b0:	e0fff817 	ldw	r3,-32(fp)
    45b4:	1809883a 	mov	r4,r3
    45b8:	e0fffa17 	ldw	r3,-24(fp)
    45bc:	1885883a 	add	r2,r3,r2
    45c0:	10800e04 	addi	r2,r2,56
    45c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    45c8:	e0bffa17 	ldw	r2,-24(fp)
    45cc:	10800a17 	ldw	r2,40(r2)
    45d0:	10800044 	addi	r2,r2,1
    45d4:	10c1ffcc 	andi	r3,r2,2047
    45d8:	e0bffa17 	ldw	r2,-24(fp)
    45dc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    45e0:	003fe206 	br	456c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000456c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    45e4:	0001883a 	nop
    45e8:	00000106 	br	45f0 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    45ec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    45f0:	e0bff817 	ldw	r2,-32(fp)
    45f4:	10bfffec 	andhi	r2,r2,65535
    45f8:	10000f26 	beq	r2,zero,4638 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    45fc:	e0bffa17 	ldw	r2,-24(fp)
    4600:	10c00817 	ldw	r3,32(r2)
    4604:	00bfff84 	movi	r2,-2
    4608:	1886703a 	and	r3,r3,r2
    460c:	e0bffa17 	ldw	r2,-24(fp)
    4610:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    4614:	e0bffb17 	ldw	r2,-20(fp)
    4618:	10800104 	addi	r2,r2,4
    461c:	1007883a 	mov	r3,r2
    4620:	e0bffa17 	ldw	r2,-24(fp)
    4624:	10800817 	ldw	r2,32(r2)
    4628:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    462c:	e0bffb17 	ldw	r2,-20(fp)
    4630:	10800104 	addi	r2,r2,4
    4634:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    4638:	e0bffc17 	ldw	r2,-16(fp)
    463c:	1080800c 	andi	r2,r2,512
    4640:	103fbe26 	beq	r2,zero,453c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000453c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    4644:	e0bffc17 	ldw	r2,-16(fp)
    4648:	1004d43a 	srli	r2,r2,16
    464c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    4650:	00001406 	br	46a4 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    4654:	e0bffb17 	ldw	r2,-20(fp)
    4658:	e0fffa17 	ldw	r3,-24(fp)
    465c:	18c00d17 	ldw	r3,52(r3)
    4660:	e13ffa17 	ldw	r4,-24(fp)
    4664:	20c7883a 	add	r3,r4,r3
    4668:	18c20e04 	addi	r3,r3,2104
    466c:	18c00003 	ldbu	r3,0(r3)
    4670:	18c03fcc 	andi	r3,r3,255
    4674:	18c0201c 	xori	r3,r3,128
    4678:	18ffe004 	addi	r3,r3,-128
    467c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4680:	e0bffa17 	ldw	r2,-24(fp)
    4684:	10800d17 	ldw	r2,52(r2)
    4688:	10800044 	addi	r2,r2,1
    468c:	10c1ffcc 	andi	r3,r2,2047
    4690:	e0bffa17 	ldw	r2,-24(fp)
    4694:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    4698:	e0bff917 	ldw	r2,-28(fp)
    469c:	10bfffc4 	addi	r2,r2,-1
    46a0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    46a4:	e0bff917 	ldw	r2,-28(fp)
    46a8:	10000526 	beq	r2,zero,46c0 <altera_avalon_jtag_uart_irq+0x1ac>
    46ac:	e0bffa17 	ldw	r2,-24(fp)
    46b0:	10c00d17 	ldw	r3,52(r2)
    46b4:	e0bffa17 	ldw	r2,-24(fp)
    46b8:	10800c17 	ldw	r2,48(r2)
    46bc:	18bfe51e 	bne	r3,r2,4654 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0004654>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    46c0:	e0bff917 	ldw	r2,-28(fp)
    46c4:	103f9d26 	beq	r2,zero,453c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000453c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    46c8:	e0bffa17 	ldw	r2,-24(fp)
    46cc:	10c00817 	ldw	r3,32(r2)
    46d0:	00bfff44 	movi	r2,-3
    46d4:	1886703a 	and	r3,r3,r2
    46d8:	e0bffa17 	ldw	r2,-24(fp)
    46dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    46e0:	e0bffa17 	ldw	r2,-24(fp)
    46e4:	10800017 	ldw	r2,0(r2)
    46e8:	10800104 	addi	r2,r2,4
    46ec:	1007883a 	mov	r3,r2
    46f0:	e0bffa17 	ldw	r2,-24(fp)
    46f4:	10800817 	ldw	r2,32(r2)
    46f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    46fc:	e0bffb17 	ldw	r2,-20(fp)
    4700:	10800104 	addi	r2,r2,4
    4704:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    4708:	003f8c06 	br	453c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000453c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    470c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    4710:	0001883a 	nop
    4714:	e037883a 	mov	sp,fp
    4718:	df000017 	ldw	fp,0(sp)
    471c:	dec00104 	addi	sp,sp,4
    4720:	f800283a 	ret

00004724 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    4724:	defff804 	addi	sp,sp,-32
    4728:	df000715 	stw	fp,28(sp)
    472c:	df000704 	addi	fp,sp,28
    4730:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    4734:	e0bffb17 	ldw	r2,-20(fp)
    4738:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    473c:	e0bff917 	ldw	r2,-28(fp)
    4740:	10800017 	ldw	r2,0(r2)
    4744:	10800104 	addi	r2,r2,4
    4748:	10800037 	ldwio	r2,0(r2)
    474c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    4750:	e0bffa17 	ldw	r2,-24(fp)
    4754:	1081000c 	andi	r2,r2,1024
    4758:	10000b26 	beq	r2,zero,4788 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    475c:	e0bff917 	ldw	r2,-28(fp)
    4760:	10800017 	ldw	r2,0(r2)
    4764:	10800104 	addi	r2,r2,4
    4768:	1007883a 	mov	r3,r2
    476c:	e0bff917 	ldw	r2,-28(fp)
    4770:	10800817 	ldw	r2,32(r2)
    4774:	10810014 	ori	r2,r2,1024
    4778:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    477c:	e0bff917 	ldw	r2,-28(fp)
    4780:	10000915 	stw	zero,36(r2)
    4784:	00000a06 	br	47b0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    4788:	e0bff917 	ldw	r2,-28(fp)
    478c:	10c00917 	ldw	r3,36(r2)
    4790:	00a00034 	movhi	r2,32768
    4794:	10bfff04 	addi	r2,r2,-4
    4798:	10c00536 	bltu	r2,r3,47b0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    479c:	e0bff917 	ldw	r2,-28(fp)
    47a0:	10800917 	ldw	r2,36(r2)
    47a4:	10c00044 	addi	r3,r2,1
    47a8:	e0bff917 	ldw	r2,-28(fp)
    47ac:	10c00915 	stw	r3,36(r2)
    47b0:	d0a74417 	ldw	r2,-25328(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    47b4:	e037883a 	mov	sp,fp
    47b8:	df000017 	ldw	fp,0(sp)
    47bc:	dec00104 	addi	sp,sp,4
    47c0:	f800283a 	ret

000047c4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    47c4:	defffd04 	addi	sp,sp,-12
    47c8:	df000215 	stw	fp,8(sp)
    47cc:	df000204 	addi	fp,sp,8
    47d0:	e13ffe15 	stw	r4,-8(fp)
    47d4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    47d8:	00000506 	br	47f0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    47dc:	e0bfff17 	ldw	r2,-4(fp)
    47e0:	1090000c 	andi	r2,r2,16384
    47e4:	10000226 	beq	r2,zero,47f0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    47e8:	00bffd44 	movi	r2,-11
    47ec:	00000b06 	br	481c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    47f0:	e0bffe17 	ldw	r2,-8(fp)
    47f4:	10c00d17 	ldw	r3,52(r2)
    47f8:	e0bffe17 	ldw	r2,-8(fp)
    47fc:	10800c17 	ldw	r2,48(r2)
    4800:	18800526 	beq	r3,r2,4818 <altera_avalon_jtag_uart_close+0x54>
    4804:	e0bffe17 	ldw	r2,-8(fp)
    4808:	10c00917 	ldw	r3,36(r2)
    480c:	e0bffe17 	ldw	r2,-8(fp)
    4810:	10800117 	ldw	r2,4(r2)
    4814:	18bff136 	bltu	r3,r2,47dc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00047dc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    4818:	0005883a 	mov	r2,zero
}
    481c:	e037883a 	mov	sp,fp
    4820:	df000017 	ldw	fp,0(sp)
    4824:	dec00104 	addi	sp,sp,4
    4828:	f800283a 	ret

0000482c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    482c:	defffa04 	addi	sp,sp,-24
    4830:	df000515 	stw	fp,20(sp)
    4834:	df000504 	addi	fp,sp,20
    4838:	e13ffd15 	stw	r4,-12(fp)
    483c:	e17ffe15 	stw	r5,-8(fp)
    4840:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    4844:	00bff9c4 	movi	r2,-25
    4848:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    484c:	e0bffe17 	ldw	r2,-8(fp)
    4850:	10da8060 	cmpeqi	r3,r2,27137
    4854:	1800031e 	bne	r3,zero,4864 <altera_avalon_jtag_uart_ioctl+0x38>
    4858:	109a80a0 	cmpeqi	r2,r2,27138
    485c:	1000181e 	bne	r2,zero,48c0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    4860:	00002906 	br	4908 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    4864:	e0bffd17 	ldw	r2,-12(fp)
    4868:	10c00117 	ldw	r3,4(r2)
    486c:	00a00034 	movhi	r2,32768
    4870:	10bfffc4 	addi	r2,r2,-1
    4874:	18802126 	beq	r3,r2,48fc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    4878:	e0bfff17 	ldw	r2,-4(fp)
    487c:	10800017 	ldw	r2,0(r2)
    4880:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    4884:	e0bffc17 	ldw	r2,-16(fp)
    4888:	10800090 	cmplti	r2,r2,2
    488c:	1000061e 	bne	r2,zero,48a8 <altera_avalon_jtag_uart_ioctl+0x7c>
    4890:	e0fffc17 	ldw	r3,-16(fp)
    4894:	00a00034 	movhi	r2,32768
    4898:	10bfffc4 	addi	r2,r2,-1
    489c:	18800226 	beq	r3,r2,48a8 <altera_avalon_jtag_uart_ioctl+0x7c>
    48a0:	e0bffc17 	ldw	r2,-16(fp)
    48a4:	00000206 	br	48b0 <altera_avalon_jtag_uart_ioctl+0x84>
    48a8:	00a00034 	movhi	r2,32768
    48ac:	10bfff84 	addi	r2,r2,-2
    48b0:	e0fffd17 	ldw	r3,-12(fp)
    48b4:	18800115 	stw	r2,4(r3)
      rc = 0;
    48b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    48bc:	00000f06 	br	48fc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    48c0:	e0bffd17 	ldw	r2,-12(fp)
    48c4:	10c00117 	ldw	r3,4(r2)
    48c8:	00a00034 	movhi	r2,32768
    48cc:	10bfffc4 	addi	r2,r2,-1
    48d0:	18800c26 	beq	r3,r2,4904 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    48d4:	e0bffd17 	ldw	r2,-12(fp)
    48d8:	10c00917 	ldw	r3,36(r2)
    48dc:	e0bffd17 	ldw	r2,-12(fp)
    48e0:	10800117 	ldw	r2,4(r2)
    48e4:	1885803a 	cmpltu	r2,r3,r2
    48e8:	10c03fcc 	andi	r3,r2,255
    48ec:	e0bfff17 	ldw	r2,-4(fp)
    48f0:	10c00015 	stw	r3,0(r2)
      rc = 0;
    48f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    48f8:	00000206 	br	4904 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    48fc:	0001883a 	nop
    4900:	00000106 	br	4908 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    4904:	0001883a 	nop

  default:
    break;
  }

  return rc;
    4908:	e0bffb17 	ldw	r2,-20(fp)
}
    490c:	e037883a 	mov	sp,fp
    4910:	df000017 	ldw	fp,0(sp)
    4914:	dec00104 	addi	sp,sp,4
    4918:	f800283a 	ret

0000491c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    491c:	defff304 	addi	sp,sp,-52
    4920:	dfc00c15 	stw	ra,48(sp)
    4924:	df000b15 	stw	fp,44(sp)
    4928:	df000b04 	addi	fp,sp,44
    492c:	e13ffc15 	stw	r4,-16(fp)
    4930:	e17ffd15 	stw	r5,-12(fp)
    4934:	e1bffe15 	stw	r6,-8(fp)
    4938:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    493c:	e0bffd17 	ldw	r2,-12(fp)
    4940:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4944:	00004706 	br	4a64 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    4948:	e0bffc17 	ldw	r2,-16(fp)
    494c:	10800a17 	ldw	r2,40(r2)
    4950:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    4954:	e0bffc17 	ldw	r2,-16(fp)
    4958:	10800b17 	ldw	r2,44(r2)
    495c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    4960:	e0fff717 	ldw	r3,-36(fp)
    4964:	e0bff817 	ldw	r2,-32(fp)
    4968:	18800536 	bltu	r3,r2,4980 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    496c:	e0fff717 	ldw	r3,-36(fp)
    4970:	e0bff817 	ldw	r2,-32(fp)
    4974:	1885c83a 	sub	r2,r3,r2
    4978:	e0bff615 	stw	r2,-40(fp)
    497c:	00000406 	br	4990 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    4980:	00c20004 	movi	r3,2048
    4984:	e0bff817 	ldw	r2,-32(fp)
    4988:	1885c83a 	sub	r2,r3,r2
    498c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    4990:	e0bff617 	ldw	r2,-40(fp)
    4994:	10001e26 	beq	r2,zero,4a10 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    4998:	e0fffe17 	ldw	r3,-8(fp)
    499c:	e0bff617 	ldw	r2,-40(fp)
    49a0:	1880022e 	bgeu	r3,r2,49ac <altera_avalon_jtag_uart_read+0x90>
        n = space;
    49a4:	e0bffe17 	ldw	r2,-8(fp)
    49a8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    49ac:	e0bffc17 	ldw	r2,-16(fp)
    49b0:	10c00e04 	addi	r3,r2,56
    49b4:	e0bff817 	ldw	r2,-32(fp)
    49b8:	1885883a 	add	r2,r3,r2
    49bc:	e1bff617 	ldw	r6,-40(fp)
    49c0:	100b883a 	mov	r5,r2
    49c4:	e13ff517 	ldw	r4,-44(fp)
    49c8:	00018340 	call	1834 <memcpy>
      ptr   += n;
    49cc:	e0fff517 	ldw	r3,-44(fp)
    49d0:	e0bff617 	ldw	r2,-40(fp)
    49d4:	1885883a 	add	r2,r3,r2
    49d8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    49dc:	e0fffe17 	ldw	r3,-8(fp)
    49e0:	e0bff617 	ldw	r2,-40(fp)
    49e4:	1885c83a 	sub	r2,r3,r2
    49e8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    49ec:	e0fff817 	ldw	r3,-32(fp)
    49f0:	e0bff617 	ldw	r2,-40(fp)
    49f4:	1885883a 	add	r2,r3,r2
    49f8:	10c1ffcc 	andi	r3,r2,2047
    49fc:	e0bffc17 	ldw	r2,-16(fp)
    4a00:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    4a04:	e0bffe17 	ldw	r2,-8(fp)
    4a08:	00bfcf16 	blt	zero,r2,4948 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0004948>
    4a0c:	00000106 	br	4a14 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    4a10:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    4a14:	e0fff517 	ldw	r3,-44(fp)
    4a18:	e0bffd17 	ldw	r2,-12(fp)
    4a1c:	1880141e 	bne	r3,r2,4a70 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    4a20:	e0bfff17 	ldw	r2,-4(fp)
    4a24:	1090000c 	andi	r2,r2,16384
    4a28:	1000131e 	bne	r2,zero,4a78 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    4a2c:	0001883a 	nop
    4a30:	e0bffc17 	ldw	r2,-16(fp)
    4a34:	10c00a17 	ldw	r3,40(r2)
    4a38:	e0bff717 	ldw	r2,-36(fp)
    4a3c:	1880051e 	bne	r3,r2,4a54 <altera_avalon_jtag_uart_read+0x138>
    4a40:	e0bffc17 	ldw	r2,-16(fp)
    4a44:	10c00917 	ldw	r3,36(r2)
    4a48:	e0bffc17 	ldw	r2,-16(fp)
    4a4c:	10800117 	ldw	r2,4(r2)
    4a50:	18bff736 	bltu	r3,r2,4a30 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0004a30>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    4a54:	e0bffc17 	ldw	r2,-16(fp)
    4a58:	10c00a17 	ldw	r3,40(r2)
    4a5c:	e0bff717 	ldw	r2,-36(fp)
    4a60:	18800726 	beq	r3,r2,4a80 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    4a64:	e0bffe17 	ldw	r2,-8(fp)
    4a68:	00bfb716 	blt	zero,r2,4948 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0004948>
    4a6c:	00000506 	br	4a84 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    4a70:	0001883a 	nop
    4a74:	00000306 	br	4a84 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    4a78:	0001883a 	nop
    4a7c:	00000106 	br	4a84 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    4a80:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    4a84:	e0fff517 	ldw	r3,-44(fp)
    4a88:	e0bffd17 	ldw	r2,-12(fp)
    4a8c:	18801826 	beq	r3,r2,4af0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a90:	0005303a 	rdctl	r2,status
    4a94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a98:	e0fffb17 	ldw	r3,-20(fp)
    4a9c:	00bfff84 	movi	r2,-2
    4aa0:	1884703a 	and	r2,r3,r2
    4aa4:	1001703a 	wrctl	status,r2
  
  return context;
    4aa8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    4aac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4ab0:	e0bffc17 	ldw	r2,-16(fp)
    4ab4:	10800817 	ldw	r2,32(r2)
    4ab8:	10c00054 	ori	r3,r2,1
    4abc:	e0bffc17 	ldw	r2,-16(fp)
    4ac0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4ac4:	e0bffc17 	ldw	r2,-16(fp)
    4ac8:	10800017 	ldw	r2,0(r2)
    4acc:	10800104 	addi	r2,r2,4
    4ad0:	1007883a 	mov	r3,r2
    4ad4:	e0bffc17 	ldw	r2,-16(fp)
    4ad8:	10800817 	ldw	r2,32(r2)
    4adc:	18800035 	stwio	r2,0(r3)
    4ae0:	e0bffa17 	ldw	r2,-24(fp)
    4ae4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4ae8:	e0bff917 	ldw	r2,-28(fp)
    4aec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    4af0:	e0fff517 	ldw	r3,-44(fp)
    4af4:	e0bffd17 	ldw	r2,-12(fp)
    4af8:	18800426 	beq	r3,r2,4b0c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    4afc:	e0fff517 	ldw	r3,-44(fp)
    4b00:	e0bffd17 	ldw	r2,-12(fp)
    4b04:	1885c83a 	sub	r2,r3,r2
    4b08:	00000606 	br	4b24 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    4b0c:	e0bfff17 	ldw	r2,-4(fp)
    4b10:	1090000c 	andi	r2,r2,16384
    4b14:	10000226 	beq	r2,zero,4b20 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    4b18:	00bffd44 	movi	r2,-11
    4b1c:	00000106 	br	4b24 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    4b20:	00bffec4 	movi	r2,-5
}
    4b24:	e037883a 	mov	sp,fp
    4b28:	dfc00117 	ldw	ra,4(sp)
    4b2c:	df000017 	ldw	fp,0(sp)
    4b30:	dec00204 	addi	sp,sp,8
    4b34:	f800283a 	ret

00004b38 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4b38:	defff304 	addi	sp,sp,-52
    4b3c:	dfc00c15 	stw	ra,48(sp)
    4b40:	df000b15 	stw	fp,44(sp)
    4b44:	df000b04 	addi	fp,sp,44
    4b48:	e13ffc15 	stw	r4,-16(fp)
    4b4c:	e17ffd15 	stw	r5,-12(fp)
    4b50:	e1bffe15 	stw	r6,-8(fp)
    4b54:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    4b58:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    4b5c:	e0bffd17 	ldw	r2,-12(fp)
    4b60:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4b64:	00003706 	br	4c44 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    4b68:	e0bffc17 	ldw	r2,-16(fp)
    4b6c:	10800c17 	ldw	r2,48(r2)
    4b70:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    4b74:	e0bffc17 	ldw	r2,-16(fp)
    4b78:	10800d17 	ldw	r2,52(r2)
    4b7c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    4b80:	e0fff917 	ldw	r3,-28(fp)
    4b84:	e0bff517 	ldw	r2,-44(fp)
    4b88:	1880062e 	bgeu	r3,r2,4ba4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    4b8c:	e0fff517 	ldw	r3,-44(fp)
    4b90:	e0bff917 	ldw	r2,-28(fp)
    4b94:	1885c83a 	sub	r2,r3,r2
    4b98:	10bfffc4 	addi	r2,r2,-1
    4b9c:	e0bff615 	stw	r2,-40(fp)
    4ba0:	00000b06 	br	4bd0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    4ba4:	e0bff517 	ldw	r2,-44(fp)
    4ba8:	10000526 	beq	r2,zero,4bc0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    4bac:	00c20004 	movi	r3,2048
    4bb0:	e0bff917 	ldw	r2,-28(fp)
    4bb4:	1885c83a 	sub	r2,r3,r2
    4bb8:	e0bff615 	stw	r2,-40(fp)
    4bbc:	00000406 	br	4bd0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    4bc0:	00c1ffc4 	movi	r3,2047
    4bc4:	e0bff917 	ldw	r2,-28(fp)
    4bc8:	1885c83a 	sub	r2,r3,r2
    4bcc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    4bd0:	e0bff617 	ldw	r2,-40(fp)
    4bd4:	10001e26 	beq	r2,zero,4c50 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    4bd8:	e0fffe17 	ldw	r3,-8(fp)
    4bdc:	e0bff617 	ldw	r2,-40(fp)
    4be0:	1880022e 	bgeu	r3,r2,4bec <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    4be4:	e0bffe17 	ldw	r2,-8(fp)
    4be8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    4bec:	e0bffc17 	ldw	r2,-16(fp)
    4bf0:	10c20e04 	addi	r3,r2,2104
    4bf4:	e0bff917 	ldw	r2,-28(fp)
    4bf8:	1885883a 	add	r2,r3,r2
    4bfc:	e1bff617 	ldw	r6,-40(fp)
    4c00:	e17ffd17 	ldw	r5,-12(fp)
    4c04:	1009883a 	mov	r4,r2
    4c08:	00018340 	call	1834 <memcpy>
      ptr   += n;
    4c0c:	e0fffd17 	ldw	r3,-12(fp)
    4c10:	e0bff617 	ldw	r2,-40(fp)
    4c14:	1885883a 	add	r2,r3,r2
    4c18:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    4c1c:	e0fffe17 	ldw	r3,-8(fp)
    4c20:	e0bff617 	ldw	r2,-40(fp)
    4c24:	1885c83a 	sub	r2,r3,r2
    4c28:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4c2c:	e0fff917 	ldw	r3,-28(fp)
    4c30:	e0bff617 	ldw	r2,-40(fp)
    4c34:	1885883a 	add	r2,r3,r2
    4c38:	10c1ffcc 	andi	r3,r2,2047
    4c3c:	e0bffc17 	ldw	r2,-16(fp)
    4c40:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4c44:	e0bffe17 	ldw	r2,-8(fp)
    4c48:	00bfc716 	blt	zero,r2,4b68 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0004b68>
    4c4c:	00000106 	br	4c54 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    4c50:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4c54:	0005303a 	rdctl	r2,status
    4c58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c5c:	e0fffb17 	ldw	r3,-20(fp)
    4c60:	00bfff84 	movi	r2,-2
    4c64:	1884703a 	and	r2,r3,r2
    4c68:	1001703a 	wrctl	status,r2
  
  return context;
    4c6c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    4c70:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4c74:	e0bffc17 	ldw	r2,-16(fp)
    4c78:	10800817 	ldw	r2,32(r2)
    4c7c:	10c00094 	ori	r3,r2,2
    4c80:	e0bffc17 	ldw	r2,-16(fp)
    4c84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4c88:	e0bffc17 	ldw	r2,-16(fp)
    4c8c:	10800017 	ldw	r2,0(r2)
    4c90:	10800104 	addi	r2,r2,4
    4c94:	1007883a 	mov	r3,r2
    4c98:	e0bffc17 	ldw	r2,-16(fp)
    4c9c:	10800817 	ldw	r2,32(r2)
    4ca0:	18800035 	stwio	r2,0(r3)
    4ca4:	e0bffa17 	ldw	r2,-24(fp)
    4ca8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4cac:	e0bff817 	ldw	r2,-32(fp)
    4cb0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    4cb4:	e0bffe17 	ldw	r2,-8(fp)
    4cb8:	0080100e 	bge	zero,r2,4cfc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    4cbc:	e0bfff17 	ldw	r2,-4(fp)
    4cc0:	1090000c 	andi	r2,r2,16384
    4cc4:	1000101e 	bne	r2,zero,4d08 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    4cc8:	0001883a 	nop
    4ccc:	e0bffc17 	ldw	r2,-16(fp)
    4cd0:	10c00d17 	ldw	r3,52(r2)
    4cd4:	e0bff517 	ldw	r2,-44(fp)
    4cd8:	1880051e 	bne	r3,r2,4cf0 <altera_avalon_jtag_uart_write+0x1b8>
    4cdc:	e0bffc17 	ldw	r2,-16(fp)
    4ce0:	10c00917 	ldw	r3,36(r2)
    4ce4:	e0bffc17 	ldw	r2,-16(fp)
    4ce8:	10800117 	ldw	r2,4(r2)
    4cec:	18bff736 	bltu	r3,r2,4ccc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0004ccc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    4cf0:	e0bffc17 	ldw	r2,-16(fp)
    4cf4:	10800917 	ldw	r2,36(r2)
    4cf8:	1000051e 	bne	r2,zero,4d10 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    4cfc:	e0bffe17 	ldw	r2,-8(fp)
    4d00:	00bfd016 	blt	zero,r2,4c44 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0004c44>
    4d04:	00000306 	br	4d14 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    4d08:	0001883a 	nop
    4d0c:	00000106 	br	4d14 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    4d10:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    4d14:	e0fffd17 	ldw	r3,-12(fp)
    4d18:	e0bff717 	ldw	r2,-36(fp)
    4d1c:	18800426 	beq	r3,r2,4d30 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    4d20:	e0fffd17 	ldw	r3,-12(fp)
    4d24:	e0bff717 	ldw	r2,-36(fp)
    4d28:	1885c83a 	sub	r2,r3,r2
    4d2c:	00000606 	br	4d48 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    4d30:	e0bfff17 	ldw	r2,-4(fp)
    4d34:	1090000c 	andi	r2,r2,16384
    4d38:	10000226 	beq	r2,zero,4d44 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    4d3c:	00bffd44 	movi	r2,-11
    4d40:	00000106 	br	4d48 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    4d44:	00bffec4 	movi	r2,-5
}
    4d48:	e037883a 	mov	sp,fp
    4d4c:	dfc00117 	ldw	ra,4(sp)
    4d50:	df000017 	ldw	fp,0(sp)
    4d54:	dec00204 	addi	sp,sp,8
    4d58:	f800283a 	ret

00004d5c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    4d5c:	defff904 	addi	sp,sp,-28
    4d60:	dfc00615 	stw	ra,24(sp)
    4d64:	df000515 	stw	fp,20(sp)
    4d68:	df000504 	addi	fp,sp,20
    4d6c:	e13ffe15 	stw	r4,-8(fp)
    4d70:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    4d74:	0007883a 	mov	r3,zero
    4d78:	e0bffe17 	ldw	r2,-8(fp)
    4d7c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    4d80:	e0bffe17 	ldw	r2,-8(fp)
    4d84:	10800104 	addi	r2,r2,4
    4d88:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4d8c:	0005303a 	rdctl	r2,status
    4d90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4d94:	e0fffc17 	ldw	r3,-16(fp)
    4d98:	00bfff84 	movi	r2,-2
    4d9c:	1884703a 	and	r2,r3,r2
    4da0:	1001703a 	wrctl	status,r2
  
  return context;
    4da4:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    4da8:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    4dac:	00061e80 	call	61e8 <alt_tick>
    4db0:	e0bffb17 	ldw	r2,-20(fp)
    4db4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4db8:	e0bffd17 	ldw	r2,-12(fp)
    4dbc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    4dc0:	0001883a 	nop
    4dc4:	e037883a 	mov	sp,fp
    4dc8:	dfc00117 	ldw	ra,4(sp)
    4dcc:	df000017 	ldw	fp,0(sp)
    4dd0:	dec00204 	addi	sp,sp,8
    4dd4:	f800283a 	ret

00004dd8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    4dd8:	defff904 	addi	sp,sp,-28
    4ddc:	dfc00615 	stw	ra,24(sp)
    4de0:	df000515 	stw	fp,20(sp)
    4de4:	df000504 	addi	fp,sp,20
    4de8:	e13ffc15 	stw	r4,-16(fp)
    4dec:	e17ffd15 	stw	r5,-12(fp)
    4df0:	e1bffe15 	stw	r6,-8(fp)
    4df4:	e1ffff15 	stw	r7,-4(fp)
    4df8:	e0bfff17 	ldw	r2,-4(fp)
    4dfc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    4e00:	d0a74417 	ldw	r2,-25328(gp)
    4e04:	1000021e 	bne	r2,zero,4e10 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    4e08:	e0bffb17 	ldw	r2,-20(fp)
    4e0c:	d0a74415 	stw	r2,-25328(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    4e10:	e0bffc17 	ldw	r2,-16(fp)
    4e14:	10800104 	addi	r2,r2,4
    4e18:	00c001c4 	movi	r3,7
    4e1c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    4e20:	01800034 	movhi	r6,0
    4e24:	31935704 	addi	r6,r6,19804
    4e28:	e17ffc17 	ldw	r5,-16(fp)
    4e2c:	e13ffe17 	ldw	r4,-8(fp)
    4e30:	0005d780 	call	5d78 <alt_irq_register>
#endif  
}
    4e34:	0001883a 	nop
    4e38:	e037883a 	mov	sp,fp
    4e3c:	dfc00117 	ldw	ra,4(sp)
    4e40:	df000017 	ldw	fp,0(sp)
    4e44:	dec00204 	addi	sp,sp,8
    4e48:	f800283a 	ret

00004e4c <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    4e4c:	defffd04 	addi	sp,sp,-12
    4e50:	df000215 	stw	fp,8(sp)
    4e54:	df000204 	addi	fp,sp,8
    4e58:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    4e5c:	e0bfff17 	ldw	r2,-4(fp)
    4e60:	10800a17 	ldw	r2,40(r2)
    4e64:	10800104 	addi	r2,r2,4
    4e68:	10800037 	ldwio	r2,0(r2)
    4e6c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    4e70:	e0bffe17 	ldw	r2,-8(fp)
    4e74:	10800054 	ori	r2,r2,1
    4e78:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    4e7c:	e0bfff17 	ldw	r2,-4(fp)
    4e80:	10800a17 	ldw	r2,40(r2)
    4e84:	10800104 	addi	r2,r2,4
    4e88:	1007883a 	mov	r3,r2
    4e8c:	e0bffe17 	ldw	r2,-8(fp)
    4e90:	18800035 	stwio	r2,0(r3)
}
    4e94:	0001883a 	nop
    4e98:	e037883a 	mov	sp,fp
    4e9c:	df000017 	ldw	fp,0(sp)
    4ea0:	dec00104 	addi	sp,sp,4
    4ea4:	f800283a 	ret

00004ea8 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    4ea8:	defffd04 	addi	sp,sp,-12
    4eac:	df000215 	stw	fp,8(sp)
    4eb0:	df000204 	addi	fp,sp,8
    4eb4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    4eb8:	e0bfff17 	ldw	r2,-4(fp)
    4ebc:	10800a17 	ldw	r2,40(r2)
    4ec0:	10800104 	addi	r2,r2,4
    4ec4:	10800037 	ldwio	r2,0(r2)
    4ec8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    4ecc:	e0fffe17 	ldw	r3,-8(fp)
    4ed0:	00bfff84 	movi	r2,-2
    4ed4:	1884703a 	and	r2,r3,r2
    4ed8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    4edc:	e0bfff17 	ldw	r2,-4(fp)
    4ee0:	10800a17 	ldw	r2,40(r2)
    4ee4:	10800104 	addi	r2,r2,4
    4ee8:	1007883a 	mov	r3,r2
    4eec:	e0bffe17 	ldw	r2,-8(fp)
    4ef0:	18800035 	stwio	r2,0(r3)
}
    4ef4:	0001883a 	nop
    4ef8:	e037883a 	mov	sp,fp
    4efc:	df000017 	ldw	fp,0(sp)
    4f00:	dec00104 	addi	sp,sp,4
    4f04:	f800283a 	ret

00004f08 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    4f08:	defffd04 	addi	sp,sp,-12
    4f0c:	df000215 	stw	fp,8(sp)
    4f10:	df000204 	addi	fp,sp,8
    4f14:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    4f18:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    4f1c:	e0bfff17 	ldw	r2,-4(fp)
    4f20:	10800a17 	ldw	r2,40(r2)
    4f24:	10800084 	addi	r2,r2,2
    4f28:	1080002b 	ldhuio	r2,0(r2)
    4f2c:	10bfffcc 	andi	r2,r2,65535
    4f30:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    4f34:	e0bffe0b 	ldhu	r2,-8(fp)
}
    4f38:	e037883a 	mov	sp,fp
    4f3c:	df000017 	ldw	fp,0(sp)
    4f40:	dec00104 	addi	sp,sp,4
    4f44:	f800283a 	ret

00004f48 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    4f48:	defffd04 	addi	sp,sp,-12
    4f4c:	df000215 	stw	fp,8(sp)
    4f50:	df000204 	addi	fp,sp,8
    4f54:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    4f58:	e0bfff17 	ldw	r2,-4(fp)
    4f5c:	10800a17 	ldw	r2,40(r2)
    4f60:	10800104 	addi	r2,r2,4
    4f64:	10800037 	ldwio	r2,0(r2)
    4f68:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    4f6c:	e0bffe17 	ldw	r2,-8(fp)
    4f70:	1004d43a 	srli	r2,r2,16
}
    4f74:	e037883a 	mov	sp,fp
    4f78:	df000017 	ldw	fp,0(sp)
    4f7c:	dec00104 	addi	sp,sp,4
    4f80:	f800283a 	ret

00004f84 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    4f84:	defffd04 	addi	sp,sp,-12
    4f88:	df000215 	stw	fp,8(sp)
    4f8c:	df000204 	addi	fp,sp,8
    4f90:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    4f94:	e0bfff17 	ldw	r2,-4(fp)
    4f98:	1080800c 	andi	r2,r2,512
    4f9c:	1004d27a 	srli	r2,r2,9
    4fa0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    4fa4:	e0bffe17 	ldw	r2,-8(fp)
    4fa8:	10000226 	beq	r2,zero,4fb4 <alt_up_irda_check_parity+0x30>
    4fac:	00bfffc4 	movi	r2,-1
    4fb0:	00000106 	br	4fb8 <alt_up_irda_check_parity+0x34>
    4fb4:	0005883a 	mov	r2,zero
}
    4fb8:	e037883a 	mov	sp,fp
    4fbc:	df000017 	ldw	fp,0(sp)
    4fc0:	dec00104 	addi	sp,sp,4
    4fc4:	f800283a 	ret

00004fc8 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    4fc8:	defffd04 	addi	sp,sp,-12
    4fcc:	df000215 	stw	fp,8(sp)
    4fd0:	df000204 	addi	fp,sp,8
    4fd4:	e13ffe15 	stw	r4,-8(fp)
    4fd8:	2805883a 	mov	r2,r5
    4fdc:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    4fe0:	e0bffe17 	ldw	r2,-8(fp)
    4fe4:	10800a17 	ldw	r2,40(r2)
    4fe8:	1007883a 	mov	r3,r2
    4fec:	e0bfff03 	ldbu	r2,-4(fp)
    4ff0:	18800035 	stwio	r2,0(r3)
	return 0;
    4ff4:	0005883a 	mov	r2,zero
}
    4ff8:	e037883a 	mov	sp,fp
    4ffc:	df000017 	ldw	fp,0(sp)
    5000:	dec00104 	addi	sp,sp,4
    5004:	f800283a 	ret

00005008 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    5008:	defffa04 	addi	sp,sp,-24
    500c:	dfc00515 	stw	ra,20(sp)
    5010:	df000415 	stw	fp,16(sp)
    5014:	df000404 	addi	fp,sp,16
    5018:	e13ffd15 	stw	r4,-12(fp)
    501c:	e17ffe15 	stw	r5,-8(fp)
    5020:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    5024:	e0bffd17 	ldw	r2,-12(fp)
    5028:	10800a17 	ldw	r2,40(r2)
    502c:	10800037 	ldwio	r2,0(r2)
    5030:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    5034:	e0bffc17 	ldw	r2,-16(fp)
    5038:	1007883a 	mov	r3,r2
    503c:	e0bffe17 	ldw	r2,-8(fp)
    5040:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    5044:	e13ffc17 	ldw	r4,-16(fp)
    5048:	0004f840 	call	4f84 <alt_up_irda_check_parity>
    504c:	1007883a 	mov	r3,r2
    5050:	e0bfff17 	ldw	r2,-4(fp)
    5054:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    5058:	e0bffc17 	ldw	r2,-16(fp)
    505c:	10a0000c 	andi	r2,r2,32768
    5060:	1004d3fa 	srli	r2,r2,15
    5064:	10bfffc4 	addi	r2,r2,-1
}
    5068:	e037883a 	mov	sp,fp
    506c:	dfc00117 	ldw	ra,4(sp)
    5070:	df000017 	ldw	fp,0(sp)
    5074:	dec00204 	addi	sp,sp,8
    5078:	f800283a 	ret

0000507c <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    507c:	defff804 	addi	sp,sp,-32
    5080:	dfc00715 	stw	ra,28(sp)
    5084:	df000615 	stw	fp,24(sp)
    5088:	df000604 	addi	fp,sp,24
    508c:	e13ffd15 	stw	r4,-12(fp)
    5090:	e17ffe15 	stw	r5,-8(fp)
    5094:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    5098:	e0bffd17 	ldw	r2,-12(fp)
    509c:	10800017 	ldw	r2,0(r2)
    50a0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    50a4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    50a8:	00000c06 	br	50dc <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    50ac:	e0bffe17 	ldw	r2,-8(fp)
    50b0:	10c00044 	addi	r3,r2,1
    50b4:	e0fffe15 	stw	r3,-8(fp)
    50b8:	e0fffc04 	addi	r3,fp,-16
    50bc:	180d883a 	mov	r6,r3
    50c0:	100b883a 	mov	r5,r2
    50c4:	e13ffb17 	ldw	r4,-20(fp)
    50c8:	00050080 	call	5008 <alt_up_irda_read_data>
    50cc:	1000081e 	bne	r2,zero,50f0 <alt_up_irda_read_fd+0x74>
			count++;
    50d0:	e0bffa17 	ldw	r2,-24(fp)
    50d4:	10800044 	addi	r2,r2,1
    50d8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    50dc:	e0bfff17 	ldw	r2,-4(fp)
    50e0:	10ffffc4 	addi	r3,r2,-1
    50e4:	e0ffff15 	stw	r3,-4(fp)
    50e8:	103ff01e 	bne	r2,zero,50ac <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00050ac>
    50ec:	00000106 	br	50f4 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    50f0:	0001883a 	nop
	}
	return count;
    50f4:	e0bffa17 	ldw	r2,-24(fp)
}
    50f8:	e037883a 	mov	sp,fp
    50fc:	dfc00117 	ldw	ra,4(sp)
    5100:	df000017 	ldw	fp,0(sp)
    5104:	dec00204 	addi	sp,sp,8
    5108:	f800283a 	ret

0000510c <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    510c:	defff904 	addi	sp,sp,-28
    5110:	dfc00615 	stw	ra,24(sp)
    5114:	df000515 	stw	fp,20(sp)
    5118:	df000504 	addi	fp,sp,20
    511c:	e13ffd15 	stw	r4,-12(fp)
    5120:	e17ffe15 	stw	r5,-8(fp)
    5124:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    5128:	e0bffd17 	ldw	r2,-12(fp)
    512c:	10800017 	ldw	r2,0(r2)
    5130:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    5134:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    5138:	00000c06 	br	516c <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    513c:	e0bffe17 	ldw	r2,-8(fp)
    5140:	10c00044 	addi	r3,r2,1
    5144:	e0fffe15 	stw	r3,-8(fp)
    5148:	10800003 	ldbu	r2,0(r2)
    514c:	10803fcc 	andi	r2,r2,255
    5150:	100b883a 	mov	r5,r2
    5154:	e13ffc17 	ldw	r4,-16(fp)
    5158:	0004fc80 	call	4fc8 <alt_up_irda_write_data>
    515c:	1000081e 	bne	r2,zero,5180 <alt_up_irda_write_fd+0x74>
			count++;
    5160:	e0bffb17 	ldw	r2,-20(fp)
    5164:	10800044 	addi	r2,r2,1
    5168:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    516c:	e0bfff17 	ldw	r2,-4(fp)
    5170:	10ffffc4 	addi	r3,r2,-1
    5174:	e0ffff15 	stw	r3,-4(fp)
    5178:	103ff01e 	bne	r2,zero,513c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000513c>
    517c:	00000106 	br	5184 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
    5180:	0001883a 	nop
	}
	return count;
    5184:	e0bffb17 	ldw	r2,-20(fp)
}
    5188:	e037883a 	mov	sp,fp
    518c:	dfc00117 	ldw	ra,4(sp)
    5190:	df000017 	ldw	fp,0(sp)
    5194:	dec00204 	addi	sp,sp,8
    5198:	f800283a 	ret

0000519c <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    519c:	defffc04 	addi	sp,sp,-16
    51a0:	dfc00315 	stw	ra,12(sp)
    51a4:	df000215 	stw	fp,8(sp)
    51a8:	df000204 	addi	fp,sp,8
    51ac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    51b0:	d1600804 	addi	r5,gp,-32736
    51b4:	e13fff17 	ldw	r4,-4(fp)
    51b8:	0005b740 	call	5b74 <alt_find_dev>
    51bc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    51c0:	e0bffe17 	ldw	r2,-8(fp)
}
    51c4:	e037883a 	mov	sp,fp
    51c8:	dfc00117 	ldw	ra,4(sp)
    51cc:	df000017 	ldw	fp,0(sp)
    51d0:	dec00204 	addi	sp,sp,8
    51d4:	f800283a 	ret

000051d8 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    51d8:	defffd04 	addi	sp,sp,-12
    51dc:	df000215 	stw	fp,8(sp)
    51e0:	df000204 	addi	fp,sp,8
    51e4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    51e8:	e0bfff17 	ldw	r2,-4(fp)
    51ec:	1080400c 	andi	r2,r2,256
    51f0:	1004d23a 	srli	r2,r2,8
    51f4:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    51f8:	e0bffe03 	ldbu	r2,-8(fp)
}
    51fc:	e037883a 	mov	sp,fp
    5200:	df000017 	ldw	fp,0(sp)
    5204:	dec00104 	addi	sp,sp,4
    5208:	f800283a 	ret

0000520c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    520c:	defffd04 	addi	sp,sp,-12
    5210:	df000215 	stw	fp,8(sp)
    5214:	df000204 	addi	fp,sp,8
    5218:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    521c:	e0bfff17 	ldw	r2,-4(fp)
    5220:	1080004c 	andi	r2,r2,1
    5224:	e0bffe05 	stb	r2,-8(fp)
	return re;
    5228:	e0bffe03 	ldbu	r2,-8(fp)
}
    522c:	e037883a 	mov	sp,fp
    5230:	df000017 	ldw	fp,0(sp)
    5234:	dec00104 	addi	sp,sp,4
    5238:	f800283a 	ret

0000523c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    523c:	defffd04 	addi	sp,sp,-12
    5240:	df000215 	stw	fp,8(sp)
    5244:	df000204 	addi	fp,sp,8
    5248:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    524c:	e0bfff17 	ldw	r2,-4(fp)
    5250:	1081000c 	andi	r2,r2,1024
    5254:	1004d2ba 	srli	r2,r2,10
    5258:	e0bffe05 	stb	r2,-8(fp)
	return re;
    525c:	e0bffe03 	ldbu	r2,-8(fp)
}
    5260:	e037883a 	mov	sp,fp
    5264:	df000017 	ldw	fp,0(sp)
    5268:	dec00104 	addi	sp,sp,4
    526c:	f800283a 	ret

00005270 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    5270:	defffd04 	addi	sp,sp,-12
    5274:	df000215 	stw	fp,8(sp)
    5278:	df000204 	addi	fp,sp,8
    527c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    5280:	e0bfff17 	ldw	r2,-4(fp)
    5284:	1004d43a 	srli	r2,r2,16
    5288:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    528c:	e0bffe0b 	ldhu	r2,-8(fp)
}
    5290:	e037883a 	mov	sp,fp
    5294:	df000017 	ldw	fp,0(sp)
    5298:	dec00104 	addi	sp,sp,4
    529c:	f800283a 	ret

000052a0 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    52a0:	defffd04 	addi	sp,sp,-12
    52a4:	df000215 	stw	fp,8(sp)
    52a8:	df000204 	addi	fp,sp,8
    52ac:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    52b0:	e0bfff17 	ldw	r2,-4(fp)
    52b4:	10a0000c 	andi	r2,r2,32768
    52b8:	1004d3fa 	srli	r2,r2,15
    52bc:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    52c0:	e0bffe03 	ldbu	r2,-8(fp)
}
    52c4:	e037883a 	mov	sp,fp
    52c8:	df000017 	ldw	fp,0(sp)
    52cc:	dec00104 	addi	sp,sp,4
    52d0:	f800283a 	ret

000052d4 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    52d4:	defffd04 	addi	sp,sp,-12
    52d8:	df000215 	stw	fp,8(sp)
    52dc:	df000204 	addi	fp,sp,8
    52e0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    52e4:	e0bfff17 	ldw	r2,-4(fp)
    52e8:	e0bffe05 	stb	r2,-8(fp)
	return data;
    52ec:	e0bffe03 	ldbu	r2,-8(fp)
}
    52f0:	e037883a 	mov	sp,fp
    52f4:	df000017 	ldw	fp,0(sp)
    52f8:	dec00104 	addi	sp,sp,4
    52fc:	f800283a 	ret

00005300 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    5300:	defffb04 	addi	sp,sp,-20
    5304:	dfc00415 	stw	ra,16(sp)
    5308:	df000315 	stw	fp,12(sp)
    530c:	df000304 	addi	fp,sp,12
    5310:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    5314:	01403fc4 	movi	r5,255
    5318:	e13fff17 	ldw	r4,-4(fp)
    531c:	00055600 	call	5560 <alt_up_ps2_write_data_byte_with_ack>
    5320:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    5324:	e0bffd17 	ldw	r2,-12(fp)
    5328:	1000211e 	bne	r2,zero,53b0 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    532c:	e0bffe04 	addi	r2,fp,-8
    5330:	100b883a 	mov	r5,r2
    5334:	e13fff17 	ldw	r4,-4(fp)
    5338:	00055c40 	call	55c4 <alt_up_ps2_read_data_byte_timeout>
    533c:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    5340:	e0bffd17 	ldw	r2,-12(fp)
    5344:	10001a1e 	bne	r2,zero,53b0 <alt_up_ps2_init+0xb0>
    5348:	e0bffe03 	ldbu	r2,-8(fp)
    534c:	10803fcc 	andi	r2,r2,255
    5350:	10802a98 	cmpnei	r2,r2,170
    5354:	1000161e 	bne	r2,zero,53b0 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    5358:	e0bffe04 	addi	r2,fp,-8
    535c:	100b883a 	mov	r5,r2
    5360:	e13fff17 	ldw	r4,-4(fp)
    5364:	00055c40 	call	55c4 <alt_up_ps2_read_data_byte_timeout>
    5368:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    536c:	e0bffd17 	ldw	r2,-12(fp)
    5370:	10bfe318 	cmpnei	r2,r2,-116
    5374:	1000041e 	bne	r2,zero,5388 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    5378:	e0bfff17 	ldw	r2,-4(fp)
    537c:	00c00044 	movi	r3,1
    5380:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
    5384:	00000a06 	br	53b0 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
    5388:	e0bffd17 	ldw	r2,-12(fp)
    538c:	1000081e 	bne	r2,zero,53b0 <alt_up_ps2_init+0xb0>
    5390:	e0bffe03 	ldbu	r2,-8(fp)
    5394:	10803fcc 	andi	r2,r2,255
    5398:	1000051e 	bne	r2,zero,53b0 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    539c:	e0bfff17 	ldw	r2,-4(fp)
    53a0:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    53a4:	01403d04 	movi	r5,244
    53a8:	e13fff17 	ldw	r4,-4(fp)
    53ac:	00054840 	call	5484 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    53b0:	0001883a 	nop
    53b4:	e037883a 	mov	sp,fp
    53b8:	dfc00117 	ldw	ra,4(sp)
    53bc:	df000017 	ldw	fp,0(sp)
    53c0:	dec00204 	addi	sp,sp,8
    53c4:	f800283a 	ret

000053c8 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    53c8:	defffd04 	addi	sp,sp,-12
    53cc:	df000215 	stw	fp,8(sp)
    53d0:	df000204 	addi	fp,sp,8
    53d4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    53d8:	e0bfff17 	ldw	r2,-4(fp)
    53dc:	10800a17 	ldw	r2,40(r2)
    53e0:	10800104 	addi	r2,r2,4
    53e4:	10800037 	ldwio	r2,0(r2)
    53e8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    53ec:	e0bffe17 	ldw	r2,-8(fp)
    53f0:	10800054 	ori	r2,r2,1
    53f4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    53f8:	e0bfff17 	ldw	r2,-4(fp)
    53fc:	10800a17 	ldw	r2,40(r2)
    5400:	10800104 	addi	r2,r2,4
    5404:	1007883a 	mov	r3,r2
    5408:	e0bffe17 	ldw	r2,-8(fp)
    540c:	18800035 	stwio	r2,0(r3)
}
    5410:	0001883a 	nop
    5414:	e037883a 	mov	sp,fp
    5418:	df000017 	ldw	fp,0(sp)
    541c:	dec00104 	addi	sp,sp,4
    5420:	f800283a 	ret

00005424 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    5424:	defffd04 	addi	sp,sp,-12
    5428:	df000215 	stw	fp,8(sp)
    542c:	df000204 	addi	fp,sp,8
    5430:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    5434:	e0bfff17 	ldw	r2,-4(fp)
    5438:	10800a17 	ldw	r2,40(r2)
    543c:	10800104 	addi	r2,r2,4
    5440:	10800037 	ldwio	r2,0(r2)
    5444:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    5448:	e0fffe17 	ldw	r3,-8(fp)
    544c:	00bfff84 	movi	r2,-2
    5450:	1884703a 	and	r2,r3,r2
    5454:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    5458:	e0bfff17 	ldw	r2,-4(fp)
    545c:	10800a17 	ldw	r2,40(r2)
    5460:	10800104 	addi	r2,r2,4
    5464:	1007883a 	mov	r3,r2
    5468:	e0bffe17 	ldw	r2,-8(fp)
    546c:	18800035 	stwio	r2,0(r3)
}
    5470:	0001883a 	nop
    5474:	e037883a 	mov	sp,fp
    5478:	df000017 	ldw	fp,0(sp)
    547c:	dec00104 	addi	sp,sp,4
    5480:	f800283a 	ret

00005484 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    5484:	defffb04 	addi	sp,sp,-20
    5488:	dfc00415 	stw	ra,16(sp)
    548c:	df000315 	stw	fp,12(sp)
    5490:	df000304 	addi	fp,sp,12
    5494:	e13ffe15 	stw	r4,-8(fp)
    5498:	2805883a 	mov	r2,r5
    549c:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    54a0:	e0bffe17 	ldw	r2,-8(fp)
    54a4:	10800a17 	ldw	r2,40(r2)
    54a8:	1007883a 	mov	r3,r2
    54ac:	e0bfff03 	ldbu	r2,-4(fp)
    54b0:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    54b4:	e0bffe17 	ldw	r2,-8(fp)
    54b8:	10800a17 	ldw	r2,40(r2)
    54bc:	10800104 	addi	r2,r2,4
    54c0:	10800037 	ldwio	r2,0(r2)
    54c4:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    54c8:	e13ffd17 	ldw	r4,-12(fp)
    54cc:	000523c0 	call	523c <read_CE_bit>
    54d0:	10803fcc 	andi	r2,r2,255
    54d4:	10000226 	beq	r2,zero,54e0 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    54d8:	00bffec4 	movi	r2,-5
    54dc:	00000106 	br	54e4 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    54e0:	0005883a 	mov	r2,zero
}
    54e4:	e037883a 	mov	sp,fp
    54e8:	dfc00117 	ldw	ra,4(sp)
    54ec:	df000017 	ldw	fp,0(sp)
    54f0:	dec00204 	addi	sp,sp,8
    54f4:	f800283a 	ret

000054f8 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    54f8:	defffc04 	addi	sp,sp,-16
    54fc:	dfc00315 	stw	ra,12(sp)
    5500:	df000215 	stw	fp,8(sp)
    5504:	df000204 	addi	fp,sp,8
    5508:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    550c:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    5510:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    5514:	e0bffe44 	addi	r2,fp,-7
    5518:	100b883a 	mov	r5,r2
    551c:	e13fff17 	ldw	r4,-4(fp)
    5520:	00055c40 	call	55c4 <alt_up_ps2_read_data_byte_timeout>
    5524:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    5528:	e0bffe03 	ldbu	r2,-8(fp)
    552c:	1000061e 	bne	r2,zero,5548 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    5530:	e0bffe43 	ldbu	r2,-7(fp)
    5534:	10803fcc 	andi	r2,r2,255
    5538:	10803e98 	cmpnei	r2,r2,250
    553c:	103ff51e 	bne	r2,zero,5514 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005514>
				return 0;
    5540:	0005883a 	mov	r2,zero
    5544:	00000106 	br	554c <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
    5548:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    554c:	e037883a 	mov	sp,fp
    5550:	dfc00117 	ldw	ra,4(sp)
    5554:	df000017 	ldw	fp,0(sp)
    5558:	dec00204 	addi	sp,sp,8
    555c:	f800283a 	ret

00005560 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    5560:	defffa04 	addi	sp,sp,-24
    5564:	dfc00515 	stw	ra,20(sp)
    5568:	df000415 	stw	fp,16(sp)
    556c:	df000404 	addi	fp,sp,16
    5570:	e13ffe15 	stw	r4,-8(fp)
    5574:	2805883a 	mov	r2,r5
    5578:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    557c:	e0bfff03 	ldbu	r2,-4(fp)
    5580:	100b883a 	mov	r5,r2
    5584:	e13ffe17 	ldw	r4,-8(fp)
    5588:	00054840 	call	5484 <alt_up_ps2_write_data_byte>
    558c:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    5590:	e0bffc17 	ldw	r2,-16(fp)
    5594:	10000226 	beq	r2,zero,55a0 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    5598:	e0bffc17 	ldw	r2,-16(fp)
    559c:	00000406 	br	55b0 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    55a0:	e13ffe17 	ldw	r4,-8(fp)
    55a4:	00054f80 	call	54f8 <alt_up_ps2_wait_for_ack>
    55a8:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    55ac:	e0bffd17 	ldw	r2,-12(fp)
}
    55b0:	e037883a 	mov	sp,fp
    55b4:	dfc00117 	ldw	ra,4(sp)
    55b8:	df000017 	ldw	fp,0(sp)
    55bc:	dec00204 	addi	sp,sp,8
    55c0:	f800283a 	ret

000055c4 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    55c4:	defffa04 	addi	sp,sp,-24
    55c8:	dfc00515 	stw	ra,20(sp)
    55cc:	df000415 	stw	fp,16(sp)
    55d0:	df000404 	addi	fp,sp,16
    55d4:	e13ffe15 	stw	r4,-8(fp)
    55d8:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    55dc:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    55e0:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    55e4:	e0bffc17 	ldw	r2,-16(fp)
    55e8:	10800044 	addi	r2,r2,1
    55ec:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    55f0:	e0bffe17 	ldw	r2,-8(fp)
    55f4:	10800a17 	ldw	r2,40(r2)
    55f8:	10800037 	ldwio	r2,0(r2)
    55fc:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    5600:	e13ffd17 	ldw	r4,-12(fp)
    5604:	00052a00 	call	52a0 <read_data_valid>
    5608:	10803fcc 	andi	r2,r2,255
    560c:	10000726 	beq	r2,zero,562c <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    5610:	e13ffd17 	ldw	r4,-12(fp)
    5614:	00052d40 	call	52d4 <read_data_byte>
    5618:	1007883a 	mov	r3,r2
    561c:	e0bfff17 	ldw	r2,-4(fp)
    5620:	10c00005 	stb	r3,0(r2)
			return 0;
    5624:	0005883a 	mov	r2,zero
    5628:	00000806 	br	564c <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    562c:	e0bffe17 	ldw	r2,-8(fp)
    5630:	10800c17 	ldw	r2,48(r2)
    5634:	103feb26 	beq	r2,zero,55e4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00055e4>
    5638:	e0bffe17 	ldw	r2,-8(fp)
    563c:	10c00c17 	ldw	r3,48(r2)
    5640:	e0bffc17 	ldw	r2,-16(fp)
    5644:	18bfe72e 	bgeu	r3,r2,55e4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00055e4>
		{
			return -ETIMEDOUT;
    5648:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    564c:	e037883a 	mov	sp,fp
    5650:	dfc00117 	ldw	ra,4(sp)
    5654:	df000017 	ldw	fp,0(sp)
    5658:	dec00204 	addi	sp,sp,8
    565c:	f800283a 	ret

00005660 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    5660:	defffb04 	addi	sp,sp,-20
    5664:	dfc00415 	stw	ra,16(sp)
    5668:	df000315 	stw	fp,12(sp)
    566c:	df000304 	addi	fp,sp,12
    5670:	e13ffe15 	stw	r4,-8(fp)
    5674:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    5678:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    567c:	e0bffe17 	ldw	r2,-8(fp)
    5680:	10800a17 	ldw	r2,40(r2)
    5684:	10800037 	ldwio	r2,0(r2)
    5688:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    568c:	e13ffd17 	ldw	r4,-12(fp)
    5690:	00052a00 	call	52a0 <read_data_valid>
    5694:	10803fcc 	andi	r2,r2,255
    5698:	10000726 	beq	r2,zero,56b8 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    569c:	e13ffd17 	ldw	r4,-12(fp)
    56a0:	00052d40 	call	52d4 <read_data_byte>
    56a4:	1007883a 	mov	r3,r2
    56a8:	e0bfff17 	ldw	r2,-4(fp)
    56ac:	10c00005 	stb	r3,0(r2)
		return 0;
    56b0:	0005883a 	mov	r2,zero
    56b4:	00000106 	br	56bc <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    56b8:	00bfffc4 	movi	r2,-1
}
    56bc:	e037883a 	mov	sp,fp
    56c0:	dfc00117 	ldw	ra,4(sp)
    56c4:	df000017 	ldw	fp,0(sp)
    56c8:	dec00204 	addi	sp,sp,8
    56cc:	f800283a 	ret

000056d0 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    56d0:	defffb04 	addi	sp,sp,-20
    56d4:	dfc00415 	stw	ra,16(sp)
    56d8:	df000315 	stw	fp,12(sp)
    56dc:	df000304 	addi	fp,sp,12
    56e0:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    56e4:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    56e8:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    56ec:	e0bfff17 	ldw	r2,-4(fp)
    56f0:	10800a17 	ldw	r2,40(r2)
    56f4:	10800037 	ldwio	r2,0(r2)
    56f8:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    56fc:	e13ffe17 	ldw	r4,-8(fp)
    5700:	00052700 	call	5270 <read_num_bytes_available>
    5704:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    5708:	e0bffd0b 	ldhu	r2,-12(fp)
    570c:	103ff71e 	bne	r2,zero,56ec <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00056ec>
}
    5710:	0001883a 	nop
    5714:	e037883a 	mov	sp,fp
    5718:	dfc00117 	ldw	ra,4(sp)
    571c:	df000017 	ldw	fp,0(sp)
    5720:	dec00204 	addi	sp,sp,8
    5724:	f800283a 	ret

00005728 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    5728:	defff804 	addi	sp,sp,-32
    572c:	dfc00715 	stw	ra,28(sp)
    5730:	df000615 	stw	fp,24(sp)
    5734:	df000604 	addi	fp,sp,24
    5738:	e13ffd15 	stw	r4,-12(fp)
    573c:	e17ffe15 	stw	r5,-8(fp)
    5740:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    5744:	e0bffd17 	ldw	r2,-12(fp)
    5748:	10800017 	ldw	r2,0(r2)
    574c:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    5750:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    5754:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    5758:	e0fffc17 	ldw	r3,-16(fp)
    575c:	e0bfff17 	ldw	r2,-4(fp)
    5760:	18bffd16 	blt	r3,r2,5758 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005758>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    5764:	e0bffe17 	ldw	r2,-8(fp)
    5768:	10c00044 	addi	r3,r2,1
    576c:	e0fffe15 	stw	r3,-8(fp)
    5770:	100b883a 	mov	r5,r2
    5774:	e13ffa17 	ldw	r4,-24(fp)
    5778:	00055c40 	call	55c4 <alt_up_ps2_read_data_byte_timeout>
    577c:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    5780:	e0bffb17 	ldw	r2,-20(fp)
    5784:	10000226 	beq	r2,zero,5790 <alt_up_ps2_read_fd+0x68>
			return count;
    5788:	e0bffc17 	ldw	r2,-16(fp)
    578c:	00000406 	br	57a0 <alt_up_ps2_read_fd+0x78>
		count++;
    5790:	e0bffc17 	ldw	r2,-16(fp)
    5794:	10800044 	addi	r2,r2,1
    5798:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    579c:	e0bffc17 	ldw	r2,-16(fp)
}
    57a0:	e037883a 	mov	sp,fp
    57a4:	dfc00117 	ldw	ra,4(sp)
    57a8:	df000017 	ldw	fp,0(sp)
    57ac:	dec00204 	addi	sp,sp,8
    57b0:	f800283a 	ret

000057b4 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    57b4:	defff804 	addi	sp,sp,-32
    57b8:	dfc00715 	stw	ra,28(sp)
    57bc:	df000615 	stw	fp,24(sp)
    57c0:	df000604 	addi	fp,sp,24
    57c4:	e13ffd15 	stw	r4,-12(fp)
    57c8:	e17ffe15 	stw	r5,-8(fp)
    57cc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    57d0:	e0bffd17 	ldw	r2,-12(fp)
    57d4:	10800017 	ldw	r2,0(r2)
    57d8:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    57dc:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    57e0:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    57e4:	00001006 	br	5828 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    57e8:	e0bffe17 	ldw	r2,-8(fp)
    57ec:	10c00044 	addi	r3,r2,1
    57f0:	e0fffe15 	stw	r3,-8(fp)
    57f4:	10800003 	ldbu	r2,0(r2)
    57f8:	10803fcc 	andi	r2,r2,255
    57fc:	100b883a 	mov	r5,r2
    5800:	e13ffb17 	ldw	r4,-20(fp)
    5804:	00054840 	call	5484 <alt_up_ps2_write_data_byte>
    5808:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    580c:	e0bffc17 	ldw	r2,-16(fp)
    5810:	10000226 	beq	r2,zero,581c <alt_up_ps2_write_fd+0x68>
			return count;
    5814:	e0bffa17 	ldw	r2,-24(fp)
    5818:	00000706 	br	5838 <alt_up_ps2_write_fd+0x84>
		count++;
    581c:	e0bffa17 	ldw	r2,-24(fp)
    5820:	10800044 	addi	r2,r2,1
    5824:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    5828:	e0fffa17 	ldw	r3,-24(fp)
    582c:	e0bfff17 	ldw	r2,-4(fp)
    5830:	18bfed16 	blt	r3,r2,57e8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00057e8>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    5834:	e0bffa17 	ldw	r2,-24(fp)
}
    5838:	e037883a 	mov	sp,fp
    583c:	dfc00117 	ldw	ra,4(sp)
    5840:	df000017 	ldw	fp,0(sp)
    5844:	dec00204 	addi	sp,sp,8
    5848:	f800283a 	ret

0000584c <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    584c:	defffc04 	addi	sp,sp,-16
    5850:	dfc00315 	stw	ra,12(sp)
    5854:	df000215 	stw	fp,8(sp)
    5858:	df000204 	addi	fp,sp,8
    585c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    5860:	d1600804 	addi	r5,gp,-32736
    5864:	e13fff17 	ldw	r4,-4(fp)
    5868:	0005b740 	call	5b74 <alt_find_dev>
    586c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    5870:	e0bffe17 	ldw	r2,-8(fp)
}
    5874:	e037883a 	mov	sp,fp
    5878:	dfc00117 	ldw	ra,4(sp)
    587c:	df000017 	ldw	fp,0(sp)
    5880:	dec00204 	addi	sp,sp,8
    5884:	f800283a 	ret

00005888 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    5888:	defff504 	addi	sp,sp,-44
    588c:	df000a15 	stw	fp,40(sp)
    5890:	df000a04 	addi	fp,sp,40
    5894:	e13ffc15 	stw	r4,-16(fp)
    5898:	e17ffd15 	stw	r5,-12(fp)
    589c:	e1bffe15 	stw	r6,-8(fp)
    58a0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    58a4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    58a8:	d0a74417 	ldw	r2,-25328(gp)
  
  if (alt_ticks_per_second ())
    58ac:	10003c26 	beq	r2,zero,59a0 <alt_alarm_start+0x118>
  {
    if (alarm)
    58b0:	e0bffc17 	ldw	r2,-16(fp)
    58b4:	10003826 	beq	r2,zero,5998 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    58b8:	e0bffc17 	ldw	r2,-16(fp)
    58bc:	e0fffe17 	ldw	r3,-8(fp)
    58c0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    58c4:	e0bffc17 	ldw	r2,-16(fp)
    58c8:	e0ffff17 	ldw	r3,-4(fp)
    58cc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    58d0:	0005303a 	rdctl	r2,status
    58d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    58d8:	e0fff917 	ldw	r3,-28(fp)
    58dc:	00bfff84 	movi	r2,-2
    58e0:	1884703a 	and	r2,r3,r2
    58e4:	1001703a 	wrctl	status,r2
  
  return context;
    58e8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    58ec:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    58f0:	d0a74517 	ldw	r2,-25324(gp)
      
      current_nticks = alt_nticks();
    58f4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    58f8:	e0fffd17 	ldw	r3,-12(fp)
    58fc:	e0bff617 	ldw	r2,-40(fp)
    5900:	1885883a 	add	r2,r3,r2
    5904:	10c00044 	addi	r3,r2,1
    5908:	e0bffc17 	ldw	r2,-16(fp)
    590c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    5910:	e0bffc17 	ldw	r2,-16(fp)
    5914:	10c00217 	ldw	r3,8(r2)
    5918:	e0bff617 	ldw	r2,-40(fp)
    591c:	1880042e 	bgeu	r3,r2,5930 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    5920:	e0bffc17 	ldw	r2,-16(fp)
    5924:	00c00044 	movi	r3,1
    5928:	10c00405 	stb	r3,16(r2)
    592c:	00000206 	br	5938 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    5930:	e0bffc17 	ldw	r2,-16(fp)
    5934:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    5938:	e0bffc17 	ldw	r2,-16(fp)
    593c:	d0e00e04 	addi	r3,gp,-32712
    5940:	e0fffa15 	stw	r3,-24(fp)
    5944:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5948:	e0bffb17 	ldw	r2,-20(fp)
    594c:	e0fffa17 	ldw	r3,-24(fp)
    5950:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    5954:	e0bffa17 	ldw	r2,-24(fp)
    5958:	10c00017 	ldw	r3,0(r2)
    595c:	e0bffb17 	ldw	r2,-20(fp)
    5960:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5964:	e0bffa17 	ldw	r2,-24(fp)
    5968:	10800017 	ldw	r2,0(r2)
    596c:	e0fffb17 	ldw	r3,-20(fp)
    5970:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    5974:	e0bffa17 	ldw	r2,-24(fp)
    5978:	e0fffb17 	ldw	r3,-20(fp)
    597c:	10c00015 	stw	r3,0(r2)
    5980:	e0bff817 	ldw	r2,-32(fp)
    5984:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5988:	e0bff717 	ldw	r2,-36(fp)
    598c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    5990:	0005883a 	mov	r2,zero
    5994:	00000306 	br	59a4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    5998:	00bffa84 	movi	r2,-22
    599c:	00000106 	br	59a4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    59a0:	00bfde84 	movi	r2,-134
  }
}
    59a4:	e037883a 	mov	sp,fp
    59a8:	df000017 	ldw	fp,0(sp)
    59ac:	dec00104 	addi	sp,sp,4
    59b0:	f800283a 	ret

000059b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    59b4:	deffff04 	addi	sp,sp,-4
    59b8:	df000015 	stw	fp,0(sp)
    59bc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    59c0:	0001883a 	nop
    59c4:	e037883a 	mov	sp,fp
    59c8:	df000017 	ldw	fp,0(sp)
    59cc:	dec00104 	addi	sp,sp,4
    59d0:	f800283a 	ret

000059d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    59d4:	defffe04 	addi	sp,sp,-8
    59d8:	dfc00115 	stw	ra,4(sp)
    59dc:	df000015 	stw	fp,0(sp)
    59e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    59e4:	d0a00b17 	ldw	r2,-32724(gp)
    59e8:	10000326 	beq	r2,zero,59f8 <alt_get_errno+0x24>
    59ec:	d0a00b17 	ldw	r2,-32724(gp)
    59f0:	103ee83a 	callr	r2
    59f4:	00000106 	br	59fc <alt_get_errno+0x28>
    59f8:	d0a73f04 	addi	r2,gp,-25348
}
    59fc:	e037883a 	mov	sp,fp
    5a00:	dfc00117 	ldw	ra,4(sp)
    5a04:	df000017 	ldw	fp,0(sp)
    5a08:	dec00204 	addi	sp,sp,8
    5a0c:	f800283a 	ret

00005a10 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    5a10:	defffa04 	addi	sp,sp,-24
    5a14:	dfc00515 	stw	ra,20(sp)
    5a18:	df000415 	stw	fp,16(sp)
    5a1c:	df000404 	addi	fp,sp,16
    5a20:	e13ffe15 	stw	r4,-8(fp)
    5a24:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    5a28:	e0bffe17 	ldw	r2,-8(fp)
    5a2c:	10000326 	beq	r2,zero,5a3c <alt_dev_llist_insert+0x2c>
    5a30:	e0bffe17 	ldw	r2,-8(fp)
    5a34:	10800217 	ldw	r2,8(r2)
    5a38:	1000061e 	bne	r2,zero,5a54 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    5a3c:	00059d40 	call	59d4 <alt_get_errno>
    5a40:	1007883a 	mov	r3,r2
    5a44:	00800584 	movi	r2,22
    5a48:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    5a4c:	00bffa84 	movi	r2,-22
    5a50:	00001306 	br	5aa0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    5a54:	e0bffe17 	ldw	r2,-8(fp)
    5a58:	e0ffff17 	ldw	r3,-4(fp)
    5a5c:	e0fffc15 	stw	r3,-16(fp)
    5a60:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5a64:	e0bffd17 	ldw	r2,-12(fp)
    5a68:	e0fffc17 	ldw	r3,-16(fp)
    5a6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    5a70:	e0bffc17 	ldw	r2,-16(fp)
    5a74:	10c00017 	ldw	r3,0(r2)
    5a78:	e0bffd17 	ldw	r2,-12(fp)
    5a7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5a80:	e0bffc17 	ldw	r2,-16(fp)
    5a84:	10800017 	ldw	r2,0(r2)
    5a88:	e0fffd17 	ldw	r3,-12(fp)
    5a8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    5a90:	e0bffc17 	ldw	r2,-16(fp)
    5a94:	e0fffd17 	ldw	r3,-12(fp)
    5a98:	10c00015 	stw	r3,0(r2)

  return 0;  
    5a9c:	0005883a 	mov	r2,zero
}
    5aa0:	e037883a 	mov	sp,fp
    5aa4:	dfc00117 	ldw	ra,4(sp)
    5aa8:	df000017 	ldw	fp,0(sp)
    5aac:	dec00204 	addi	sp,sp,8
    5ab0:	f800283a 	ret

00005ab4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    5ab4:	defffd04 	addi	sp,sp,-12
    5ab8:	dfc00215 	stw	ra,8(sp)
    5abc:	df000115 	stw	fp,4(sp)
    5ac0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5ac4:	00800034 	movhi	r2,0
    5ac8:	109a5f04 	addi	r2,r2,27004
    5acc:	e0bfff15 	stw	r2,-4(fp)
    5ad0:	00000606 	br	5aec <_do_ctors+0x38>
        (*ctor) (); 
    5ad4:	e0bfff17 	ldw	r2,-4(fp)
    5ad8:	10800017 	ldw	r2,0(r2)
    5adc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5ae0:	e0bfff17 	ldw	r2,-4(fp)
    5ae4:	10bfff04 	addi	r2,r2,-4
    5ae8:	e0bfff15 	stw	r2,-4(fp)
    5aec:	e0ffff17 	ldw	r3,-4(fp)
    5af0:	00800034 	movhi	r2,0
    5af4:	109a6004 	addi	r2,r2,27008
    5af8:	18bff62e 	bgeu	r3,r2,5ad4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005ad4>
        (*ctor) (); 
}
    5afc:	0001883a 	nop
    5b00:	e037883a 	mov	sp,fp
    5b04:	dfc00117 	ldw	ra,4(sp)
    5b08:	df000017 	ldw	fp,0(sp)
    5b0c:	dec00204 	addi	sp,sp,8
    5b10:	f800283a 	ret

00005b14 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    5b14:	defffd04 	addi	sp,sp,-12
    5b18:	dfc00215 	stw	ra,8(sp)
    5b1c:	df000115 	stw	fp,4(sp)
    5b20:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5b24:	00800034 	movhi	r2,0
    5b28:	109a5f04 	addi	r2,r2,27004
    5b2c:	e0bfff15 	stw	r2,-4(fp)
    5b30:	00000606 	br	5b4c <_do_dtors+0x38>
        (*dtor) (); 
    5b34:	e0bfff17 	ldw	r2,-4(fp)
    5b38:	10800017 	ldw	r2,0(r2)
    5b3c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5b40:	e0bfff17 	ldw	r2,-4(fp)
    5b44:	10bfff04 	addi	r2,r2,-4
    5b48:	e0bfff15 	stw	r2,-4(fp)
    5b4c:	e0ffff17 	ldw	r3,-4(fp)
    5b50:	00800034 	movhi	r2,0
    5b54:	109a6004 	addi	r2,r2,27008
    5b58:	18bff62e 	bgeu	r3,r2,5b34 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005b34>
        (*dtor) (); 
}
    5b5c:	0001883a 	nop
    5b60:	e037883a 	mov	sp,fp
    5b64:	dfc00117 	ldw	ra,4(sp)
    5b68:	df000017 	ldw	fp,0(sp)
    5b6c:	dec00204 	addi	sp,sp,8
    5b70:	f800283a 	ret

00005b74 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5b74:	defffa04 	addi	sp,sp,-24
    5b78:	dfc00515 	stw	ra,20(sp)
    5b7c:	df000415 	stw	fp,16(sp)
    5b80:	df000404 	addi	fp,sp,16
    5b84:	e13ffe15 	stw	r4,-8(fp)
    5b88:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    5b8c:	e0bfff17 	ldw	r2,-4(fp)
    5b90:	10800017 	ldw	r2,0(r2)
    5b94:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    5b98:	e13ffe17 	ldw	r4,-8(fp)
    5b9c:	00004c80 	call	4c8 <strlen>
    5ba0:	10800044 	addi	r2,r2,1
    5ba4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5ba8:	00000d06 	br	5be0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5bac:	e0bffc17 	ldw	r2,-16(fp)
    5bb0:	10800217 	ldw	r2,8(r2)
    5bb4:	e0fffd17 	ldw	r3,-12(fp)
    5bb8:	180d883a 	mov	r6,r3
    5bbc:	e17ffe17 	ldw	r5,-8(fp)
    5bc0:	1009883a 	mov	r4,r2
    5bc4:	00066380 	call	6638 <memcmp>
    5bc8:	1000021e 	bne	r2,zero,5bd4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    5bcc:	e0bffc17 	ldw	r2,-16(fp)
    5bd0:	00000706 	br	5bf0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    5bd4:	e0bffc17 	ldw	r2,-16(fp)
    5bd8:	10800017 	ldw	r2,0(r2)
    5bdc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5be0:	e0fffc17 	ldw	r3,-16(fp)
    5be4:	e0bfff17 	ldw	r2,-4(fp)
    5be8:	18bff01e 	bne	r3,r2,5bac <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005bac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5bec:	0005883a 	mov	r2,zero
}
    5bf0:	e037883a 	mov	sp,fp
    5bf4:	dfc00117 	ldw	ra,4(sp)
    5bf8:	df000017 	ldw	fp,0(sp)
    5bfc:	dec00204 	addi	sp,sp,8
    5c00:	f800283a 	ret

00005c04 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5c04:	defffe04 	addi	sp,sp,-8
    5c08:	dfc00115 	stw	ra,4(sp)
    5c0c:	df000015 	stw	fp,0(sp)
    5c10:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    5c14:	01440004 	movi	r5,4096
    5c18:	0009883a 	mov	r4,zero
    5c1c:	00064c00 	call	64c0 <alt_icache_flush>
#endif
}
    5c20:	0001883a 	nop
    5c24:	e037883a 	mov	sp,fp
    5c28:	dfc00117 	ldw	ra,4(sp)
    5c2c:	df000017 	ldw	fp,0(sp)
    5c30:	dec00204 	addi	sp,sp,8
    5c34:	f800283a 	ret

00005c38 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5c38:	defff904 	addi	sp,sp,-28
    5c3c:	dfc00615 	stw	ra,24(sp)
    5c40:	df000515 	stw	fp,20(sp)
    5c44:	df000504 	addi	fp,sp,20
    5c48:	e13ffc15 	stw	r4,-16(fp)
    5c4c:	e17ffd15 	stw	r5,-12(fp)
    5c50:	e1bffe15 	stw	r6,-8(fp)
    5c54:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    5c58:	e1bfff17 	ldw	r6,-4(fp)
    5c5c:	e17ffe17 	ldw	r5,-8(fp)
    5c60:	e13ffd17 	ldw	r4,-12(fp)
    5c64:	0005ff80 	call	5ff8 <open>
    5c68:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    5c6c:	e0bffb17 	ldw	r2,-20(fp)
    5c70:	10001c16 	blt	r2,zero,5ce4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    5c74:	00800034 	movhi	r2,0
    5c78:	109cbe04 	addi	r2,r2,29432
    5c7c:	e0fffb17 	ldw	r3,-20(fp)
    5c80:	18c00324 	muli	r3,r3,12
    5c84:	10c5883a 	add	r2,r2,r3
    5c88:	10c00017 	ldw	r3,0(r2)
    5c8c:	e0bffc17 	ldw	r2,-16(fp)
    5c90:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    5c94:	00800034 	movhi	r2,0
    5c98:	109cbe04 	addi	r2,r2,29432
    5c9c:	e0fffb17 	ldw	r3,-20(fp)
    5ca0:	18c00324 	muli	r3,r3,12
    5ca4:	10c5883a 	add	r2,r2,r3
    5ca8:	10800104 	addi	r2,r2,4
    5cac:	10c00017 	ldw	r3,0(r2)
    5cb0:	e0bffc17 	ldw	r2,-16(fp)
    5cb4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5cb8:	00800034 	movhi	r2,0
    5cbc:	109cbe04 	addi	r2,r2,29432
    5cc0:	e0fffb17 	ldw	r3,-20(fp)
    5cc4:	18c00324 	muli	r3,r3,12
    5cc8:	10c5883a 	add	r2,r2,r3
    5ccc:	10800204 	addi	r2,r2,8
    5cd0:	10c00017 	ldw	r3,0(r2)
    5cd4:	e0bffc17 	ldw	r2,-16(fp)
    5cd8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    5cdc:	e13ffb17 	ldw	r4,-20(fp)
    5ce0:	00038b80 	call	38b8 <alt_release_fd>
  }
} 
    5ce4:	0001883a 	nop
    5ce8:	e037883a 	mov	sp,fp
    5cec:	dfc00117 	ldw	ra,4(sp)
    5cf0:	df000017 	ldw	fp,0(sp)
    5cf4:	dec00204 	addi	sp,sp,8
    5cf8:	f800283a 	ret

00005cfc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    5cfc:	defffb04 	addi	sp,sp,-20
    5d00:	dfc00415 	stw	ra,16(sp)
    5d04:	df000315 	stw	fp,12(sp)
    5d08:	df000304 	addi	fp,sp,12
    5d0c:	e13ffd15 	stw	r4,-12(fp)
    5d10:	e17ffe15 	stw	r5,-8(fp)
    5d14:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5d18:	01c07fc4 	movi	r7,511
    5d1c:	01800044 	movi	r6,1
    5d20:	e17ffd17 	ldw	r5,-12(fp)
    5d24:	01000034 	movhi	r4,0
    5d28:	211cc104 	addi	r4,r4,29444
    5d2c:	0005c380 	call	5c38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    5d30:	01c07fc4 	movi	r7,511
    5d34:	000d883a 	mov	r6,zero
    5d38:	e17ffe17 	ldw	r5,-8(fp)
    5d3c:	01000034 	movhi	r4,0
    5d40:	211cbe04 	addi	r4,r4,29432
    5d44:	0005c380 	call	5c38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    5d48:	01c07fc4 	movi	r7,511
    5d4c:	01800044 	movi	r6,1
    5d50:	e17fff17 	ldw	r5,-4(fp)
    5d54:	01000034 	movhi	r4,0
    5d58:	211cc404 	addi	r4,r4,29456
    5d5c:	0005c380 	call	5c38 <alt_open_fd>
}  
    5d60:	0001883a 	nop
    5d64:	e037883a 	mov	sp,fp
    5d68:	dfc00117 	ldw	ra,4(sp)
    5d6c:	df000017 	ldw	fp,0(sp)
    5d70:	dec00204 	addi	sp,sp,8
    5d74:	f800283a 	ret

00005d78 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    5d78:	defff004 	addi	sp,sp,-64
    5d7c:	df000f15 	stw	fp,60(sp)
    5d80:	df000f04 	addi	fp,sp,60
    5d84:	e13ffd15 	stw	r4,-12(fp)
    5d88:	e17ffe15 	stw	r5,-8(fp)
    5d8c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    5d90:	00bffa84 	movi	r2,-22
    5d94:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5d98:	e0bffd17 	ldw	r2,-12(fp)
    5d9c:	10800828 	cmpgeui	r2,r2,32
    5da0:	1000501e 	bne	r2,zero,5ee4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5da4:	0005303a 	rdctl	r2,status
    5da8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5dac:	e0fff617 	ldw	r3,-40(fp)
    5db0:	00bfff84 	movi	r2,-2
    5db4:	1884703a 	and	r2,r3,r2
    5db8:	1001703a 	wrctl	status,r2
  
  return context;
    5dbc:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    5dc0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    5dc4:	00800274 	movhi	r2,9
    5dc8:	10a91404 	addi	r2,r2,-23472
    5dcc:	e0fffd17 	ldw	r3,-12(fp)
    5dd0:	180690fa 	slli	r3,r3,3
    5dd4:	10c5883a 	add	r2,r2,r3
    5dd8:	e0ffff17 	ldw	r3,-4(fp)
    5ddc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    5de0:	00800274 	movhi	r2,9
    5de4:	10a91404 	addi	r2,r2,-23472
    5de8:	e0fffd17 	ldw	r3,-12(fp)
    5dec:	180690fa 	slli	r3,r3,3
    5df0:	10c5883a 	add	r2,r2,r3
    5df4:	10800104 	addi	r2,r2,4
    5df8:	e0fffe17 	ldw	r3,-8(fp)
    5dfc:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    5e00:	e0bfff17 	ldw	r2,-4(fp)
    5e04:	10001926 	beq	r2,zero,5e6c <alt_irq_register+0xf4>
    5e08:	e0bffd17 	ldw	r2,-12(fp)
    5e0c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5e10:	0005303a 	rdctl	r2,status
    5e14:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5e18:	e0fff717 	ldw	r3,-36(fp)
    5e1c:	00bfff84 	movi	r2,-2
    5e20:	1884703a 	and	r2,r3,r2
    5e24:	1001703a 	wrctl	status,r2
  
  return context;
    5e28:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5e2c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    5e30:	00c00044 	movi	r3,1
    5e34:	e0bff217 	ldw	r2,-56(fp)
    5e38:	1884983a 	sll	r2,r3,r2
    5e3c:	1007883a 	mov	r3,r2
    5e40:	d0a74317 	ldw	r2,-25332(gp)
    5e44:	1884b03a 	or	r2,r3,r2
    5e48:	d0a74315 	stw	r2,-25332(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5e4c:	d0a74317 	ldw	r2,-25332(gp)
    5e50:	100170fa 	wrctl	ienable,r2
    5e54:	e0bff817 	ldw	r2,-32(fp)
    5e58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5e5c:	e0bff917 	ldw	r2,-28(fp)
    5e60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5e64:	0005883a 	mov	r2,zero
    5e68:	00001906 	br	5ed0 <alt_irq_register+0x158>
    5e6c:	e0bffd17 	ldw	r2,-12(fp)
    5e70:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5e74:	0005303a 	rdctl	r2,status
    5e78:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5e7c:	e0fffa17 	ldw	r3,-24(fp)
    5e80:	00bfff84 	movi	r2,-2
    5e84:	1884703a 	and	r2,r3,r2
    5e88:	1001703a 	wrctl	status,r2
  
  return context;
    5e8c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5e90:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    5e94:	00c00044 	movi	r3,1
    5e98:	e0bff417 	ldw	r2,-48(fp)
    5e9c:	1884983a 	sll	r2,r3,r2
    5ea0:	0084303a 	nor	r2,zero,r2
    5ea4:	1007883a 	mov	r3,r2
    5ea8:	d0a74317 	ldw	r2,-25332(gp)
    5eac:	1884703a 	and	r2,r3,r2
    5eb0:	d0a74315 	stw	r2,-25332(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5eb4:	d0a74317 	ldw	r2,-25332(gp)
    5eb8:	100170fa 	wrctl	ienable,r2
    5ebc:	e0bffb17 	ldw	r2,-20(fp)
    5ec0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ec4:	e0bffc17 	ldw	r2,-16(fp)
    5ec8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5ecc:	0005883a 	mov	r2,zero
    5ed0:	e0bff115 	stw	r2,-60(fp)
    5ed4:	e0bff317 	ldw	r2,-52(fp)
    5ed8:	e0bff515 	stw	r2,-44(fp)
    5edc:	e0bff517 	ldw	r2,-44(fp)
    5ee0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    5ee4:	e0bff117 	ldw	r2,-60(fp)
}
    5ee8:	e037883a 	mov	sp,fp
    5eec:	df000017 	ldw	fp,0(sp)
    5ef0:	dec00104 	addi	sp,sp,4
    5ef4:	f800283a 	ret

00005ef8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5ef8:	defffe04 	addi	sp,sp,-8
    5efc:	dfc00115 	stw	ra,4(sp)
    5f00:	df000015 	stw	fp,0(sp)
    5f04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5f08:	d0a00b17 	ldw	r2,-32724(gp)
    5f0c:	10000326 	beq	r2,zero,5f1c <alt_get_errno+0x24>
    5f10:	d0a00b17 	ldw	r2,-32724(gp)
    5f14:	103ee83a 	callr	r2
    5f18:	00000106 	br	5f20 <alt_get_errno+0x28>
    5f1c:	d0a73f04 	addi	r2,gp,-25348
}
    5f20:	e037883a 	mov	sp,fp
    5f24:	dfc00117 	ldw	ra,4(sp)
    5f28:	df000017 	ldw	fp,0(sp)
    5f2c:	dec00204 	addi	sp,sp,8
    5f30:	f800283a 	ret

00005f34 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    5f34:	defffd04 	addi	sp,sp,-12
    5f38:	df000215 	stw	fp,8(sp)
    5f3c:	df000204 	addi	fp,sp,8
    5f40:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    5f44:	e0bfff17 	ldw	r2,-4(fp)
    5f48:	10800217 	ldw	r2,8(r2)
    5f4c:	10d00034 	orhi	r3,r2,16384
    5f50:	e0bfff17 	ldw	r2,-4(fp)
    5f54:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5f58:	e03ffe15 	stw	zero,-8(fp)
    5f5c:	00001d06 	br	5fd4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5f60:	00800034 	movhi	r2,0
    5f64:	109cbe04 	addi	r2,r2,29432
    5f68:	e0fffe17 	ldw	r3,-8(fp)
    5f6c:	18c00324 	muli	r3,r3,12
    5f70:	10c5883a 	add	r2,r2,r3
    5f74:	10c00017 	ldw	r3,0(r2)
    5f78:	e0bfff17 	ldw	r2,-4(fp)
    5f7c:	10800017 	ldw	r2,0(r2)
    5f80:	1880111e 	bne	r3,r2,5fc8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5f84:	00800034 	movhi	r2,0
    5f88:	109cbe04 	addi	r2,r2,29432
    5f8c:	e0fffe17 	ldw	r3,-8(fp)
    5f90:	18c00324 	muli	r3,r3,12
    5f94:	10c5883a 	add	r2,r2,r3
    5f98:	10800204 	addi	r2,r2,8
    5f9c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5fa0:	1000090e 	bge	r2,zero,5fc8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    5fa4:	e0bffe17 	ldw	r2,-8(fp)
    5fa8:	10c00324 	muli	r3,r2,12
    5fac:	00800034 	movhi	r2,0
    5fb0:	109cbe04 	addi	r2,r2,29432
    5fb4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5fb8:	e0bfff17 	ldw	r2,-4(fp)
    5fbc:	18800226 	beq	r3,r2,5fc8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    5fc0:	00bffcc4 	movi	r2,-13
    5fc4:	00000806 	br	5fe8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5fc8:	e0bffe17 	ldw	r2,-8(fp)
    5fcc:	10800044 	addi	r2,r2,1
    5fd0:	e0bffe15 	stw	r2,-8(fp)
    5fd4:	d0a00a17 	ldw	r2,-32728(gp)
    5fd8:	1007883a 	mov	r3,r2
    5fdc:	e0bffe17 	ldw	r2,-8(fp)
    5fe0:	18bfdf2e 	bgeu	r3,r2,5f60 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005f60>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    5fe4:	0005883a 	mov	r2,zero
}
    5fe8:	e037883a 	mov	sp,fp
    5fec:	df000017 	ldw	fp,0(sp)
    5ff0:	dec00104 	addi	sp,sp,4
    5ff4:	f800283a 	ret

00005ff8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    5ff8:	defff604 	addi	sp,sp,-40
    5ffc:	dfc00915 	stw	ra,36(sp)
    6000:	df000815 	stw	fp,32(sp)
    6004:	df000804 	addi	fp,sp,32
    6008:	e13ffd15 	stw	r4,-12(fp)
    600c:	e17ffe15 	stw	r5,-8(fp)
    6010:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    6014:	00bfffc4 	movi	r2,-1
    6018:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    601c:	00bffb44 	movi	r2,-19
    6020:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    6024:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    6028:	d1600804 	addi	r5,gp,-32736
    602c:	e13ffd17 	ldw	r4,-12(fp)
    6030:	0005b740 	call	5b74 <alt_find_dev>
    6034:	e0bff815 	stw	r2,-32(fp)
    6038:	e0bff817 	ldw	r2,-32(fp)
    603c:	1000051e 	bne	r2,zero,6054 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    6040:	e13ffd17 	ldw	r4,-12(fp)
    6044:	00063140 	call	6314 <alt_find_file>
    6048:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    604c:	00800044 	movi	r2,1
    6050:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    6054:	e0bff817 	ldw	r2,-32(fp)
    6058:	10002926 	beq	r2,zero,6100 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    605c:	e13ff817 	ldw	r4,-32(fp)
    6060:	000641c0 	call	641c <alt_get_fd>
    6064:	e0bff915 	stw	r2,-28(fp)
    6068:	e0bff917 	ldw	r2,-28(fp)
    606c:	1000030e 	bge	r2,zero,607c <open+0x84>
    {
      status = index;
    6070:	e0bff917 	ldw	r2,-28(fp)
    6074:	e0bffa15 	stw	r2,-24(fp)
    6078:	00002306 	br	6108 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    607c:	e0bff917 	ldw	r2,-28(fp)
    6080:	10c00324 	muli	r3,r2,12
    6084:	00800034 	movhi	r2,0
    6088:	109cbe04 	addi	r2,r2,29432
    608c:	1885883a 	add	r2,r3,r2
    6090:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    6094:	e0fffe17 	ldw	r3,-8(fp)
    6098:	00900034 	movhi	r2,16384
    609c:	10bfffc4 	addi	r2,r2,-1
    60a0:	1886703a 	and	r3,r3,r2
    60a4:	e0bffc17 	ldw	r2,-16(fp)
    60a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    60ac:	e0bffb17 	ldw	r2,-20(fp)
    60b0:	1000051e 	bne	r2,zero,60c8 <open+0xd0>
    60b4:	e13ffc17 	ldw	r4,-16(fp)
    60b8:	0005f340 	call	5f34 <alt_file_locked>
    60bc:	e0bffa15 	stw	r2,-24(fp)
    60c0:	e0bffa17 	ldw	r2,-24(fp)
    60c4:	10001016 	blt	r2,zero,6108 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    60c8:	e0bff817 	ldw	r2,-32(fp)
    60cc:	10800317 	ldw	r2,12(r2)
    60d0:	10000826 	beq	r2,zero,60f4 <open+0xfc>
    60d4:	e0bff817 	ldw	r2,-32(fp)
    60d8:	10800317 	ldw	r2,12(r2)
    60dc:	e1ffff17 	ldw	r7,-4(fp)
    60e0:	e1bffe17 	ldw	r6,-8(fp)
    60e4:	e17ffd17 	ldw	r5,-12(fp)
    60e8:	e13ffc17 	ldw	r4,-16(fp)
    60ec:	103ee83a 	callr	r2
    60f0:	00000106 	br	60f8 <open+0x100>
    60f4:	0005883a 	mov	r2,zero
    60f8:	e0bffa15 	stw	r2,-24(fp)
    60fc:	00000206 	br	6108 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    6100:	00bffb44 	movi	r2,-19
    6104:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    6108:	e0bffa17 	ldw	r2,-24(fp)
    610c:	1000090e 	bge	r2,zero,6134 <open+0x13c>
  {
    alt_release_fd (index);  
    6110:	e13ff917 	ldw	r4,-28(fp)
    6114:	00038b80 	call	38b8 <alt_release_fd>
    ALT_ERRNO = -status;
    6118:	0005ef80 	call	5ef8 <alt_get_errno>
    611c:	1007883a 	mov	r3,r2
    6120:	e0bffa17 	ldw	r2,-24(fp)
    6124:	0085c83a 	sub	r2,zero,r2
    6128:	18800015 	stw	r2,0(r3)
    return -1;
    612c:	00bfffc4 	movi	r2,-1
    6130:	00000106 	br	6138 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    6134:	e0bff917 	ldw	r2,-28(fp)
}
    6138:	e037883a 	mov	sp,fp
    613c:	dfc00117 	ldw	ra,4(sp)
    6140:	df000017 	ldw	fp,0(sp)
    6144:	dec00204 	addi	sp,sp,8
    6148:	f800283a 	ret

0000614c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    614c:	defffa04 	addi	sp,sp,-24
    6150:	df000515 	stw	fp,20(sp)
    6154:	df000504 	addi	fp,sp,20
    6158:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    615c:	0005303a 	rdctl	r2,status
    6160:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6164:	e0fffc17 	ldw	r3,-16(fp)
    6168:	00bfff84 	movi	r2,-2
    616c:	1884703a 	and	r2,r3,r2
    6170:	1001703a 	wrctl	status,r2
  
  return context;
    6174:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    6178:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    617c:	e0bfff17 	ldw	r2,-4(fp)
    6180:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    6184:	e0bffd17 	ldw	r2,-12(fp)
    6188:	10800017 	ldw	r2,0(r2)
    618c:	e0fffd17 	ldw	r3,-12(fp)
    6190:	18c00117 	ldw	r3,4(r3)
    6194:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    6198:	e0bffd17 	ldw	r2,-12(fp)
    619c:	10800117 	ldw	r2,4(r2)
    61a0:	e0fffd17 	ldw	r3,-12(fp)
    61a4:	18c00017 	ldw	r3,0(r3)
    61a8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    61ac:	e0bffd17 	ldw	r2,-12(fp)
    61b0:	e0fffd17 	ldw	r3,-12(fp)
    61b4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    61b8:	e0bffd17 	ldw	r2,-12(fp)
    61bc:	e0fffd17 	ldw	r3,-12(fp)
    61c0:	10c00015 	stw	r3,0(r2)
    61c4:	e0bffb17 	ldw	r2,-20(fp)
    61c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    61cc:	e0bffe17 	ldw	r2,-8(fp)
    61d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    61d4:	0001883a 	nop
    61d8:	e037883a 	mov	sp,fp
    61dc:	df000017 	ldw	fp,0(sp)
    61e0:	dec00104 	addi	sp,sp,4
    61e4:	f800283a 	ret

000061e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    61e8:	defffb04 	addi	sp,sp,-20
    61ec:	dfc00415 	stw	ra,16(sp)
    61f0:	df000315 	stw	fp,12(sp)
    61f4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    61f8:	d0a00e17 	ldw	r2,-32712(gp)
    61fc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    6200:	d0a74517 	ldw	r2,-25324(gp)
    6204:	10800044 	addi	r2,r2,1
    6208:	d0a74515 	stw	r2,-25324(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    620c:	00002e06 	br	62c8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    6210:	e0bffd17 	ldw	r2,-12(fp)
    6214:	10800017 	ldw	r2,0(r2)
    6218:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    621c:	e0bffd17 	ldw	r2,-12(fp)
    6220:	10800403 	ldbu	r2,16(r2)
    6224:	10803fcc 	andi	r2,r2,255
    6228:	10000426 	beq	r2,zero,623c <alt_tick+0x54>
    622c:	d0a74517 	ldw	r2,-25324(gp)
    6230:	1000021e 	bne	r2,zero,623c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    6234:	e0bffd17 	ldw	r2,-12(fp)
    6238:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    623c:	e0bffd17 	ldw	r2,-12(fp)
    6240:	10800217 	ldw	r2,8(r2)
    6244:	d0e74517 	ldw	r3,-25324(gp)
    6248:	18801d36 	bltu	r3,r2,62c0 <alt_tick+0xd8>
    624c:	e0bffd17 	ldw	r2,-12(fp)
    6250:	10800403 	ldbu	r2,16(r2)
    6254:	10803fcc 	andi	r2,r2,255
    6258:	1000191e 	bne	r2,zero,62c0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    625c:	e0bffd17 	ldw	r2,-12(fp)
    6260:	10800317 	ldw	r2,12(r2)
    6264:	e0fffd17 	ldw	r3,-12(fp)
    6268:	18c00517 	ldw	r3,20(r3)
    626c:	1809883a 	mov	r4,r3
    6270:	103ee83a 	callr	r2
    6274:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    6278:	e0bfff17 	ldw	r2,-4(fp)
    627c:	1000031e 	bne	r2,zero,628c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    6280:	e13ffd17 	ldw	r4,-12(fp)
    6284:	000614c0 	call	614c <alt_alarm_stop>
    6288:	00000d06 	br	62c0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    628c:	e0bffd17 	ldw	r2,-12(fp)
    6290:	10c00217 	ldw	r3,8(r2)
    6294:	e0bfff17 	ldw	r2,-4(fp)
    6298:	1887883a 	add	r3,r3,r2
    629c:	e0bffd17 	ldw	r2,-12(fp)
    62a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    62a4:	e0bffd17 	ldw	r2,-12(fp)
    62a8:	10c00217 	ldw	r3,8(r2)
    62ac:	d0a74517 	ldw	r2,-25324(gp)
    62b0:	1880032e 	bgeu	r3,r2,62c0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    62b4:	e0bffd17 	ldw	r2,-12(fp)
    62b8:	00c00044 	movi	r3,1
    62bc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    62c0:	e0bffe17 	ldw	r2,-8(fp)
    62c4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    62c8:	e0fffd17 	ldw	r3,-12(fp)
    62cc:	d0a00e04 	addi	r2,gp,-32712
    62d0:	18bfcf1e 	bne	r3,r2,6210 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006210>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    62d4:	0001883a 	nop
}
    62d8:	0001883a 	nop
    62dc:	e037883a 	mov	sp,fp
    62e0:	dfc00117 	ldw	ra,4(sp)
    62e4:	df000017 	ldw	fp,0(sp)
    62e8:	dec00204 	addi	sp,sp,8
    62ec:	f800283a 	ret

000062f0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    62f0:	deffff04 	addi	sp,sp,-4
    62f4:	df000015 	stw	fp,0(sp)
    62f8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    62fc:	000170fa 	wrctl	ienable,zero
}
    6300:	0001883a 	nop
    6304:	e037883a 	mov	sp,fp
    6308:	df000017 	ldw	fp,0(sp)
    630c:	dec00104 	addi	sp,sp,4
    6310:	f800283a 	ret

00006314 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    6314:	defffb04 	addi	sp,sp,-20
    6318:	dfc00415 	stw	ra,16(sp)
    631c:	df000315 	stw	fp,12(sp)
    6320:	df000304 	addi	fp,sp,12
    6324:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    6328:	d0a00617 	ldw	r2,-32744(gp)
    632c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6330:	00003106 	br	63f8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    6334:	e0bffd17 	ldw	r2,-12(fp)
    6338:	10800217 	ldw	r2,8(r2)
    633c:	1009883a 	mov	r4,r2
    6340:	00004c80 	call	4c8 <strlen>
    6344:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    6348:	e0bffd17 	ldw	r2,-12(fp)
    634c:	10c00217 	ldw	r3,8(r2)
    6350:	e0bffe17 	ldw	r2,-8(fp)
    6354:	10bfffc4 	addi	r2,r2,-1
    6358:	1885883a 	add	r2,r3,r2
    635c:	10800003 	ldbu	r2,0(r2)
    6360:	10803fcc 	andi	r2,r2,255
    6364:	1080201c 	xori	r2,r2,128
    6368:	10bfe004 	addi	r2,r2,-128
    636c:	10800bd8 	cmpnei	r2,r2,47
    6370:	1000031e 	bne	r2,zero,6380 <alt_find_file+0x6c>
    {
      len -= 1;
    6374:	e0bffe17 	ldw	r2,-8(fp)
    6378:	10bfffc4 	addi	r2,r2,-1
    637c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6380:	e0bffe17 	ldw	r2,-8(fp)
    6384:	e0ffff17 	ldw	r3,-4(fp)
    6388:	1885883a 	add	r2,r3,r2
    638c:	10800003 	ldbu	r2,0(r2)
    6390:	10803fcc 	andi	r2,r2,255
    6394:	1080201c 	xori	r2,r2,128
    6398:	10bfe004 	addi	r2,r2,-128
    639c:	10800be0 	cmpeqi	r2,r2,47
    63a0:	1000081e 	bne	r2,zero,63c4 <alt_find_file+0xb0>
    63a4:	e0bffe17 	ldw	r2,-8(fp)
    63a8:	e0ffff17 	ldw	r3,-4(fp)
    63ac:	1885883a 	add	r2,r3,r2
    63b0:	10800003 	ldbu	r2,0(r2)
    63b4:	10803fcc 	andi	r2,r2,255
    63b8:	1080201c 	xori	r2,r2,128
    63bc:	10bfe004 	addi	r2,r2,-128
    63c0:	10000a1e 	bne	r2,zero,63ec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    63c4:	e0bffd17 	ldw	r2,-12(fp)
    63c8:	10800217 	ldw	r2,8(r2)
    63cc:	e0fffe17 	ldw	r3,-8(fp)
    63d0:	180d883a 	mov	r6,r3
    63d4:	e17fff17 	ldw	r5,-4(fp)
    63d8:	1009883a 	mov	r4,r2
    63dc:	00066380 	call	6638 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    63e0:	1000021e 	bne	r2,zero,63ec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    63e4:	e0bffd17 	ldw	r2,-12(fp)
    63e8:	00000706 	br	6408 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    63ec:	e0bffd17 	ldw	r2,-12(fp)
    63f0:	10800017 	ldw	r2,0(r2)
    63f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    63f8:	e0fffd17 	ldw	r3,-12(fp)
    63fc:	d0a00604 	addi	r2,gp,-32744
    6400:	18bfcc1e 	bne	r3,r2,6334 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006334>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    6404:	0005883a 	mov	r2,zero
}
    6408:	e037883a 	mov	sp,fp
    640c:	dfc00117 	ldw	ra,4(sp)
    6410:	df000017 	ldw	fp,0(sp)
    6414:	dec00204 	addi	sp,sp,8
    6418:	f800283a 	ret

0000641c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    641c:	defffc04 	addi	sp,sp,-16
    6420:	df000315 	stw	fp,12(sp)
    6424:	df000304 	addi	fp,sp,12
    6428:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    642c:	00bffa04 	movi	r2,-24
    6430:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6434:	e03ffd15 	stw	zero,-12(fp)
    6438:	00001906 	br	64a0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    643c:	00800034 	movhi	r2,0
    6440:	109cbe04 	addi	r2,r2,29432
    6444:	e0fffd17 	ldw	r3,-12(fp)
    6448:	18c00324 	muli	r3,r3,12
    644c:	10c5883a 	add	r2,r2,r3
    6450:	10800017 	ldw	r2,0(r2)
    6454:	10000f1e 	bne	r2,zero,6494 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    6458:	00800034 	movhi	r2,0
    645c:	109cbe04 	addi	r2,r2,29432
    6460:	e0fffd17 	ldw	r3,-12(fp)
    6464:	18c00324 	muli	r3,r3,12
    6468:	10c5883a 	add	r2,r2,r3
    646c:	e0ffff17 	ldw	r3,-4(fp)
    6470:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    6474:	d0e00a17 	ldw	r3,-32728(gp)
    6478:	e0bffd17 	ldw	r2,-12(fp)
    647c:	1880020e 	bge	r3,r2,6488 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    6480:	e0bffd17 	ldw	r2,-12(fp)
    6484:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    6488:	e0bffd17 	ldw	r2,-12(fp)
    648c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    6490:	00000606 	br	64ac <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6494:	e0bffd17 	ldw	r2,-12(fp)
    6498:	10800044 	addi	r2,r2,1
    649c:	e0bffd15 	stw	r2,-12(fp)
    64a0:	e0bffd17 	ldw	r2,-12(fp)
    64a4:	10800810 	cmplti	r2,r2,32
    64a8:	103fe41e 	bne	r2,zero,643c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000643c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    64ac:	e0bffe17 	ldw	r2,-8(fp)
}
    64b0:	e037883a 	mov	sp,fp
    64b4:	df000017 	ldw	fp,0(sp)
    64b8:	dec00104 	addi	sp,sp,4
    64bc:	f800283a 	ret

000064c0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    64c0:	defffb04 	addi	sp,sp,-20
    64c4:	df000415 	stw	fp,16(sp)
    64c8:	df000404 	addi	fp,sp,16
    64cc:	e13ffe15 	stw	r4,-8(fp)
    64d0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    64d4:	e0bfff17 	ldw	r2,-4(fp)
    64d8:	10840070 	cmpltui	r2,r2,4097
    64dc:	1000021e 	bne	r2,zero,64e8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    64e0:	00840004 	movi	r2,4096
    64e4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    64e8:	e0fffe17 	ldw	r3,-8(fp)
    64ec:	e0bfff17 	ldw	r2,-4(fp)
    64f0:	1885883a 	add	r2,r3,r2
    64f4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    64f8:	e0bffe17 	ldw	r2,-8(fp)
    64fc:	e0bffc15 	stw	r2,-16(fp)
    6500:	00000506 	br	6518 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    6504:	e0bffc17 	ldw	r2,-16(fp)
    6508:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    650c:	e0bffc17 	ldw	r2,-16(fp)
    6510:	10800804 	addi	r2,r2,32
    6514:	e0bffc15 	stw	r2,-16(fp)
    6518:	e0fffc17 	ldw	r3,-16(fp)
    651c:	e0bffd17 	ldw	r2,-12(fp)
    6520:	18bff836 	bltu	r3,r2,6504 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006504>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    6524:	e0bffe17 	ldw	r2,-8(fp)
    6528:	108007cc 	andi	r2,r2,31
    652c:	10000226 	beq	r2,zero,6538 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    6530:	e0bffc17 	ldw	r2,-16(fp)
    6534:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    6538:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    653c:	0001883a 	nop
    6540:	e037883a 	mov	sp,fp
    6544:	df000017 	ldw	fp,0(sp)
    6548:	dec00104 	addi	sp,sp,4
    654c:	f800283a 	ret

00006550 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    6550:	defffe04 	addi	sp,sp,-8
    6554:	df000115 	stw	fp,4(sp)
    6558:	df000104 	addi	fp,sp,4
    655c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    6560:	e0bfff17 	ldw	r2,-4(fp)
    6564:	10bffe84 	addi	r2,r2,-6
    6568:	10c00428 	cmpgeui	r3,r2,16
    656c:	18001a1e 	bne	r3,zero,65d8 <alt_exception_cause_generated_bad_addr+0x88>
    6570:	100690ba 	slli	r3,r2,2
    6574:	00800034 	movhi	r2,0
    6578:	10996204 	addi	r2,r2,25992
    657c:	1885883a 	add	r2,r3,r2
    6580:	10800017 	ldw	r2,0(r2)
    6584:	1000683a 	jmp	r2
    6588:	000065c8 	cmpgei	zero,zero,407
    658c:	000065c8 	cmpgei	zero,zero,407
    6590:	000065d8 	cmpnei	zero,zero,407
    6594:	000065d8 	cmpnei	zero,zero,407
    6598:	000065d8 	cmpnei	zero,zero,407
    659c:	000065c8 	cmpgei	zero,zero,407
    65a0:	000065d0 	cmplti	zero,zero,407
    65a4:	000065d8 	cmpnei	zero,zero,407
    65a8:	000065c8 	cmpgei	zero,zero,407
    65ac:	000065c8 	cmpgei	zero,zero,407
    65b0:	000065d8 	cmpnei	zero,zero,407
    65b4:	000065c8 	cmpgei	zero,zero,407
    65b8:	000065d0 	cmplti	zero,zero,407
    65bc:	000065d8 	cmpnei	zero,zero,407
    65c0:	000065d8 	cmpnei	zero,zero,407
    65c4:	000065c8 	cmpgei	zero,zero,407
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    65c8:	00800044 	movi	r2,1
    65cc:	00000306 	br	65dc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    65d0:	0005883a 	mov	r2,zero
    65d4:	00000106 	br	65dc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    65d8:	0005883a 	mov	r2,zero
  }
}
    65dc:	e037883a 	mov	sp,fp
    65e0:	df000017 	ldw	fp,0(sp)
    65e4:	dec00104 	addi	sp,sp,4
    65e8:	f800283a 	ret

000065ec <atexit>:
    65ec:	200b883a 	mov	r5,r4
    65f0:	000f883a 	mov	r7,zero
    65f4:	000d883a 	mov	r6,zero
    65f8:	0009883a 	mov	r4,zero
    65fc:	00066b41 	jmpi	66b4 <__register_exitproc>

00006600 <exit>:
    6600:	defffe04 	addi	sp,sp,-8
    6604:	000b883a 	mov	r5,zero
    6608:	dc000015 	stw	r16,0(sp)
    660c:	dfc00115 	stw	ra,4(sp)
    6610:	2021883a 	mov	r16,r4
    6614:	00067cc0 	call	67cc <__call_exitprocs>
    6618:	00800074 	movhi	r2,1
    661c:	10a1c504 	addi	r2,r2,-30956
    6620:	11000017 	ldw	r4,0(r2)
    6624:	20800f17 	ldw	r2,60(r4)
    6628:	10000126 	beq	r2,zero,6630 <exit+0x30>
    662c:	103ee83a 	callr	r2
    6630:	8009883a 	mov	r4,r16
    6634:	000694c0 	call	694c <_exit>

00006638 <memcmp>:
    6638:	01c000c4 	movi	r7,3
    663c:	3980192e 	bgeu	r7,r6,66a4 <memcmp+0x6c>
    6640:	2144b03a 	or	r2,r4,r5
    6644:	11c4703a 	and	r2,r2,r7
    6648:	10000f26 	beq	r2,zero,6688 <memcmp+0x50>
    664c:	20800003 	ldbu	r2,0(r4)
    6650:	28c00003 	ldbu	r3,0(r5)
    6654:	10c0151e 	bne	r2,r3,66ac <memcmp+0x74>
    6658:	31bfff84 	addi	r6,r6,-2
    665c:	01ffffc4 	movi	r7,-1
    6660:	00000406 	br	6674 <memcmp+0x3c>
    6664:	20800003 	ldbu	r2,0(r4)
    6668:	28c00003 	ldbu	r3,0(r5)
    666c:	31bfffc4 	addi	r6,r6,-1
    6670:	10c00e1e 	bne	r2,r3,66ac <memcmp+0x74>
    6674:	21000044 	addi	r4,r4,1
    6678:	29400044 	addi	r5,r5,1
    667c:	31fff91e 	bne	r6,r7,6664 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006664>
    6680:	0005883a 	mov	r2,zero
    6684:	f800283a 	ret
    6688:	20c00017 	ldw	r3,0(r4)
    668c:	28800017 	ldw	r2,0(r5)
    6690:	18bfee1e 	bne	r3,r2,664c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000664c>
    6694:	31bfff04 	addi	r6,r6,-4
    6698:	21000104 	addi	r4,r4,4
    669c:	29400104 	addi	r5,r5,4
    66a0:	39bff936 	bltu	r7,r6,6688 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006688>
    66a4:	303fe91e 	bne	r6,zero,664c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000664c>
    66a8:	003ff506 	br	6680 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006680>
    66ac:	10c5c83a 	sub	r2,r2,r3
    66b0:	f800283a 	ret

000066b4 <__register_exitproc>:
    66b4:	defffa04 	addi	sp,sp,-24
    66b8:	dc000315 	stw	r16,12(sp)
    66bc:	04000074 	movhi	r16,1
    66c0:	8421c504 	addi	r16,r16,-30956
    66c4:	80c00017 	ldw	r3,0(r16)
    66c8:	dc400415 	stw	r17,16(sp)
    66cc:	dfc00515 	stw	ra,20(sp)
    66d0:	18805217 	ldw	r2,328(r3)
    66d4:	2023883a 	mov	r17,r4
    66d8:	10003726 	beq	r2,zero,67b8 <__register_exitproc+0x104>
    66dc:	10c00117 	ldw	r3,4(r2)
    66e0:	010007c4 	movi	r4,31
    66e4:	20c00e16 	blt	r4,r3,6720 <__register_exitproc+0x6c>
    66e8:	1a000044 	addi	r8,r3,1
    66ec:	8800221e 	bne	r17,zero,6778 <__register_exitproc+0xc4>
    66f0:	18c00084 	addi	r3,r3,2
    66f4:	18c7883a 	add	r3,r3,r3
    66f8:	18c7883a 	add	r3,r3,r3
    66fc:	12000115 	stw	r8,4(r2)
    6700:	10c7883a 	add	r3,r2,r3
    6704:	19400015 	stw	r5,0(r3)
    6708:	0005883a 	mov	r2,zero
    670c:	dfc00517 	ldw	ra,20(sp)
    6710:	dc400417 	ldw	r17,16(sp)
    6714:	dc000317 	ldw	r16,12(sp)
    6718:	dec00604 	addi	sp,sp,24
    671c:	f800283a 	ret
    6720:	00800034 	movhi	r2,0
    6724:	10800004 	addi	r2,r2,0
    6728:	10002626 	beq	r2,zero,67c4 <__register_exitproc+0x110>
    672c:	01006404 	movi	r4,400
    6730:	d9400015 	stw	r5,0(sp)
    6734:	d9800115 	stw	r6,4(sp)
    6738:	d9c00215 	stw	r7,8(sp)
    673c:	00000000 	call	0 <__alt_mem_SDRAM>
    6740:	d9400017 	ldw	r5,0(sp)
    6744:	d9800117 	ldw	r6,4(sp)
    6748:	d9c00217 	ldw	r7,8(sp)
    674c:	10001d26 	beq	r2,zero,67c4 <__register_exitproc+0x110>
    6750:	81000017 	ldw	r4,0(r16)
    6754:	10000115 	stw	zero,4(r2)
    6758:	02000044 	movi	r8,1
    675c:	22405217 	ldw	r9,328(r4)
    6760:	0007883a 	mov	r3,zero
    6764:	12400015 	stw	r9,0(r2)
    6768:	20805215 	stw	r2,328(r4)
    676c:	10006215 	stw	zero,392(r2)
    6770:	10006315 	stw	zero,396(r2)
    6774:	883fde26 	beq	r17,zero,66f0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00066f0>
    6778:	18c9883a 	add	r4,r3,r3
    677c:	2109883a 	add	r4,r4,r4
    6780:	1109883a 	add	r4,r2,r4
    6784:	21802215 	stw	r6,136(r4)
    6788:	01800044 	movi	r6,1
    678c:	12406217 	ldw	r9,392(r2)
    6790:	30cc983a 	sll	r6,r6,r3
    6794:	4992b03a 	or	r9,r9,r6
    6798:	12406215 	stw	r9,392(r2)
    679c:	21c04215 	stw	r7,264(r4)
    67a0:	01000084 	movi	r4,2
    67a4:	893fd21e 	bne	r17,r4,66f0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00066f0>
    67a8:	11006317 	ldw	r4,396(r2)
    67ac:	218cb03a 	or	r6,r4,r6
    67b0:	11806315 	stw	r6,396(r2)
    67b4:	003fce06 	br	66f0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00066f0>
    67b8:	18805304 	addi	r2,r3,332
    67bc:	18805215 	stw	r2,328(r3)
    67c0:	003fc606 	br	66dc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00066dc>
    67c4:	00bfffc4 	movi	r2,-1
    67c8:	003fd006 	br	670c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000670c>

000067cc <__call_exitprocs>:
    67cc:	defff504 	addi	sp,sp,-44
    67d0:	df000915 	stw	fp,36(sp)
    67d4:	dd400615 	stw	r21,24(sp)
    67d8:	dc800315 	stw	r18,12(sp)
    67dc:	dfc00a15 	stw	ra,40(sp)
    67e0:	ddc00815 	stw	r23,32(sp)
    67e4:	dd800715 	stw	r22,28(sp)
    67e8:	dd000515 	stw	r20,20(sp)
    67ec:	dcc00415 	stw	r19,16(sp)
    67f0:	dc400215 	stw	r17,8(sp)
    67f4:	dc000115 	stw	r16,4(sp)
    67f8:	d9000015 	stw	r4,0(sp)
    67fc:	2839883a 	mov	fp,r5
    6800:	04800044 	movi	r18,1
    6804:	057fffc4 	movi	r21,-1
    6808:	00800074 	movhi	r2,1
    680c:	10a1c504 	addi	r2,r2,-30956
    6810:	12000017 	ldw	r8,0(r2)
    6814:	45005217 	ldw	r20,328(r8)
    6818:	44c05204 	addi	r19,r8,328
    681c:	a0001c26 	beq	r20,zero,6890 <__call_exitprocs+0xc4>
    6820:	a0800117 	ldw	r2,4(r20)
    6824:	15ffffc4 	addi	r23,r2,-1
    6828:	b8000d16 	blt	r23,zero,6860 <__call_exitprocs+0x94>
    682c:	14000044 	addi	r16,r2,1
    6830:	8421883a 	add	r16,r16,r16
    6834:	8421883a 	add	r16,r16,r16
    6838:	84402004 	addi	r17,r16,128
    683c:	a463883a 	add	r17,r20,r17
    6840:	a421883a 	add	r16,r20,r16
    6844:	e0001e26 	beq	fp,zero,68c0 <__call_exitprocs+0xf4>
    6848:	80804017 	ldw	r2,256(r16)
    684c:	e0801c26 	beq	fp,r2,68c0 <__call_exitprocs+0xf4>
    6850:	bdffffc4 	addi	r23,r23,-1
    6854:	843fff04 	addi	r16,r16,-4
    6858:	8c7fff04 	addi	r17,r17,-4
    685c:	bd7ff91e 	bne	r23,r21,6844 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006844>
    6860:	00800034 	movhi	r2,0
    6864:	10800004 	addi	r2,r2,0
    6868:	10000926 	beq	r2,zero,6890 <__call_exitprocs+0xc4>
    686c:	a0800117 	ldw	r2,4(r20)
    6870:	1000301e 	bne	r2,zero,6934 <__call_exitprocs+0x168>
    6874:	a0800017 	ldw	r2,0(r20)
    6878:	10003226 	beq	r2,zero,6944 <__call_exitprocs+0x178>
    687c:	a009883a 	mov	r4,r20
    6880:	98800015 	stw	r2,0(r19)
    6884:	00000000 	call	0 <__alt_mem_SDRAM>
    6888:	9d000017 	ldw	r20,0(r19)
    688c:	a03fe41e 	bne	r20,zero,6820 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006820>
    6890:	dfc00a17 	ldw	ra,40(sp)
    6894:	df000917 	ldw	fp,36(sp)
    6898:	ddc00817 	ldw	r23,32(sp)
    689c:	dd800717 	ldw	r22,28(sp)
    68a0:	dd400617 	ldw	r21,24(sp)
    68a4:	dd000517 	ldw	r20,20(sp)
    68a8:	dcc00417 	ldw	r19,16(sp)
    68ac:	dc800317 	ldw	r18,12(sp)
    68b0:	dc400217 	ldw	r17,8(sp)
    68b4:	dc000117 	ldw	r16,4(sp)
    68b8:	dec00b04 	addi	sp,sp,44
    68bc:	f800283a 	ret
    68c0:	a0800117 	ldw	r2,4(r20)
    68c4:	80c00017 	ldw	r3,0(r16)
    68c8:	10bfffc4 	addi	r2,r2,-1
    68cc:	15c01426 	beq	r2,r23,6920 <__call_exitprocs+0x154>
    68d0:	80000015 	stw	zero,0(r16)
    68d4:	183fde26 	beq	r3,zero,6850 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006850>
    68d8:	95c8983a 	sll	r4,r18,r23
    68dc:	a0806217 	ldw	r2,392(r20)
    68e0:	a5800117 	ldw	r22,4(r20)
    68e4:	2084703a 	and	r2,r4,r2
    68e8:	10000b26 	beq	r2,zero,6918 <__call_exitprocs+0x14c>
    68ec:	a0806317 	ldw	r2,396(r20)
    68f0:	2088703a 	and	r4,r4,r2
    68f4:	20000c1e 	bne	r4,zero,6928 <__call_exitprocs+0x15c>
    68f8:	89400017 	ldw	r5,0(r17)
    68fc:	d9000017 	ldw	r4,0(sp)
    6900:	183ee83a 	callr	r3
    6904:	a0800117 	ldw	r2,4(r20)
    6908:	15bfbf1e 	bne	r2,r22,6808 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006808>
    690c:	98800017 	ldw	r2,0(r19)
    6910:	153fcf26 	beq	r2,r20,6850 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006850>
    6914:	003fbc06 	br	6808 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006808>
    6918:	183ee83a 	callr	r3
    691c:	003ff906 	br	6904 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006904>
    6920:	a5c00115 	stw	r23,4(r20)
    6924:	003feb06 	br	68d4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00068d4>
    6928:	89000017 	ldw	r4,0(r17)
    692c:	183ee83a 	callr	r3
    6930:	003ff406 	br	6904 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006904>
    6934:	a0800017 	ldw	r2,0(r20)
    6938:	a027883a 	mov	r19,r20
    693c:	1029883a 	mov	r20,r2
    6940:	003fb606 	br	681c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000681c>
    6944:	0005883a 	mov	r2,zero
    6948:	003ffb06 	br	6938 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006938>

0000694c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    694c:	defffd04 	addi	sp,sp,-12
    6950:	df000215 	stw	fp,8(sp)
    6954:	df000204 	addi	fp,sp,8
    6958:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    695c:	0001883a 	nop
    6960:	e0bfff17 	ldw	r2,-4(fp)
    6964:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    6968:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    696c:	10000226 	beq	r2,zero,6978 <_exit+0x2c>
    ALT_SIM_FAIL();
    6970:	002af070 	cmpltui	zero,zero,43969
    6974:	00000106 	br	697c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    6978:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    697c:	003fff06 	br	697c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000697c>
