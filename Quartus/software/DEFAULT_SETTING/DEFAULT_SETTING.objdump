
DEFAULT_SETTING.elf:     file format elf32-littlenios2
DEFAULT_SETTING.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000c318 memsz 0x0000c318 flags r-x
    LOAD off    0x0000d338 vaddr 0x0000c338 paddr 0x0000dff8 align 2**12
         filesz 0x00001cc0 memsz 0x00001cc0 flags rw-
    LOAD off    0x0000fcb8 vaddr 0x0000fcb8 paddr 0x0000fcb8 align 2**12
         filesz 0x00000000 memsz 0x00450a70 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000072dc  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00004e14  00007524  00007524  00008524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cc0  0000c338  0000dff8  0000d338  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00450b15  0000fcb8  0000fcb8  0000fcb8  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00460728  00460728  0000eff8  2**0
                  CONTENTS
  7 .Onchip_SRAM  00000000  08000000  08000000  0000eff8  2**0
                  CONTENTS
  8 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  0000eff8  2**0
                  CONTENTS
  9 .ARM_A9_HPS_axi_sdram 00000000  40000000  40000000  0000eff8  2**0
                  CONTENTS
 10 .comment      00000023  00000000  00000000  0000eff8  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000a50  00000000  00000000  0000f020  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00017ba6  00000000  00000000  0000fa70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000063fa  00000000  00000000  00027616  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007199  00000000  00000000  0002da10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001b38  00000000  00000000  00034bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002f88  00000000  00000000  000366e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00004a4c  00000000  00000000  0003966c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_alt_sim_info 00000020  00000000  00000000  0003e0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00000680  00000000  00000000  0003e0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .thread_model 00000003  00000000  00000000  00041825  2**0
                  CONTENTS, READONLY
 21 .cpu          00000005  00000000  00000000  00041828  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  0004182d  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  0004182e  2**0
                  CONTENTS, READONLY
 24 .sysid_hash   00000004  00000000  00000000  0004182f  2**0
                  CONTENTS, READONLY
 25 .sysid_base   00000004  00000000  00000000  00041833  2**0
                  CONTENTS, READONLY
 26 .sysid_time   00000004  00000000  00000000  00041837  2**0
                  CONTENTS, READONLY
 27 .stderr_dev   00000009  00000000  00000000  0004183b  2**0
                  CONTENTS, READONLY
 28 .stdin_dev    00000009  00000000  00000000  00041844  2**0
                  CONTENTS, READONLY
 29 .stdout_dev   00000009  00000000  00000000  0004184d  2**0
                  CONTENTS, READONLY
 30 .sopc_system_name 0000000f  00000000  00000000  00041856  2**0
                  CONTENTS, READONLY
 31 .quartus_project_dir 0000002b  00000000  00000000  00041865  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     004881a6  00000000  00000000  00041890  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
00007524 l    d  .rodata	00000000 .rodata
0000c338 l    d  .rwdata	00000000 .rwdata
0000fcb8 l    d  .bss	00000000 .bss
00460728 l    d  .SDRAM	00000000 .SDRAM
08000000 l    d  .Onchip_SRAM	00000000 .Onchip_SRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
40000000 l    d  .ARM_A9_HPS_axi_sdram	00000000 .ARM_A9_HPS_axi_sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/src/KAU_EMBEDED_19/Quartus/software/DEFAULT_SETTING_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00001104 l     F .text	00000008 __fp_unlock
00001118 l     F .text	0000019c __sinit.part.1
000012b4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000c338 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00003d60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00003e6c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00003e98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00004104 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000041e4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000042d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000044a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000dfec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000046f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00004824 l     F .text	00000034 alt_dev_reg
0000cd0c l     O .rwdata	00001060 JTAG_UART
0000dd6c l     O .rwdata	0000002c ADC
0000dd98 l     O .rwdata	00000030 AV_Config
0000ddc8 l     O .rwdata	00000030 Audio_Subsystem_Audio
0000ddf8 l     O .rwdata	0000002c IrDA
0000de24 l     O .rwdata	00000038 PS2_Port
0000de5c l     O .rwdata	00000038 PS2_Port_Dual
0000de94 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
0000def0 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
0000df4c l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00005238 l     F .text	00000210 altera_avalon_jtag_uart_irq
00005448 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00005a80 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000066f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000695c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00006a9c l     F .text	0000003c alt_get_errno
00006ad8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000fcf0 g     O .bss	00000004 alt_instruction_exception_handler
00003b58 g     F .text	00000054 _isatty_r
000043e0 g     F .text	0000007c alt_main
00000f98 g     F .text	000000c0 _puts_r
00006148 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00460628 g     O .bss	00000100 alt_irq
00003880 g     F .text	00000060 _lseek_r
0000dff8 g       *ABS*	00000000 __flash_rwdata_start
00460728 g       *ABS*	00000000 __alt_heap_start
0000fcb8 g     O .bss	00000004 Audio_Recording
00002e34 g     F .text	0000005c __sseek
00001454 g     F .text	00000010 __sinit
00005f60 g     F .text	00000034 read_CE_bit
000012bc g     F .text	00000068 __sfmoreglue
00004480 g     F .text	00000024 __malloc_unlock
000062e8 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
000097dc g     O .rodata	00000584 IMG_Num3_L
0000dfa0 g     O .rwdata	00000004 pTimer
00002520 g     F .text	0000015c memmove
0000143c g     F .text	00000018 _cleanup
0000fcc4 g     O .bss	00000004 pixel_buffer_start
00006e94 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00003afc g     F .text	0000005c _fstat_r
00008750 g     O .rodata	00000584 IMG_Num0_L
0000fcd4 g     O .bss	00000004 errno
00002db0 g     F .text	00000008 __seofread
0000b370 g     O .rodata	00000584 IMG_Num8_L
0000fce0 g     O .bss	00000004 alt_argv
00015fa0 g       *ABS*	00000000 _gp
0000cb8c g     O .rwdata	00000180 alt_fd_list
00006898 g     F .text	00000090 alt_find_dev
000023d8 g     F .text	00000148 memcpy
0000110c g     F .text	0000000c _cleanup_r
00006a20 g     F .text	0000007c alt_io_redirect
00000584 g     F .text	00000354 clockDraw_L
00007524 g       *ABS*	00000000 __DTOR_END__
0000fd1c g     O .bss	00040000 front_buffer
00005e30 g     F .text	00000090 alt_up_irda_write_fd
00001058 g     F .text	00000014 puts
000070f4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00000a54 g     F .text	00000058 plot_pixel
00005c2c g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00005640 g     F .text	0000021c altera_avalon_jtag_uart_read
00003ca4 g     F .text	00000064 .hidden __udivsi3
00009d60 g     O .rodata	00000584 IMG_Num4_L
00004140 g     F .text	000000a4 isatty
00009258 g     O .rodata	00000584 IMG_Num2_L
00005bcc g     F .text	00000060 alt_up_irda_disable_read_interrupt
00007064 g     F .text	00000090 alt_icache_flush
0000dfa8 g     O .rwdata	00000004 pTime_high
0000fcd0 g     O .bss	00000004 __malloc_top_pad
000014a4 g     F .text	000004bc __sfvwrite_r
0000fcc0 g     O .bss	00000004 Audio_Buffer_index
00002d08 g     F .text	00000054 _sbrk_r
00003a9c g     F .text	00000060 _read_r
0000dfe0 g     O .rwdata	00000004 alt_max_fd
0000b8f4 g     O .rodata	00000584 IMG_Num9_L
000030a0 g     F .text	000000f0 _fclose_r
00005f94 g     F .text	00000030 read_num_bytes_available
0000341c g     F .text	00000030 fflush
0000fccc g     O .bss	00000004 __malloc_max_sbrked_mem
00003f84 g     F .text	00000180 alt_irq_register
00005efc g     F .text	00000034 read_RI_bit
0000dfac g     O .rwdata	00000004 pixel_ctrl_ptr
0000430c g     F .text	000000d4 lseek
0000dfc0 g     O .rwdata	00000004 _global_impure_ptr
000027a4 g     F .text	00000564 _realloc_r
00460728 g       *ABS*	00000000 __bss_end
00006d8c g     F .text	00000108 alt_tick
00005ff8 g     F .text	0000002c read_data_byte
00001474 g     F .text	00000018 __fp_lock_all
00006cf0 g     F .text	0000009c alt_alarm_stop
00005f30 g     F .text	00000030 read_RE_bit
0000fcd8 g     O .bss	00000004 alt_irq_active
00005c6c g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
0000cb64 g     O .rwdata	00000028 alt_dev_null
000061a8 g     F .text	00000074 alt_up_ps2_write_data_byte
000066d8 g     F .text	00000020 alt_dcache_flush_all
0000dff8 g       *ABS*	00000000 __ram_rwdata_end
0000dfd8 g     O .rwdata	00000008 alt_dev_list
0000fcbc g     O .bss	00000004 Audio_Play
0000472c g     F .text	000000f8 write
0000c338 g       *ABS*	00000000 __ram_rodata_end
00003ed4 g     F .text	000000b0 fstat
0000dfb0 g     O .rwdata	00000004 pAudio
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000003a0 g     F .text	00000090 Init_timer
0000dfa4 g     O .rwdata	00000004 pTime_low
40000000 g       *ABS*	00000000 __alt_mem_ARM_A9_HPS_axi_sdram
00003d08 g     F .text	00000058 .hidden __umodsi3
00460728 g       *ABS*	00000000 end
000064d8 g     F .text	00000098 alt_up_ps2_write_fd
00005ca8 g     F .text	00000044 alt_up_irda_check_parity
0004fd1c g     O .bss	001e8480 r_buf
00005184 g     F .text	000000b4 altera_avalon_jtag_uart_init
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00007524 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
00005afc g     F .text	00000074 alt_avalon_timer_sc_init
0000585c g     F .text	00000224 altera_avalon_jtag_uart_write
00001464 g     F .text	00000004 __sfp_lock_acquire
000022f4 g     F .text	000000e4 memchr
00003570 g     F .text	00000310 _free_r
00007370 g     F .text	00000180 __call_exitprocs
0000dfc8 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
0000fce8 g     O .bss	00000004 _alt_tick_rate
0000fcec g     O .bss	00000004 _alt_nticks
000044e0 g     F .text	000000fc read
00004890 g     F .text	00000790 alt_sys_init
00007258 g     F .text	00000118 __register_exitproc
000063f4 g     F .text	00000058 alt_up_ps2_clear_fifo
000054e8 g     F .text	00000068 altera_avalon_jtag_uart_close
0000c338 g       *ABS*	00000000 __ram_rwdata_start
00007524 g       *ABS*	00000000 __ram_rodata_start
0000fcf4 g     O .bss	00000028 __malloc_current_mallinfo
0000be78 g     O .rodata	000002c4 IMG_Clone_L
00005020 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00006fc0 g     F .text	000000a4 alt_get_fd
00000ce8 g     F .text	00000050 Init_KEY_SW
0000304c g     F .text	00000054 _close_r
000071dc g     F .text	0000007c memcmp
000050e0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00460728 g       *ABS*	00000000 __alt_stack_base
00005130 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005b70 g     F .text	0000005c alt_up_irda_enable_read_interrupt
00002ef8 g     F .text	00000154 __swsetup_r
00001324 g     F .text	00000118 __sfp
0000c75c g     O .rwdata	00000408 __malloc_av_
00001470 g     F .text	00000004 __sinit_lock_release
00002d5c g     F .text	00000054 __sread
000008d8 g     F .text	0000012c imageDraw
00006eb8 g     F .text	00000108 alt_find_file
00006734 g     F .text	000000a4 alt_dev_llist_insert
0000445c g     F .text	00000024 __malloc_lock
00004640 g     F .text	000000b0 sbrk
00008cd4 g     O .rodata	00000584 IMG_Num1_L
000033c0 g     F .text	0000005c _fflush_r
0000fcb8 g       *ABS*	00000000 __bss_start
0000267c g     F .text	00000128 memset
00000520 g     F .text	00000064 Init_VGA
00000f7c g     F .text	0000001c main
0000fce4 g     O .bss	00000004 alt_envp
00000b64 g     F .text	00000184 Audio_ISR
0000fcc8 g     O .bss	00000004 __malloc_max_total_mem
00005080 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002e90 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00003190 g     F .text	00000014 fclose
00006384 g     F .text	00000070 alt_up_ps2_read_data_byte
00001ae8 g     F .text	0000080c _malloc_r
0000dfe4 g     O .rwdata	00000004 alt_errno
00001960 g     F .text	000000c4 _fwalk
00005cec g     F .text	00000040 alt_up_irda_write_data
00006570 g     F .text	0000003c alt_up_ps2_open_dev
00003bac g     F .text	00000084 .hidden __divsi3
0000344c g     F .text	00000124 _malloc_trim_r
000060ec g     F .text	0000005c alt_up_ps2_enable_read_interrupt
00007524 g       *ABS*	00000000 __CTOR_END__
00007524 g       *ABS*	00000000 __flash_rodata_start
00007524 g       *ABS*	00000000 __DTOR_LIST__
00004858 g     F .text	00000038 alt_irq_init
000045dc g     F .text	00000064 alt_release_fd
00005fc4 g     F .text	00000034 read_data_valid
0000dfbc g     O .rwdata	00000004 pSwitch
00006284 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00007190 g     F .text	00000014 atexit
00002e98 g     F .text	00000060 _write_r
00007e3a g     O .rodata	00000916 IMG_afternoon_L
0000dfc4 g     O .rwdata	00000004 _impure_ptr
0000fcdc g     O .bss	00000004 alt_argc
000031a4 g     F .text	0000021c __sflush_r
00006838 g     F .text	00000060 _do_dtors
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
0000adec g     O .rodata	00000584 IMG_Num7_L
00000020 g       .exceptions	00000000 alt_irq_entry
0000148c g     F .text	00000018 __fp_unlock_all
0000a868 g     O .rodata	00000584 IMG_Num6_L
0000dfd0 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
0023819c g     O .bss	00040000 back_buffer
0000dff8 g       *ABS*	00000000 _edata
00460728 g       *ABS*	00000000 _end
00000248 g       *ABS*	00000000 __ram_exceptions_end
00007524 g     O .rodata	00000916 IMG_morning_L
00005550 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0027819c g     O .bss	001e8480 l_buf
08000000 g       *ABS*	00000000 __alt_mem_Onchip_SRAM
00000a04 g     F .text	00000050 wait_for_vsync
00002db8 g     F .text	0000007c __swrite
0000dfcc g     O .rwdata	00000004 __malloc_trim_threshold
000071a4 g     F .text	00000038 exit
00005d2c g     F .text	00000074 alt_up_irda_read_data
00001a24 g     F .text	000000c4 _fwalk_reent
00006024 g     F .text	000000c8 alt_up_ps2_init
00003c30 g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001468 g     F .text	00000004 __sfp_lock_release
00005ec0 g     F .text	0000003c alt_up_irda_open_dev
0000a2e4 g     O .rodata	00000584 IMG_Num5_L
000074f0 g     F .text	00000034 _exit
000065ac g     F .text	0000012c alt_alarm_start
0000dfb4 g     O .rwdata	00000004 pLED
00000284 g     F .text	0000011c Timer_ISR
000038e0 g     F .text	000001bc __smakebuf_r
0000621c g     F .text	00000068 alt_up_ps2_wait_for_ack
0000106c g     F .text	00000098 strlen
00000b24 g     F .text	00000040 Init_Audio
00006b9c g     F .text	00000154 open
00000d38 g     F .text	00000244 Pushbutton_ISR
00006928 g     F .text	00000034 alt_icache_flush_all
0000dfe8 g     O .rwdata	00000004 alt_priority_mask
00000430 g     F .text	000000f0 IMG_Number_L
0000dfb8 g     O .rwdata	00000004 pKEY
0046061c g     O .bss	0000000c currentTime
0000644c g     F .text	0000008c alt_up_ps2_read_fd
00000aac g     F .text	00000078 clear_screen
00005da0 g     F .text	00000090 alt_up_irda_read_fd
0000dff0 g     O .rwdata	00000008 alt_alarm_list
000067d8 g     F .text	00000060 _do_ctors
00003d9c g     F .text	000000d0 close
0000424c g     F .text	00000084 alt_load
0000146c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008011b4 	movhi	r2,70
 140:	10818a04 	addi	r2,r2,1576
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008011b4 	movhi	r2,70
 158:	10818a04 	addi	r2,r2,1576
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a75417 	ldw	r2,-25264(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a75417 	ldw	r2,-25264(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     254:	d697e814 	ori	gp,gp,24480
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     25c:	10bf2e14 	ori	r2,r2,64696

    movhi r3, %hi(__bss_end)
     260:	00c011b4 	movhi	r3,70
    ori r3, r3, %lo(__bss_end)
     264:	18c1ca14 	ori	r3,r3,1832

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	000424c0 	call	424c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	00043e00 	call	43e0 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000280>

00000284 <Timer_ISR>:
extern volatile int *pixel_ctrl_ptr;
extern volatile int pixel_buffer_start;
extern void clockDraw_L(int x,int y,timeSet currentTime);
extern void clear_screen();

void Timer_ISR() {
     284:	defffd04 	addi	sp,sp,-12
     288:	dfc00215 	stw	ra,8(sp)
     28c:	df000115 	stw	fp,4(sp)
     290:	df000104 	addi	fp,sp,4
	*pTimer = 0;
     294:	d0a00017 	ldw	r2,-32768(gp)
     298:	10000015 	stw	zero,0(r2)
	pixel_buffer_start = *(pixel_ctrl_ptr + 1);
     29c:	d0a00317 	ldw	r2,-32756(gp)
     2a0:	10800117 	ldw	r2,4(r2)
     2a4:	d0a74915 	stw	r2,-25308(gp)
	clear_screen();
     2a8:	0000aac0 	call	aac <clear_screen>
	currentTime.sec ++;
     2ac:	008011b4 	movhi	r2,70
     2b0:	10818704 	addi	r2,r2,1564
     2b4:	10800217 	ldw	r2,8(r2)
     2b8:	10c00044 	addi	r3,r2,1
     2bc:	008011b4 	movhi	r2,70
     2c0:	10818704 	addi	r2,r2,1564
     2c4:	10c00215 	stw	r3,8(r2)

	if ( currentTime.sec == 60) {
     2c8:	008011b4 	movhi	r2,70
     2cc:	10818704 	addi	r2,r2,1564
     2d0:	10800217 	ldw	r2,8(r2)
     2d4:	10800f18 	cmpnei	r2,r2,60
     2d8:	1000211e 	bne	r2,zero,360 <Timer_ISR+0xdc>
		currentTime.sec = 0;
     2dc:	008011b4 	movhi	r2,70
     2e0:	10818704 	addi	r2,r2,1564
     2e4:	10000215 	stw	zero,8(r2)
		currentTime.min++;
     2e8:	008011b4 	movhi	r2,70
     2ec:	10818704 	addi	r2,r2,1564
     2f0:	10800117 	ldw	r2,4(r2)
     2f4:	10c00044 	addi	r3,r2,1
     2f8:	008011b4 	movhi	r2,70
     2fc:	10818704 	addi	r2,r2,1564
     300:	10c00115 	stw	r3,4(r2)
		if (currentTime.min==60)  {
     304:	008011b4 	movhi	r2,70
     308:	10818704 	addi	r2,r2,1564
     30c:	10800117 	ldw	r2,4(r2)
     310:	10800f18 	cmpnei	r2,r2,60
     314:	1000121e 	bne	r2,zero,360 <Timer_ISR+0xdc>
			currentTime.min=0;
     318:	008011b4 	movhi	r2,70
     31c:	10818704 	addi	r2,r2,1564
     320:	10000115 	stw	zero,4(r2)
			currentTime.hour++;
     324:	008011b4 	movhi	r2,70
     328:	10818704 	addi	r2,r2,1564
     32c:	10800017 	ldw	r2,0(r2)
     330:	10c00044 	addi	r3,r2,1
     334:	008011b4 	movhi	r2,70
     338:	10818704 	addi	r2,r2,1564
     33c:	10c00015 	stw	r3,0(r2)
			if (currentTime.hour == 25)
     340:	008011b4 	movhi	r2,70
     344:	10818704 	addi	r2,r2,1564
     348:	10800017 	ldw	r2,0(r2)
     34c:	10800658 	cmpnei	r2,r2,25
     350:	1000031e 	bne	r2,zero,360 <Timer_ISR+0xdc>
				currentTime.hour=0;
     354:	008011b4 	movhi	r2,70
     358:	10818704 	addi	r2,r2,1564
     35c:	10000015 	stw	zero,0(r2)
		}
	}
	clockDraw_L(5,5,currentTime);
     360:	008011b4 	movhi	r2,70
     364:	10818704 	addi	r2,r2,1564
     368:	10c00217 	ldw	r3,8(r2)
     36c:	d8c00015 	stw	r3,0(sp)
     370:	11800017 	ldw	r6,0(r2)
     374:	11c00117 	ldw	r7,4(r2)
     378:	01400144 	movi	r5,5
     37c:	01000144 	movi	r4,5
     380:	00005840 	call	584 <clockDraw_L>
	wait_for_vsync();
     384:	0000a040 	call	a04 <wait_for_vsync>
}
     388:	0001883a 	nop
     38c:	e037883a 	mov	sp,fp
     390:	dfc00117 	ldw	ra,4(sp)
     394:	df000017 	ldw	fp,0(sp)
     398:	dec00204 	addi	sp,sp,8
     39c:	f800283a 	ret

000003a0 <Init_timer>:

void Init_timer() {
     3a0:	defffd04 	addi	sp,sp,-12
     3a4:	dfc00215 	stw	ra,8(sp)
     3a8:	df000115 	stw	fp,4(sp)
     3ac:	df000104 	addi	fp,sp,4
	int pb_ctxt=0;
     3b0:	e03fff15 	stw	zero,-4(fp)
	*(pTime_low)     = 0xE0FF;
     3b4:	d0a00117 	ldw	r2,-32764(gp)
     3b8:	00f83fd4 	movui	r3,57599
     3bc:	10c00015 	stw	r3,0(r2)
	*(pTime_high)    = 0x05F5;
     3c0:	d0a00217 	ldw	r2,-32760(gp)
     3c4:	00c17d44 	movi	r3,1525
     3c8:	10c00015 	stw	r3,0(r2)
	*(pTimer+1)      = 0x0007;
     3cc:	d0a00017 	ldw	r2,-32768(gp)
     3d0:	10800104 	addi	r2,r2,4
     3d4:	00c001c4 	movi	r3,7
     3d8:	10c00015 	stw	r3,0(r2)
	alt_irq_register(0, (void *)&pb_ctxt, (void *)Timer_ISR);
     3dc:	01800034 	movhi	r6,0
     3e0:	3180a104 	addi	r6,r6,644
     3e4:	e17fff04 	addi	r5,fp,-4
     3e8:	0009883a 	mov	r4,zero
     3ec:	0003f840 	call	3f84 <alt_irq_register>
	currentTime.hour = 24 ;
     3f0:	008011b4 	movhi	r2,70
     3f4:	10818704 	addi	r2,r2,1564
     3f8:	00c00604 	movi	r3,24
     3fc:	10c00015 	stw	r3,0(r2)
	currentTime.min = 0 ;
     400:	008011b4 	movhi	r2,70
     404:	10818704 	addi	r2,r2,1564
     408:	10000115 	stw	zero,4(r2)
	currentTime.sec = 0 ;
     40c:	008011b4 	movhi	r2,70
     410:	10818704 	addi	r2,r2,1564
     414:	10000215 	stw	zero,8(r2)
}
     418:	0001883a 	nop
     41c:	e037883a 	mov	sp,fp
     420:	dfc00117 	ldw	ra,4(sp)
     424:	df000017 	ldw	fp,0(sp)
     428:	dec00204 	addi	sp,sp,8
     42c:	f800283a 	ret

00000430 <IMG_Number_L>:
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
};

const unsigned short * IMG_Number_L(int num) {
     430:	defffe04 	addi	sp,sp,-8
     434:	df000115 	stw	fp,4(sp)
     438:	df000104 	addi	fp,sp,4
     43c:	e13fff15 	stw	r4,-4(fp)
	switch (num) {
     440:	e0bfff17 	ldw	r2,-4(fp)
     444:	108002a8 	cmpgeui	r2,r2,10
     448:	10002f1e 	bne	r2,zero,508 <IMG_Number_L+0xd8>
     44c:	e0bfff17 	ldw	r2,-4(fp)
     450:	100690ba 	slli	r3,r2,2
     454:	00800034 	movhi	r2,0
     458:	10811a04 	addi	r2,r2,1128
     45c:	1885883a 	add	r2,r3,r2
     460:	10800017 	ldw	r2,0(r2)
     464:	1000683a 	jmp	r2
     468:	00000490 	cmplti	zero,zero,18
     46c:	0000049c 	xori	zero,zero,18
     470:	000004a8 	cmpgeui	zero,zero,18
     474:	000004b4 	movhi	zero,18
     478:	000004c0 	call	4c <__flash_exceptions_start+0x2c>
     47c:	000004cc 	andi	zero,zero,19
     480:	000004d8 	cmpnei	zero,zero,19
     484:	000004e4 	muli	zero,zero,19
     488:	000004f0 	cmpltui	zero,zero,19
     48c:	000004fc 	xorhi	zero,zero,19
		case 0: return IMG_Num0_L;
     490:	00800074 	movhi	r2,1
     494:	10a1d404 	addi	r2,r2,-30896
     498:	00001d06 	br	510 <IMG_Number_L+0xe0>
		case 1: return IMG_Num1_L;
     49c:	00800074 	movhi	r2,1
     4a0:	10a33504 	addi	r2,r2,-29484
     4a4:	00001a06 	br	510 <IMG_Number_L+0xe0>
		case 2: return IMG_Num2_L;
     4a8:	00800074 	movhi	r2,1
     4ac:	10a49604 	addi	r2,r2,-28072
     4b0:	00001706 	br	510 <IMG_Number_L+0xe0>
		case 3: return IMG_Num3_L;
     4b4:	00800074 	movhi	r2,1
     4b8:	10a5f704 	addi	r2,r2,-26660
     4bc:	00001406 	br	510 <IMG_Number_L+0xe0>
		case 4: return IMG_Num4_L;
     4c0:	00800074 	movhi	r2,1
     4c4:	10a75804 	addi	r2,r2,-25248
     4c8:	00001106 	br	510 <IMG_Number_L+0xe0>
		case 5: return IMG_Num5_L;
     4cc:	00800074 	movhi	r2,1
     4d0:	10a8b904 	addi	r2,r2,-23836
     4d4:	00000e06 	br	510 <IMG_Number_L+0xe0>
		case 6: return IMG_Num6_L;
     4d8:	00800074 	movhi	r2,1
     4dc:	10aa1a04 	addi	r2,r2,-22424
     4e0:	00000b06 	br	510 <IMG_Number_L+0xe0>
		case 7: return IMG_Num7_L;
     4e4:	00800074 	movhi	r2,1
     4e8:	10ab7b04 	addi	r2,r2,-21012
     4ec:	00000806 	br	510 <IMG_Number_L+0xe0>
		case 8: return IMG_Num8_L;
     4f0:	00800074 	movhi	r2,1
     4f4:	10acdc04 	addi	r2,r2,-19600
     4f8:	00000506 	br	510 <IMG_Number_L+0xe0>
		case 9: return IMG_Num9_L;
     4fc:	00800074 	movhi	r2,1
     500:	10ae3d04 	addi	r2,r2,-18188
     504:	00000206 	br	510 <IMG_Number_L+0xe0>
		default : return IMG_Num0_L;
     508:	00800074 	movhi	r2,1
     50c:	10a1d404 	addi	r2,r2,-30896
	}
}
     510:	e037883a 	mov	sp,fp
     514:	df000017 	ldw	fp,0(sp)
     518:	dec00104 	addi	sp,sp,4
     51c:	f800283a 	ret

00000520 <Init_VGA>:
void imageDraw(int x,int y, short * img);
void clear_screen();

extern void Timer_ISR();

void Init_VGA() {
     520:	defffe04 	addi	sp,sp,-8
     524:	dfc00115 	stw	ra,4(sp)
     528:	df000015 	stw	fp,0(sp)
     52c:	d839883a 	mov	fp,sp
	Init_timer();
     530:	00003a00 	call	3a0 <Init_timer>
	*(pixel_ctrl_ptr + 1) = front_buffer;
     534:	d0a00317 	ldw	r2,-32756(gp)
     538:	10c00104 	addi	r3,r2,4
     53c:	00800074 	movhi	r2,1
     540:	10bf4704 	addi	r2,r2,-740
     544:	18800015 	stw	r2,0(r3)
	wait_for_vsync();
     548:	0000a040 	call	a04 <wait_for_vsync>

	pixel_buffer_start = *pixel_ctrl_ptr;
     54c:	d0a00317 	ldw	r2,-32756(gp)
     550:	10800017 	ldw	r2,0(r2)
     554:	d0a74915 	stw	r2,-25308(gp)
	*(pixel_ctrl_ptr + 1) = back_buffer;
     558:	d0a00317 	ldw	r2,-32756(gp)
     55c:	10c00104 	addi	r3,r2,4
     560:	00800934 	movhi	r2,36
     564:	10a06704 	addi	r2,r2,-32356
     568:	18800015 	stw	r2,0(r3)
}
     56c:	0001883a 	nop
     570:	e037883a 	mov	sp,fp
     574:	dfc00117 	ldw	ra,4(sp)
     578:	df000017 	ldw	fp,0(sp)
     57c:	dec00204 	addi	sp,sp,8
     580:	f800283a 	ret

00000584 <clockDraw_L>:

void clockDraw_L(int x,int y,timeSet currentTime) {
     584:	defff204 	addi	sp,sp,-56
     588:	dfc00b15 	stw	ra,44(sp)
     58c:	df000a15 	stw	fp,40(sp)
     590:	dc400915 	stw	r17,36(sp)
     594:	dc000815 	stw	r16,32(sp)
     598:	df000a04 	addi	fp,sp,40
     59c:	e13ffc15 	stw	r4,-16(fp)
     5a0:	e17ffd15 	stw	r5,-12(fp)
     5a4:	e1800215 	stw	r6,8(fp)
     5a8:	e1c00315 	stw	r7,12(fp)
	if (currentTime.hour > 12)
     5ac:	e0800217 	ldw	r2,8(fp)
     5b0:	10800350 	cmplti	r2,r2,13
     5b4:	1000061e 	bne	r2,zero,5d0 <clockDraw_L+0x4c>
		imageDraw(x,y,IMG_afternoon_L);
     5b8:	01800034 	movhi	r6,0
     5bc:	319f8e84 	addi	r6,r6,32314
     5c0:	e17ffd17 	ldw	r5,-12(fp)
     5c4:	e13ffc17 	ldw	r4,-16(fp)
     5c8:	00008d80 	call	8d8 <imageDraw>
     5cc:	00000506 	br	5e4 <clockDraw_L+0x60>
	else imageDraw(x,y,IMG_morning_L);
     5d0:	01800034 	movhi	r6,0
     5d4:	319d4904 	addi	r6,r6,29988
     5d8:	e17ffd17 	ldw	r5,-12(fp)
     5dc:	e13ffc17 	ldw	r4,-16(fp)
     5e0:	00008d80 	call	8d8 <imageDraw>

	int offset_y = (int)IMG_afternoon_L[1];
     5e4:	008006c4 	movi	r2,27
     5e8:	10bfffcc 	andi	r2,r2,65535
     5ec:	e0bff615 	stw	r2,-40(fp)
	int offset_num_x = (int)IMG_Num0_L[0];
     5f0:	00800584 	movi	r2,22
     5f4:	10bfffcc 	andi	r2,r2,65535
     5f8:	e0bff715 	stw	r2,-36(fp)
	int offset_clone_x = (int)IMG_Clone_L[0];
     5fc:	008002c4 	movi	r2,11
     600:	10bfffcc 	andi	r2,r2,65535
     604:	e0bff815 	stw	r2,-32(fp)

	int hour = ( currentTime.hour < 25 && currentTime.hour > 0 ) ? ( currentTime.hour>12)?currentTime.hour-12:currentTime.hour : 0;
     608:	e0800217 	ldw	r2,8(fp)
     60c:	10800648 	cmpgei	r2,r2,25
     610:	10000a1e 	bne	r2,zero,63c <clockDraw_L+0xb8>
     614:	e0800217 	ldw	r2,8(fp)
     618:	0080080e 	bge	zero,r2,63c <clockDraw_L+0xb8>
     61c:	e0800217 	ldw	r2,8(fp)
     620:	10800350 	cmplti	r2,r2,13
     624:	1000031e 	bne	r2,zero,634 <clockDraw_L+0xb0>
     628:	e0800217 	ldw	r2,8(fp)
     62c:	10bffd04 	addi	r2,r2,-12
     630:	00000306 	br	640 <clockDraw_L+0xbc>
     634:	e0800217 	ldw	r2,8(fp)
     638:	00000106 	br	640 <clockDraw_L+0xbc>
     63c:	0005883a 	mov	r2,zero
     640:	e0bff915 	stw	r2,-28(fp)
	int min = ( currentTime.min < 60 && currentTime.min > 0) ? currentTime.min : 0;
     644:	e0800317 	ldw	r2,12(fp)
     648:	10800f08 	cmpgei	r2,r2,60
     64c:	1000041e 	bne	r2,zero,660 <clockDraw_L+0xdc>
     650:	e0800317 	ldw	r2,12(fp)
     654:	0080020e 	bge	zero,r2,660 <clockDraw_L+0xdc>
     658:	e0800317 	ldw	r2,12(fp)
     65c:	00000106 	br	664 <clockDraw_L+0xe0>
     660:	0005883a 	mov	r2,zero
     664:	e0bffa15 	stw	r2,-24(fp)
	int sec = ( currentTime.sec < 60 && currentTime.sec > 0) ? currentTime.sec : 0;
     668:	e0800417 	ldw	r2,16(fp)
     66c:	10800f08 	cmpgei	r2,r2,60
     670:	1000041e 	bne	r2,zero,684 <clockDraw_L+0x100>
     674:	e0800417 	ldw	r2,16(fp)
     678:	0080020e 	bge	zero,r2,684 <clockDraw_L+0x100>
     67c:	e0800417 	ldw	r2,16(fp)
     680:	00000106 	br	688 <clockDraw_L+0x104>
     684:	0005883a 	mov	r2,zero
     688:	e0bffb15 	stw	r2,-20(fp)

	imageDraw(x,y+offset_y,IMG_Number_L(hour/10));
     68c:	e0fffd17 	ldw	r3,-12(fp)
     690:	e0bff617 	ldw	r2,-40(fp)
     694:	18a1883a 	add	r16,r3,r2
     698:	e0fff917 	ldw	r3,-28(fp)
     69c:	00800284 	movi	r2,10
     6a0:	1885283a 	div	r2,r3,r2
     6a4:	1009883a 	mov	r4,r2
     6a8:	00004300 	call	430 <IMG_Number_L>
     6ac:	100d883a 	mov	r6,r2
     6b0:	800b883a 	mov	r5,r16
     6b4:	e13ffc17 	ldw	r4,-16(fp)
     6b8:	00008d80 	call	8d8 <imageDraw>
	imageDraw(x+offset_num_x,y+offset_y,IMG_Number_L(hour%10));
     6bc:	e0fffc17 	ldw	r3,-16(fp)
     6c0:	e0bff717 	ldw	r2,-36(fp)
     6c4:	18a1883a 	add	r16,r3,r2
     6c8:	e0fffd17 	ldw	r3,-12(fp)
     6cc:	e0bff617 	ldw	r2,-40(fp)
     6d0:	18a3883a 	add	r17,r3,r2
     6d4:	e0bff917 	ldw	r2,-28(fp)
     6d8:	00c00284 	movi	r3,10
     6dc:	10c7283a 	div	r3,r2,r3
     6e0:	18c002a4 	muli	r3,r3,10
     6e4:	10c5c83a 	sub	r2,r2,r3
     6e8:	1009883a 	mov	r4,r2
     6ec:	00004300 	call	430 <IMG_Number_L>
     6f0:	100d883a 	mov	r6,r2
     6f4:	880b883a 	mov	r5,r17
     6f8:	8009883a 	mov	r4,r16
     6fc:	00008d80 	call	8d8 <imageDraw>
	imageDraw(x+(offset_num_x*2),y+offset_y,IMG_Clone_L);
     700:	e0bff717 	ldw	r2,-36(fp)
     704:	1085883a 	add	r2,r2,r2
     708:	1007883a 	mov	r3,r2
     70c:	e0bffc17 	ldw	r2,-16(fp)
     710:	1889883a 	add	r4,r3,r2
     714:	e0fffd17 	ldw	r3,-12(fp)
     718:	e0bff617 	ldw	r2,-40(fp)
     71c:	1885883a 	add	r2,r3,r2
     720:	01800074 	movhi	r6,1
     724:	31af9e04 	addi	r6,r6,-16776
     728:	100b883a 	mov	r5,r2
     72c:	00008d80 	call	8d8 <imageDraw>
	imageDraw(x+(offset_num_x*2)+offset_clone_x,y+offset_y,IMG_Number_L(min/10));
     730:	e0bff717 	ldw	r2,-36(fp)
     734:	1085883a 	add	r2,r2,r2
     738:	1007883a 	mov	r3,r2
     73c:	e0bffc17 	ldw	r2,-16(fp)
     740:	1887883a 	add	r3,r3,r2
     744:	e0bff817 	ldw	r2,-32(fp)
     748:	18a1883a 	add	r16,r3,r2
     74c:	e0fffd17 	ldw	r3,-12(fp)
     750:	e0bff617 	ldw	r2,-40(fp)
     754:	18a3883a 	add	r17,r3,r2
     758:	e0fffa17 	ldw	r3,-24(fp)
     75c:	00800284 	movi	r2,10
     760:	1885283a 	div	r2,r3,r2
     764:	1009883a 	mov	r4,r2
     768:	00004300 	call	430 <IMG_Number_L>
     76c:	100d883a 	mov	r6,r2
     770:	880b883a 	mov	r5,r17
     774:	8009883a 	mov	r4,r16
     778:	00008d80 	call	8d8 <imageDraw>
	imageDraw(x+(offset_num_x*3)+offset_clone_x,y+offset_y,IMG_Number_L(min%10));
     77c:	e0fff717 	ldw	r3,-36(fp)
     780:	1805883a 	mov	r2,r3
     784:	1085883a 	add	r2,r2,r2
     788:	10c7883a 	add	r3,r2,r3
     78c:	e0bffc17 	ldw	r2,-16(fp)
     790:	1887883a 	add	r3,r3,r2
     794:	e0bff817 	ldw	r2,-32(fp)
     798:	18a1883a 	add	r16,r3,r2
     79c:	e0fffd17 	ldw	r3,-12(fp)
     7a0:	e0bff617 	ldw	r2,-40(fp)
     7a4:	18a3883a 	add	r17,r3,r2
     7a8:	e0bffa17 	ldw	r2,-24(fp)
     7ac:	00c00284 	movi	r3,10
     7b0:	10c7283a 	div	r3,r2,r3
     7b4:	18c002a4 	muli	r3,r3,10
     7b8:	10c5c83a 	sub	r2,r2,r3
     7bc:	1009883a 	mov	r4,r2
     7c0:	00004300 	call	430 <IMG_Number_L>
     7c4:	100d883a 	mov	r6,r2
     7c8:	880b883a 	mov	r5,r17
     7cc:	8009883a 	mov	r4,r16
     7d0:	00008d80 	call	8d8 <imageDraw>
	imageDraw(x+(offset_num_x*4)+offset_clone_x,y+offset_y,IMG_Clone_L);
     7d4:	e0bff717 	ldw	r2,-36(fp)
     7d8:	1085883a 	add	r2,r2,r2
     7dc:	1085883a 	add	r2,r2,r2
     7e0:	1007883a 	mov	r3,r2
     7e4:	e0bffc17 	ldw	r2,-16(fp)
     7e8:	1887883a 	add	r3,r3,r2
     7ec:	e0bff817 	ldw	r2,-32(fp)
     7f0:	1889883a 	add	r4,r3,r2
     7f4:	e0fffd17 	ldw	r3,-12(fp)
     7f8:	e0bff617 	ldw	r2,-40(fp)
     7fc:	1885883a 	add	r2,r3,r2
     800:	01800074 	movhi	r6,1
     804:	31af9e04 	addi	r6,r6,-16776
     808:	100b883a 	mov	r5,r2
     80c:	00008d80 	call	8d8 <imageDraw>
	imageDraw(x+(offset_num_x*4)+(offset_clone_x*2),y+offset_y,IMG_Number_L(sec/10));
     810:	e0bff717 	ldw	r2,-36(fp)
     814:	1085883a 	add	r2,r2,r2
     818:	1085883a 	add	r2,r2,r2
     81c:	1007883a 	mov	r3,r2
     820:	e0bffc17 	ldw	r2,-16(fp)
     824:	1887883a 	add	r3,r3,r2
     828:	e0bff817 	ldw	r2,-32(fp)
     82c:	1085883a 	add	r2,r2,r2
     830:	18a1883a 	add	r16,r3,r2
     834:	e0fffd17 	ldw	r3,-12(fp)
     838:	e0bff617 	ldw	r2,-40(fp)
     83c:	18a3883a 	add	r17,r3,r2
     840:	e0fffb17 	ldw	r3,-20(fp)
     844:	00800284 	movi	r2,10
     848:	1885283a 	div	r2,r3,r2
     84c:	1009883a 	mov	r4,r2
     850:	00004300 	call	430 <IMG_Number_L>
     854:	100d883a 	mov	r6,r2
     858:	880b883a 	mov	r5,r17
     85c:	8009883a 	mov	r4,r16
     860:	00008d80 	call	8d8 <imageDraw>
	imageDraw(x+(offset_num_x*5)+(offset_clone_x*2),y+offset_y,IMG_Number_L(sec%10));
     864:	e0bff717 	ldw	r2,-36(fp)
     868:	10c00164 	muli	r3,r2,5
     86c:	e0bffc17 	ldw	r2,-16(fp)
     870:	1887883a 	add	r3,r3,r2
     874:	e0bff817 	ldw	r2,-32(fp)
     878:	1085883a 	add	r2,r2,r2
     87c:	18a1883a 	add	r16,r3,r2
     880:	e0fffd17 	ldw	r3,-12(fp)
     884:	e0bff617 	ldw	r2,-40(fp)
     888:	18a3883a 	add	r17,r3,r2
     88c:	e0bffb17 	ldw	r2,-20(fp)
     890:	00c00284 	movi	r3,10
     894:	10c7283a 	div	r3,r2,r3
     898:	18c002a4 	muli	r3,r3,10
     89c:	10c5c83a 	sub	r2,r2,r3
     8a0:	1009883a 	mov	r4,r2
     8a4:	00004300 	call	430 <IMG_Number_L>
     8a8:	100d883a 	mov	r6,r2
     8ac:	880b883a 	mov	r5,r17
     8b0:	8009883a 	mov	r4,r16
     8b4:	00008d80 	call	8d8 <imageDraw>
}
     8b8:	0001883a 	nop
     8bc:	e6fffe04 	addi	sp,fp,-8
     8c0:	dfc00317 	ldw	ra,12(sp)
     8c4:	df000217 	ldw	fp,8(sp)
     8c8:	dc400117 	ldw	r17,4(sp)
     8cc:	dc000017 	ldw	r16,0(sp)
     8d0:	dec00604 	addi	sp,sp,24
     8d4:	f800283a 	ret

000008d8 <imageDraw>:

void imageDraw(int x,int y, short * img){
     8d8:	defff404 	addi	sp,sp,-48
     8dc:	dfc00b15 	stw	ra,44(sp)
     8e0:	df000a15 	stw	fp,40(sp)
     8e4:	df000a04 	addi	fp,sp,40
     8e8:	e13ffd15 	stw	r4,-12(fp)
     8ec:	e17ffe15 	stw	r5,-8(fp)
     8f0:	e1bfff15 	stw	r6,-4(fp)
	int img_x = (int) img[0];
     8f4:	e0bfff17 	ldw	r2,-4(fp)
     8f8:	1080000b 	ldhu	r2,0(r2)
     8fc:	10bfffcc 	andi	r2,r2,65535
     900:	10a0001c 	xori	r2,r2,32768
     904:	10a00004 	addi	r2,r2,-32768
     908:	e0bff915 	stw	r2,-28(fp)
	int img_y = (int) img[1];
     90c:	e0bfff17 	ldw	r2,-4(fp)
     910:	10800084 	addi	r2,r2,2
     914:	1080000b 	ldhu	r2,0(r2)
     918:	10bfffcc 	andi	r2,r2,65535
     91c:	10a0001c 	xori	r2,r2,32768
     920:	10a00004 	addi	r2,r2,-32768
     924:	e0bffa15 	stw	r2,-24(fp)

	int limit_x = (x+img_x > 320)? 320 : x+img_x;
     928:	e0fffd17 	ldw	r3,-12(fp)
     92c:	e0bff917 	ldw	r2,-28(fp)
     930:	1885883a 	add	r2,r3,r2
     934:	10c05050 	cmplti	r3,r2,321
     938:	1800011e 	bne	r3,zero,940 <imageDraw+0x68>
     93c:	00805004 	movi	r2,320
     940:	e0bffb15 	stw	r2,-20(fp)
	int limit_y = (y+img_y > 240)? 240 : y+img_y;
     944:	e0fffe17 	ldw	r3,-8(fp)
     948:	e0bffa17 	ldw	r2,-24(fp)
     94c:	1885883a 	add	r2,r3,r2
     950:	10c03c50 	cmplti	r3,r2,241
     954:	1800011e 	bne	r3,zero,95c <imageDraw+0x84>
     958:	00803c04 	movi	r2,240
     95c:	e0bffc15 	stw	r2,-16(fp)
	int count = 2;
     960:	00800084 	movi	r2,2
     964:	e0bff615 	stw	r2,-40(fp)

	for(int i=y;i<limit_y;i++)
     968:	e0bffe17 	ldw	r2,-8(fp)
     96c:	e0bff715 	stw	r2,-36(fp)
     970:	00001b06 	br	9e0 <imageDraw+0x108>
		for(int j=x;j<limit_x;j++)
     974:	e0bffd17 	ldw	r2,-12(fp)
     978:	e0bff815 	stw	r2,-32(fp)
     97c:	00001206 	br	9c8 <imageDraw+0xf0>
			plot_pixel(j, i, img[count++]);
     980:	e0bff617 	ldw	r2,-40(fp)
     984:	10c00044 	addi	r3,r2,1
     988:	e0fff615 	stw	r3,-40(fp)
     98c:	1085883a 	add	r2,r2,r2
     990:	1007883a 	mov	r3,r2
     994:	e0bfff17 	ldw	r2,-4(fp)
     998:	10c5883a 	add	r2,r2,r3
     99c:	1080000b 	ldhu	r2,0(r2)
     9a0:	10bfffcc 	andi	r2,r2,65535
     9a4:	10a0001c 	xori	r2,r2,32768
     9a8:	10a00004 	addi	r2,r2,-32768
     9ac:	100d883a 	mov	r6,r2
     9b0:	e17ff717 	ldw	r5,-36(fp)
     9b4:	e13ff817 	ldw	r4,-32(fp)
     9b8:	0000a540 	call	a54 <plot_pixel>
	int limit_x = (x+img_x > 320)? 320 : x+img_x;
	int limit_y = (y+img_y > 240)? 240 : y+img_y;
	int count = 2;

	for(int i=y;i<limit_y;i++)
		for(int j=x;j<limit_x;j++)
     9bc:	e0bff817 	ldw	r2,-32(fp)
     9c0:	10800044 	addi	r2,r2,1
     9c4:	e0bff815 	stw	r2,-32(fp)
     9c8:	e0fff817 	ldw	r3,-32(fp)
     9cc:	e0bffb17 	ldw	r2,-20(fp)
     9d0:	18bfeb16 	blt	r3,r2,980 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000980>

	int limit_x = (x+img_x > 320)? 320 : x+img_x;
	int limit_y = (y+img_y > 240)? 240 : y+img_y;
	int count = 2;

	for(int i=y;i<limit_y;i++)
     9d4:	e0bff717 	ldw	r2,-36(fp)
     9d8:	10800044 	addi	r2,r2,1
     9dc:	e0bff715 	stw	r2,-36(fp)
     9e0:	e0fff717 	ldw	r3,-36(fp)
     9e4:	e0bffc17 	ldw	r2,-16(fp)
     9e8:	18bfe216 	blt	r3,r2,974 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000974>
		for(int j=x;j<limit_x;j++)
			plot_pixel(j, i, img[count++]);
}
     9ec:	0001883a 	nop
     9f0:	e037883a 	mov	sp,fp
     9f4:	dfc00117 	ldw	ra,4(sp)
     9f8:	df000017 	ldw	fp,0(sp)
     9fc:	dec00204 	addi	sp,sp,8
     a00:	f800283a 	ret

00000a04 <wait_for_vsync>:

void wait_for_vsync(void){
     a04:	defffe04 	addi	sp,sp,-8
     a08:	df000115 	stw	fp,4(sp)
     a0c:	dc000015 	stw	r16,0(sp)
     a10:	df000104 	addi	fp,sp,4
   register int status;
   *pixel_ctrl_ptr = 1;
     a14:	d0a00317 	ldw	r2,-32756(gp)
     a18:	00c00044 	movi	r3,1
     a1c:	10c00015 	stw	r3,0(r2)

   status = *(pixel_ctrl_ptr +3);
     a20:	d0a00317 	ldw	r2,-32756(gp)
     a24:	14000317 	ldw	r16,12(r2)
   while ((status & 0x01)!=0){
     a28:	00000206 	br	a34 <wait_for_vsync+0x30>
      status = *(pixel_ctrl_ptr + 3);
     a2c:	d0a00317 	ldw	r2,-32756(gp)
     a30:	14000317 	ldw	r16,12(r2)
void wait_for_vsync(void){
   register int status;
   *pixel_ctrl_ptr = 1;

   status = *(pixel_ctrl_ptr +3);
   while ((status & 0x01)!=0){
     a34:	8080004c 	andi	r2,r16,1
     a38:	103ffc1e 	bne	r2,zero,a2c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000a2c>
      status = *(pixel_ctrl_ptr + 3);
   }
}
     a3c:	0001883a 	nop
     a40:	e6ffff04 	addi	sp,fp,-4
     a44:	df000117 	ldw	fp,4(sp)
     a48:	dc000017 	ldw	r16,0(sp)
     a4c:	dec00204 	addi	sp,sp,8
     a50:	f800283a 	ret

00000a54 <plot_pixel>:

void plot_pixel(int x, int y, short line_color){
     a54:	defffc04 	addi	sp,sp,-16
     a58:	df000315 	stw	fp,12(sp)
     a5c:	df000304 	addi	fp,sp,12
     a60:	e13ffd15 	stw	r4,-12(fp)
     a64:	e17ffe15 	stw	r5,-8(fp)
     a68:	3005883a 	mov	r2,r6
     a6c:	e0bfff0d 	sth	r2,-4(fp)
   *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
     a70:	e0bffe17 	ldw	r2,-8(fp)
     a74:	100692ba 	slli	r3,r2,10
     a78:	d0a74917 	ldw	r2,-25308(gp)
     a7c:	1887883a 	add	r3,r3,r2
     a80:	e0bffd17 	ldw	r2,-12(fp)
     a84:	1085883a 	add	r2,r2,r2
     a88:	1885883a 	add	r2,r3,r2
     a8c:	1007883a 	mov	r3,r2
     a90:	e0bfff0b 	ldhu	r2,-4(fp)
     a94:	1880000d 	sth	r2,0(r3)
}
     a98:	0001883a 	nop
     a9c:	e037883a 	mov	sp,fp
     aa0:	df000017 	ldw	fp,0(sp)
     aa4:	dec00104 	addi	sp,sp,4
     aa8:	f800283a 	ret

00000aac <clear_screen>:

void clear_screen(){
     aac:	defffc04 	addi	sp,sp,-16
     ab0:	dfc00315 	stw	ra,12(sp)
     ab4:	df000215 	stw	fp,8(sp)
     ab8:	df000204 	addi	fp,sp,8
   for (int x = 0; x<320; x++)
     abc:	e03ffe15 	stw	zero,-8(fp)
     ac0:	00000f06 	br	b00 <clear_screen+0x54>
      for (int y = 0; y<240; y++)
     ac4:	e03fff15 	stw	zero,-4(fp)
     ac8:	00000706 	br	ae8 <clear_screen+0x3c>
         plot_pixel(x, y, 0x0000);
     acc:	000d883a 	mov	r6,zero
     ad0:	e17fff17 	ldw	r5,-4(fp)
     ad4:	e13ffe17 	ldw	r4,-8(fp)
     ad8:	0000a540 	call	a54 <plot_pixel>
   *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void clear_screen(){
   for (int x = 0; x<320; x++)
      for (int y = 0; y<240; y++)
     adc:	e0bfff17 	ldw	r2,-4(fp)
     ae0:	10800044 	addi	r2,r2,1
     ae4:	e0bfff15 	stw	r2,-4(fp)
     ae8:	e0bfff17 	ldw	r2,-4(fp)
     aec:	10803c10 	cmplti	r2,r2,240
     af0:	103ff61e 	bne	r2,zero,acc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000acc>
void plot_pixel(int x, int y, short line_color){
   *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void clear_screen(){
   for (int x = 0; x<320; x++)
     af4:	e0bffe17 	ldw	r2,-8(fp)
     af8:	10800044 	addi	r2,r2,1
     afc:	e0bffe15 	stw	r2,-8(fp)
     b00:	e0bffe17 	ldw	r2,-8(fp)
     b04:	10805010 	cmplti	r2,r2,320
     b08:	103fee1e 	bne	r2,zero,ac4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000ac4>
      for (int y = 0; y<240; y++)
         plot_pixel(x, y, 0x0000);
}
     b0c:	0001883a 	nop
     b10:	e037883a 	mov	sp,fp
     b14:	dfc00117 	ldw	ra,4(sp)
     b18:	df000017 	ldw	fp,0(sp)
     b1c:	dec00204 	addi	sp,sp,8
     b20:	f800283a 	ret

00000b24 <Init_Audio>:
extern volatile int * pLED;

unsigned int l_buf[BUF_SIZE];
unsigned int r_buf[BUF_SIZE];

void Init_Audio() {
     b24:	defffd04 	addi	sp,sp,-12
     b28:	dfc00215 	stw	ra,8(sp)
     b2c:	df000115 	stw	fp,4(sp)
     b30:	df000104 	addi	fp,sp,4
	int pb_ctxt = 0;
     b34:	e03fff15 	stw	zero,-4(fp)
	alt_irq_register(6, (void *)&pb_ctxt, (void *)Audio_ISR);
     b38:	01800034 	movhi	r6,0
     b3c:	3182d904 	addi	r6,r6,2916
     b40:	e17fff04 	addi	r5,fp,-4
     b44:	01000184 	movi	r4,6
     b48:	0003f840 	call	3f84 <alt_irq_register>
}
     b4c:	0001883a 	nop
     b50:	e037883a 	mov	sp,fp
     b54:	dfc00117 	ldw	ra,4(sp)
     b58:	df000017 	ldw	fp,0(sp)
     b5c:	dec00204 	addi	sp,sp,8
     b60:	f800283a 	ret

00000b64 <Audio_ISR>:

void Audio_ISR()
{
     b64:	deffff04 	addi	sp,sp,-4
     b68:	df000015 	stw	fp,0(sp)
     b6c:	d839883a 	mov	fp,sp
   ////recored////
   if (Audio_Recording == 1)
     b70:	d0a74617 	ldw	r2,-25320(gp)
     b74:	10800058 	cmpnei	r2,r2,1
     b78:	10002b1e 	bne	r2,zero,c28 <Audio_ISR+0xc4>
   {
      *(pLED) = 0x1;
     b7c:	d0a00517 	ldw	r2,-32748(gp)
     b80:	00c00044 	movi	r3,1
     b84:	10c00015 	stw	r3,0(r2)
      if (Audio_Buffer_index < BUF_SIZE)
     b88:	d0e74817 	ldw	r3,-25312(gp)
     b8c:	00800234 	movhi	r2,8
     b90:	10a847c4 	addi	r2,r2,-24289
     b94:	10c01a16 	blt	r2,r3,c00 <Audio_ISR+0x9c>
      {
         l_buf[Audio_Buffer_index] = *(pAudio + 2);
     b98:	d0e74817 	ldw	r3,-25312(gp)
     b9c:	d0a00417 	ldw	r2,-32752(gp)
     ba0:	10800204 	addi	r2,r2,8
     ba4:	10800017 	ldw	r2,0(r2)
     ba8:	1009883a 	mov	r4,r2
     bac:	00800a34 	movhi	r2,40
     bb0:	10a06704 	addi	r2,r2,-32356
     bb4:	18c7883a 	add	r3,r3,r3
     bb8:	18c7883a 	add	r3,r3,r3
     bbc:	10c5883a 	add	r2,r2,r3
     bc0:	11000015 	stw	r4,0(r2)
         r_buf[Audio_Buffer_index] = *(pAudio + 3);
     bc4:	d0e74817 	ldw	r3,-25312(gp)
     bc8:	d0a00417 	ldw	r2,-32752(gp)
     bcc:	10800304 	addi	r2,r2,12
     bd0:	10800017 	ldw	r2,0(r2)
     bd4:	1009883a 	mov	r4,r2
     bd8:	00800174 	movhi	r2,5
     bdc:	10bf4704 	addi	r2,r2,-740
     be0:	18c7883a 	add	r3,r3,r3
     be4:	18c7883a 	add	r3,r3,r3
     be8:	10c5883a 	add	r2,r2,r3
     bec:	11000015 	stw	r4,0(r2)
         ++Audio_Buffer_index;
     bf0:	d0a74817 	ldw	r2,-25312(gp)
     bf4:	10800044 	addi	r2,r2,1
     bf8:	d0a74815 	stw	r2,-25312(gp)
         *(pAudio) = 0;
         Audio_Play = 0;
         *(pLED) = 0;
      }
   }
}
     bfc:	00003506 	br	cd4 <Audio_ISR+0x170>
         l_buf[Audio_Buffer_index] = *(pAudio + 2);
         r_buf[Audio_Buffer_index] = *(pAudio + 3);
         ++Audio_Buffer_index;

      }
      else if (Audio_Buffer_index >= BUF_SIZE)
     c00:	d0e74817 	ldw	r3,-25312(gp)
     c04:	00800234 	movhi	r2,8
     c08:	10a847c4 	addi	r2,r2,-24289
     c0c:	10c0310e 	bge	r2,r3,cd4 <Audio_ISR+0x170>
      {
         *(pAudio) = 0;
     c10:	d0a00417 	ldw	r2,-32752(gp)
     c14:	10000015 	stw	zero,0(r2)
         Audio_Recording = 0;
     c18:	d0274615 	stw	zero,-25320(gp)
         *(pLED) = 0;
     c1c:	d0a00517 	ldw	r2,-32748(gp)
     c20:	10000015 	stw	zero,0(r2)
         *(pAudio) = 0;
         Audio_Play = 0;
         *(pLED) = 0;
      }
   }
}
     c24:	00002b06 	br	cd4 <Audio_ISR+0x170>
         Audio_Recording = 0;
         *(pLED) = 0;
      }
   }
   ////audio play////
   else if ((Audio_Play==1))
     c28:	d0a74717 	ldw	r2,-25316(gp)
     c2c:	10800058 	cmpnei	r2,r2,1
     c30:	1000281e 	bne	r2,zero,cd4 <Audio_ISR+0x170>
   {
      *(pLED) = 0x2;
     c34:	d0a00517 	ldw	r2,-32748(gp)
     c38:	00c00084 	movi	r3,2
     c3c:	10c00015 	stw	r3,0(r2)

      if (Audio_Buffer_index < BUF_SIZE)
     c40:	d0e74817 	ldw	r3,-25312(gp)
     c44:	00800234 	movhi	r2,8
     c48:	10a847c4 	addi	r2,r2,-24289
     c4c:	10c01816 	blt	r2,r3,cb0 <Audio_ISR+0x14c>
      {
         *(pAudio + 2) = l_buf[Audio_Buffer_index];
     c50:	d0a00417 	ldw	r2,-32752(gp)
     c54:	11000204 	addi	r4,r2,8
     c58:	d0e74817 	ldw	r3,-25312(gp)
     c5c:	00800a34 	movhi	r2,40
     c60:	10a06704 	addi	r2,r2,-32356
     c64:	18c7883a 	add	r3,r3,r3
     c68:	18c7883a 	add	r3,r3,r3
     c6c:	10c5883a 	add	r2,r2,r3
     c70:	10800017 	ldw	r2,0(r2)
     c74:	20800015 	stw	r2,0(r4)
         *(pAudio + 3) = r_buf[Audio_Buffer_index];
     c78:	d0a00417 	ldw	r2,-32752(gp)
     c7c:	11000304 	addi	r4,r2,12
     c80:	d0e74817 	ldw	r3,-25312(gp)
     c84:	00800174 	movhi	r2,5
     c88:	10bf4704 	addi	r2,r2,-740
     c8c:	18c7883a 	add	r3,r3,r3
     c90:	18c7883a 	add	r3,r3,r3
     c94:	10c5883a 	add	r2,r2,r3
     c98:	10800017 	ldw	r2,0(r2)
     c9c:	20800015 	stw	r2,0(r4)
         ++Audio_Buffer_index;
     ca0:	d0a74817 	ldw	r2,-25312(gp)
     ca4:	10800044 	addi	r2,r2,1
     ca8:	d0a74815 	stw	r2,-25312(gp)
         *(pAudio) = 0;
         Audio_Play = 0;
         *(pLED) = 0;
      }
   }
}
     cac:	00000906 	br	cd4 <Audio_ISR+0x170>
      {
         *(pAudio + 2) = l_buf[Audio_Buffer_index];
         *(pAudio + 3) = r_buf[Audio_Buffer_index];
         ++Audio_Buffer_index;
      }
      else if (Audio_Buffer_index >= BUF_SIZE)
     cb0:	d0e74817 	ldw	r3,-25312(gp)
     cb4:	00800234 	movhi	r2,8
     cb8:	10a847c4 	addi	r2,r2,-24289
     cbc:	10c0050e 	bge	r2,r3,cd4 <Audio_ISR+0x170>
      {
         *(pAudio) = 0;
     cc0:	d0a00417 	ldw	r2,-32752(gp)
     cc4:	10000015 	stw	zero,0(r2)
         Audio_Play = 0;
     cc8:	d0274715 	stw	zero,-25316(gp)
         *(pLED) = 0;
     ccc:	d0a00517 	ldw	r2,-32748(gp)
     cd0:	10000015 	stw	zero,0(r2)
      }
   }
}
     cd4:	0001883a 	nop
     cd8:	e037883a 	mov	sp,fp
     cdc:	df000017 	ldw	fp,0(sp)
     ce0:	dec00104 	addi	sp,sp,4
     ce4:	f800283a 	ret

00000ce8 <Init_KEY_SW>:
extern volatile int * pSwitch;
extern volatile int * pLED;

void Pushbutton_ISR();

void Init_KEY_SW() {
     ce8:	defffd04 	addi	sp,sp,-12
     cec:	dfc00215 	stw	ra,8(sp)
     cf0:	df000115 	stw	fp,4(sp)
     cf4:	df000104 	addi	fp,sp,4
	*(pKEY+2) = 0b1111;
     cf8:	d0a00617 	ldw	r2,-32744(gp)
     cfc:	10800204 	addi	r2,r2,8
     d00:	00c003c4 	movi	r3,15
     d04:	10c00015 	stw	r3,0(r2)
	int pb_ctxt = 0;
     d08:	e03fff15 	stw	zero,-4(fp)
	alt_irq_register(1, (void *)&pb_ctxt, (void *)Pushbutton_ISR);
     d0c:	01800034 	movhi	r6,0
     d10:	31834e04 	addi	r6,r6,3384
     d14:	e17fff04 	addi	r5,fp,-4
     d18:	01000044 	movi	r4,1
     d1c:	0003f840 	call	3f84 <alt_irq_register>
}
     d20:	0001883a 	nop
     d24:	e037883a 	mov	sp,fp
     d28:	dfc00117 	ldw	ra,4(sp)
     d2c:	df000017 	ldw	fp,0(sp)
     d30:	dec00204 	addi	sp,sp,8
     d34:	f800283a 	ret

00000d38 <Pushbutton_ISR>:


void Pushbutton_ISR()
{
     d38:	defffc04 	addi	sp,sp,-16
     d3c:	dfc00315 	stw	ra,12(sp)
     d40:	df000215 	stw	fp,8(sp)
     d44:	df000204 	addi	fp,sp,8
   ////update and reset key value////
   int key_value;
   key_value = *(pKEY + 3);
     d48:	d0a00617 	ldw	r2,-32744(gp)
     d4c:	10800317 	ldw	r2,12(r2)
     d50:	e0bffe15 	stw	r2,-8(fp)
   *(pKEY + 3) = key_value;
     d54:	d0a00617 	ldw	r2,-32744(gp)
     d58:	10800304 	addi	r2,r2,12
     d5c:	e0fffe17 	ldw	r3,-8(fp)
     d60:	10c00015 	stw	r3,0(r2)
   int swval = *pSwitch;
     d64:	d0a00717 	ldw	r2,-32740(gp)
     d68:	10800017 	ldw	r2,0(r2)
     d6c:	e0bfff15 	stw	r2,-4(fp)

   *pLED = ( swval << 4 ) | (key_value);
     d70:	d0a00517 	ldw	r2,-32748(gp)
     d74:	e0ffff17 	ldw	r3,-4(fp)
     d78:	1808913a 	slli	r4,r3,4
     d7c:	e0fffe17 	ldw	r3,-8(fp)
     d80:	20c6b03a 	or	r3,r4,r3
     d84:	10c00015 	stw	r3,0(r2)
   ////switch 0 common mode
   ////switch 1 time mode
   ////switch 2 camera mode
   ////switch 4 audio mode

   if(swval == 0 )
     d88:	e0bfff17 	ldw	r2,-4(fp)
     d8c:	10001b1e 	bne	r2,zero,dfc <Pushbutton_ISR+0xc4>
   {
      if(key_value == 1)
     d90:	e0bffe17 	ldw	r2,-8(fp)
     d94:	10800058 	cmpnei	r2,r2,1
     d98:	1000041e 	bne	r2,zero,dac <Pushbutton_ISR+0x74>
      {
         printf("common key 0\n");
     d9c:	01000074 	movhi	r4,1
     da0:	21304f04 	addi	r4,r4,-16068
     da4:	00010580 	call	1058 <puts>
     da8:	00001406 	br	dfc <Pushbutton_ISR+0xc4>
      }
      else if(key_value == 2)
     dac:	e0bffe17 	ldw	r2,-8(fp)
     db0:	10800098 	cmpnei	r2,r2,2
     db4:	1000041e 	bne	r2,zero,dc8 <Pushbutton_ISR+0x90>
      {
         printf("common key 1\n");
     db8:	01000074 	movhi	r4,1
     dbc:	21305304 	addi	r4,r4,-16052
     dc0:	00010580 	call	1058 <puts>
     dc4:	00000d06 	br	dfc <Pushbutton_ISR+0xc4>
      }
      else if(key_value == 4)
     dc8:	e0bffe17 	ldw	r2,-8(fp)
     dcc:	10800118 	cmpnei	r2,r2,4
     dd0:	1000041e 	bne	r2,zero,de4 <Pushbutton_ISR+0xac>
      {
         printf("common key 2\n");
     dd4:	01000074 	movhi	r4,1
     dd8:	21305704 	addi	r4,r4,-16036
     ddc:	00010580 	call	1058 <puts>
     de0:	00000606 	br	dfc <Pushbutton_ISR+0xc4>
      }
      else if(key_value == 8)
     de4:	e0bffe17 	ldw	r2,-8(fp)
     de8:	10800218 	cmpnei	r2,r2,8
     dec:	1000031e 	bne	r2,zero,dfc <Pushbutton_ISR+0xc4>
      {
         printf("common key 3\n");
     df0:	01000074 	movhi	r4,1
     df4:	21305b04 	addi	r4,r4,-16020
     df8:	00010580 	call	1058 <puts>
      }
   }
   if(swval == 1 )
     dfc:	e0bfff17 	ldw	r2,-4(fp)
     e00:	10800058 	cmpnei	r2,r2,1
     e04:	10001b1e 	bne	r2,zero,e74 <Pushbutton_ISR+0x13c>
   {
      if(key_value == 1)
     e08:	e0bffe17 	ldw	r2,-8(fp)
     e0c:	10800058 	cmpnei	r2,r2,1
     e10:	1000041e 	bne	r2,zero,e24 <Pushbutton_ISR+0xec>
      {
         printf("time key 0\n");
     e14:	01000074 	movhi	r4,1
     e18:	21305f04 	addi	r4,r4,-16004
     e1c:	00010580 	call	1058 <puts>
     e20:	00001406 	br	e74 <Pushbutton_ISR+0x13c>
      }
      else if(key_value == 2)
     e24:	e0bffe17 	ldw	r2,-8(fp)
     e28:	10800098 	cmpnei	r2,r2,2
     e2c:	1000041e 	bne	r2,zero,e40 <Pushbutton_ISR+0x108>
      {
         printf("time key 1\n");
     e30:	01000074 	movhi	r4,1
     e34:	21306204 	addi	r4,r4,-15992
     e38:	00010580 	call	1058 <puts>
     e3c:	00000d06 	br	e74 <Pushbutton_ISR+0x13c>
      }
      else if(key_value == 4)
     e40:	e0bffe17 	ldw	r2,-8(fp)
     e44:	10800118 	cmpnei	r2,r2,4
     e48:	1000041e 	bne	r2,zero,e5c <Pushbutton_ISR+0x124>
      {
         printf("time key 2\n");
     e4c:	01000074 	movhi	r4,1
     e50:	21306504 	addi	r4,r4,-15980
     e54:	00010580 	call	1058 <puts>
     e58:	00000606 	br	e74 <Pushbutton_ISR+0x13c>
      }
      else if(key_value == 8)
     e5c:	e0bffe17 	ldw	r2,-8(fp)
     e60:	10800218 	cmpnei	r2,r2,8
     e64:	1000031e 	bne	r2,zero,e74 <Pushbutton_ISR+0x13c>
      {
         printf("time key 3\n");
     e68:	01000074 	movhi	r4,1
     e6c:	21306804 	addi	r4,r4,-15968
     e70:	00010580 	call	1058 <puts>
      }
   }
   if(swval == 2 )
     e74:	e0bfff17 	ldw	r2,-4(fp)
     e78:	10800098 	cmpnei	r2,r2,2
     e7c:	10001b1e 	bne	r2,zero,eec <Pushbutton_ISR+0x1b4>
   {
      if(key_value == 1)
     e80:	e0bffe17 	ldw	r2,-8(fp)
     e84:	10800058 	cmpnei	r2,r2,1
     e88:	1000041e 	bne	r2,zero,e9c <Pushbutton_ISR+0x164>
      {
         printf("camera key 0\n");
     e8c:	01000074 	movhi	r4,1
     e90:	21306b04 	addi	r4,r4,-15956
     e94:	00010580 	call	1058 <puts>
     e98:	00001406 	br	eec <Pushbutton_ISR+0x1b4>
      }
      else if(key_value == 2)
     e9c:	e0bffe17 	ldw	r2,-8(fp)
     ea0:	10800098 	cmpnei	r2,r2,2
     ea4:	1000041e 	bne	r2,zero,eb8 <Pushbutton_ISR+0x180>
      {
         printf("camera key 1\n");
     ea8:	01000074 	movhi	r4,1
     eac:	21306f04 	addi	r4,r4,-15940
     eb0:	00010580 	call	1058 <puts>
     eb4:	00000d06 	br	eec <Pushbutton_ISR+0x1b4>
      }
      else if(key_value == 4)
     eb8:	e0bffe17 	ldw	r2,-8(fp)
     ebc:	10800118 	cmpnei	r2,r2,4
     ec0:	1000041e 	bne	r2,zero,ed4 <Pushbutton_ISR+0x19c>
      {
         printf("camera key 2\n");
     ec4:	01000074 	movhi	r4,1
     ec8:	21307304 	addi	r4,r4,-15924
     ecc:	00010580 	call	1058 <puts>
     ed0:	00000606 	br	eec <Pushbutton_ISR+0x1b4>
      }
      else if(key_value == 8)
     ed4:	e0bffe17 	ldw	r2,-8(fp)
     ed8:	10800218 	cmpnei	r2,r2,8
     edc:	1000031e 	bne	r2,zero,eec <Pushbutton_ISR+0x1b4>
      {
         printf("camera key 3\n");
     ee0:	01000074 	movhi	r4,1
     ee4:	21307704 	addi	r4,r4,-15908
     ee8:	00010580 	call	1058 <puts>
      }
   }
   if(swval == 4 )
     eec:	e0bfff17 	ldw	r2,-4(fp)
     ef0:	10800118 	cmpnei	r2,r2,4
     ef4:	10001b1e 	bne	r2,zero,f64 <Pushbutton_ISR+0x22c>
   {
      if(key_value == 1)
     ef8:	e0bffe17 	ldw	r2,-8(fp)
     efc:	10800058 	cmpnei	r2,r2,1
     f00:	1000041e 	bne	r2,zero,f14 <Pushbutton_ISR+0x1dc>
      {
         printf("audio key 0\n");
     f04:	01000074 	movhi	r4,1
     f08:	21307b04 	addi	r4,r4,-15892
     f0c:	00010580 	call	1058 <puts>
         printf("audio key 3\n");
      }
   }


}
     f10:	00001406 	br	f64 <Pushbutton_ISR+0x22c>
   {
      if(key_value == 1)
      {
         printf("audio key 0\n");
      }
      else if(key_value == 2)
     f14:	e0bffe17 	ldw	r2,-8(fp)
     f18:	10800098 	cmpnei	r2,r2,2
     f1c:	1000041e 	bne	r2,zero,f30 <Pushbutton_ISR+0x1f8>
      {
         printf("audio key 1\n");
     f20:	01000074 	movhi	r4,1
     f24:	21307e04 	addi	r4,r4,-15880
     f28:	00010580 	call	1058 <puts>
         printf("audio key 3\n");
      }
   }


}
     f2c:	00000d06 	br	f64 <Pushbutton_ISR+0x22c>
      }
      else if(key_value == 2)
      {
         printf("audio key 1\n");
      }
      else if(key_value == 4)
     f30:	e0bffe17 	ldw	r2,-8(fp)
     f34:	10800118 	cmpnei	r2,r2,4
     f38:	1000041e 	bne	r2,zero,f4c <Pushbutton_ISR+0x214>
      {
         printf("audio key 2\n");
     f3c:	01000074 	movhi	r4,1
     f40:	21308104 	addi	r4,r4,-15868
     f44:	00010580 	call	1058 <puts>
         printf("audio key 3\n");
      }
   }


}
     f48:	00000606 	br	f64 <Pushbutton_ISR+0x22c>
      }
      else if(key_value == 4)
      {
         printf("audio key 2\n");
      }
      else if(key_value == 8)
     f4c:	e0bffe17 	ldw	r2,-8(fp)
     f50:	10800218 	cmpnei	r2,r2,8
     f54:	1000031e 	bne	r2,zero,f64 <Pushbutton_ISR+0x22c>
      {
         printf("audio key 3\n");
     f58:	01000074 	movhi	r4,1
     f5c:	21308404 	addi	r4,r4,-15856
     f60:	00010580 	call	1058 <puts>
      }
   }


}
     f64:	0001883a 	nop
     f68:	e037883a 	mov	sp,fp
     f6c:	dfc00117 	ldw	ra,4(sp)
     f70:	df000017 	ldw	fp,0(sp)
     f74:	dec00204 	addi	sp,sp,8
     f78:	f800283a 	ret

00000f7c <main>:
volatile int * pAudio 	= (int *)0xff203040;
volatile int * pLED 	= (int *)0xFF200000;
volatile int * pKEY 	= (int *)0xff200050;
volatile int * pSwitch 	= (int *)0xff200040;

int main() {
     f7c:	defffe04 	addi	sp,sp,-8
     f80:	dfc00115 	stw	ra,4(sp)
     f84:	df000015 	stw	fp,0(sp)
     f88:	d839883a 	mov	fp,sp
	Init_VGA();
     f8c:	00005200 	call	520 <Init_VGA>
	Init_KEY_SW();
     f90:	0000ce80 	call	ce8 <Init_KEY_SW>

	while(1);
     f94:	003fff06 	br	f94 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000f94>

00000f98 <_puts_r>:
     f98:	defff604 	addi	sp,sp,-40
     f9c:	dc000715 	stw	r16,28(sp)
     fa0:	2021883a 	mov	r16,r4
     fa4:	2809883a 	mov	r4,r5
     fa8:	dc400815 	stw	r17,32(sp)
     fac:	dfc00915 	stw	ra,36(sp)
     fb0:	2823883a 	mov	r17,r5
     fb4:	000106c0 	call	106c <strlen>
     fb8:	10c00044 	addi	r3,r2,1
     fbc:	d8800115 	stw	r2,4(sp)
     fc0:	00800074 	movhi	r2,1
     fc4:	10b08704 	addi	r2,r2,-15844
     fc8:	d8800215 	stw	r2,8(sp)
     fcc:	00800044 	movi	r2,1
     fd0:	d8800315 	stw	r2,12(sp)
     fd4:	00800084 	movi	r2,2
     fd8:	dc400015 	stw	r17,0(sp)
     fdc:	d8c00615 	stw	r3,24(sp)
     fe0:	dec00415 	stw	sp,16(sp)
     fe4:	d8800515 	stw	r2,20(sp)
     fe8:	80000226 	beq	r16,zero,ff4 <_puts_r+0x5c>
     fec:	80800e17 	ldw	r2,56(r16)
     ff0:	10001426 	beq	r2,zero,1044 <_puts_r+0xac>
     ff4:	81400217 	ldw	r5,8(r16)
     ff8:	2880030b 	ldhu	r2,12(r5)
     ffc:	10c8000c 	andi	r3,r2,8192
    1000:	1800061e 	bne	r3,zero,101c <_puts_r+0x84>
    1004:	29001917 	ldw	r4,100(r5)
    1008:	00f7ffc4 	movi	r3,-8193
    100c:	10880014 	ori	r2,r2,8192
    1010:	20c6703a 	and	r3,r4,r3
    1014:	2880030d 	sth	r2,12(r5)
    1018:	28c01915 	stw	r3,100(r5)
    101c:	d9800404 	addi	r6,sp,16
    1020:	8009883a 	mov	r4,r16
    1024:	00014a40 	call	14a4 <__sfvwrite_r>
    1028:	1000091e 	bne	r2,zero,1050 <_puts_r+0xb8>
    102c:	00800284 	movi	r2,10
    1030:	dfc00917 	ldw	ra,36(sp)
    1034:	dc400817 	ldw	r17,32(sp)
    1038:	dc000717 	ldw	r16,28(sp)
    103c:	dec00a04 	addi	sp,sp,40
    1040:	f800283a 	ret
    1044:	8009883a 	mov	r4,r16
    1048:	00014540 	call	1454 <__sinit>
    104c:	003fe906 	br	ff4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0000ff4>
    1050:	00bfffc4 	movi	r2,-1
    1054:	003ff606 	br	1030 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001030>

00001058 <puts>:
    1058:	00800074 	movhi	r2,1
    105c:	10b7f104 	addi	r2,r2,-8252
    1060:	200b883a 	mov	r5,r4
    1064:	11000017 	ldw	r4,0(r2)
    1068:	0000f981 	jmpi	f98 <_puts_r>

0000106c <strlen>:
    106c:	208000cc 	andi	r2,r4,3
    1070:	10002026 	beq	r2,zero,10f4 <strlen+0x88>
    1074:	20800007 	ldb	r2,0(r4)
    1078:	10002026 	beq	r2,zero,10fc <strlen+0x90>
    107c:	2005883a 	mov	r2,r4
    1080:	00000206 	br	108c <strlen+0x20>
    1084:	10c00007 	ldb	r3,0(r2)
    1088:	18001826 	beq	r3,zero,10ec <strlen+0x80>
    108c:	10800044 	addi	r2,r2,1
    1090:	10c000cc 	andi	r3,r2,3
    1094:	183ffb1e 	bne	r3,zero,1084 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001084>
    1098:	10c00017 	ldw	r3,0(r2)
    109c:	01ffbff4 	movhi	r7,65279
    10a0:	39ffbfc4 	addi	r7,r7,-257
    10a4:	00ca303a 	nor	r5,zero,r3
    10a8:	01a02074 	movhi	r6,32897
    10ac:	19c7883a 	add	r3,r3,r7
    10b0:	31a02004 	addi	r6,r6,-32640
    10b4:	1946703a 	and	r3,r3,r5
    10b8:	1986703a 	and	r3,r3,r6
    10bc:	1800091e 	bne	r3,zero,10e4 <strlen+0x78>
    10c0:	10800104 	addi	r2,r2,4
    10c4:	10c00017 	ldw	r3,0(r2)
    10c8:	19cb883a 	add	r5,r3,r7
    10cc:	00c6303a 	nor	r3,zero,r3
    10d0:	28c6703a 	and	r3,r5,r3
    10d4:	1986703a 	and	r3,r3,r6
    10d8:	183ff926 	beq	r3,zero,10c0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00010c0>
    10dc:	00000106 	br	10e4 <strlen+0x78>
    10e0:	10800044 	addi	r2,r2,1
    10e4:	10c00007 	ldb	r3,0(r2)
    10e8:	183ffd1e 	bne	r3,zero,10e0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00010e0>
    10ec:	1105c83a 	sub	r2,r2,r4
    10f0:	f800283a 	ret
    10f4:	2005883a 	mov	r2,r4
    10f8:	003fe706 	br	1098 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001098>
    10fc:	0005883a 	mov	r2,zero
    1100:	f800283a 	ret

00001104 <__fp_unlock>:
    1104:	0005883a 	mov	r2,zero
    1108:	f800283a 	ret

0000110c <_cleanup_r>:
    110c:	01400034 	movhi	r5,0
    1110:	294c2804 	addi	r5,r5,12448
    1114:	0001a241 	jmpi	1a24 <_fwalk_reent>

00001118 <__sinit.part.1>:
    1118:	defff704 	addi	sp,sp,-36
    111c:	00c00034 	movhi	r3,0
    1120:	dfc00815 	stw	ra,32(sp)
    1124:	ddc00715 	stw	r23,28(sp)
    1128:	dd800615 	stw	r22,24(sp)
    112c:	dd400515 	stw	r21,20(sp)
    1130:	dd000415 	stw	r20,16(sp)
    1134:	dcc00315 	stw	r19,12(sp)
    1138:	dc800215 	stw	r18,8(sp)
    113c:	dc400115 	stw	r17,4(sp)
    1140:	dc000015 	stw	r16,0(sp)
    1144:	18c44304 	addi	r3,r3,4364
    1148:	24000117 	ldw	r16,4(r4)
    114c:	20c00f15 	stw	r3,60(r4)
    1150:	2080bb04 	addi	r2,r4,748
    1154:	00c000c4 	movi	r3,3
    1158:	20c0b915 	stw	r3,740(r4)
    115c:	2080ba15 	stw	r2,744(r4)
    1160:	2000b815 	stw	zero,736(r4)
    1164:	05c00204 	movi	r23,8
    1168:	00800104 	movi	r2,4
    116c:	2025883a 	mov	r18,r4
    1170:	b80d883a 	mov	r6,r23
    1174:	81001704 	addi	r4,r16,92
    1178:	000b883a 	mov	r5,zero
    117c:	80000015 	stw	zero,0(r16)
    1180:	80000115 	stw	zero,4(r16)
    1184:	80000215 	stw	zero,8(r16)
    1188:	8080030d 	sth	r2,12(r16)
    118c:	80001915 	stw	zero,100(r16)
    1190:	8000038d 	sth	zero,14(r16)
    1194:	80000415 	stw	zero,16(r16)
    1198:	80000515 	stw	zero,20(r16)
    119c:	80000615 	stw	zero,24(r16)
    11a0:	000267c0 	call	267c <memset>
    11a4:	05800034 	movhi	r22,0
    11a8:	94400217 	ldw	r17,8(r18)
    11ac:	05400034 	movhi	r21,0
    11b0:	05000034 	movhi	r20,0
    11b4:	04c00034 	movhi	r19,0
    11b8:	b58b5704 	addi	r22,r22,11612
    11bc:	ad4b6e04 	addi	r21,r21,11704
    11c0:	a50b8d04 	addi	r20,r20,11828
    11c4:	9ccba404 	addi	r19,r19,11920
    11c8:	85800815 	stw	r22,32(r16)
    11cc:	85400915 	stw	r21,36(r16)
    11d0:	85000a15 	stw	r20,40(r16)
    11d4:	84c00b15 	stw	r19,44(r16)
    11d8:	84000715 	stw	r16,28(r16)
    11dc:	00800284 	movi	r2,10
    11e0:	8880030d 	sth	r2,12(r17)
    11e4:	00800044 	movi	r2,1
    11e8:	b80d883a 	mov	r6,r23
    11ec:	89001704 	addi	r4,r17,92
    11f0:	000b883a 	mov	r5,zero
    11f4:	88000015 	stw	zero,0(r17)
    11f8:	88000115 	stw	zero,4(r17)
    11fc:	88000215 	stw	zero,8(r17)
    1200:	88001915 	stw	zero,100(r17)
    1204:	8880038d 	sth	r2,14(r17)
    1208:	88000415 	stw	zero,16(r17)
    120c:	88000515 	stw	zero,20(r17)
    1210:	88000615 	stw	zero,24(r17)
    1214:	000267c0 	call	267c <memset>
    1218:	94000317 	ldw	r16,12(r18)
    121c:	00800484 	movi	r2,18
    1220:	8c400715 	stw	r17,28(r17)
    1224:	8d800815 	stw	r22,32(r17)
    1228:	8d400915 	stw	r21,36(r17)
    122c:	8d000a15 	stw	r20,40(r17)
    1230:	8cc00b15 	stw	r19,44(r17)
    1234:	8080030d 	sth	r2,12(r16)
    1238:	00800084 	movi	r2,2
    123c:	80000015 	stw	zero,0(r16)
    1240:	80000115 	stw	zero,4(r16)
    1244:	80000215 	stw	zero,8(r16)
    1248:	80001915 	stw	zero,100(r16)
    124c:	8080038d 	sth	r2,14(r16)
    1250:	80000415 	stw	zero,16(r16)
    1254:	80000515 	stw	zero,20(r16)
    1258:	80000615 	stw	zero,24(r16)
    125c:	b80d883a 	mov	r6,r23
    1260:	000b883a 	mov	r5,zero
    1264:	81001704 	addi	r4,r16,92
    1268:	000267c0 	call	267c <memset>
    126c:	00800044 	movi	r2,1
    1270:	84000715 	stw	r16,28(r16)
    1274:	85800815 	stw	r22,32(r16)
    1278:	85400915 	stw	r21,36(r16)
    127c:	85000a15 	stw	r20,40(r16)
    1280:	84c00b15 	stw	r19,44(r16)
    1284:	90800e15 	stw	r2,56(r18)
    1288:	dfc00817 	ldw	ra,32(sp)
    128c:	ddc00717 	ldw	r23,28(sp)
    1290:	dd800617 	ldw	r22,24(sp)
    1294:	dd400517 	ldw	r21,20(sp)
    1298:	dd000417 	ldw	r20,16(sp)
    129c:	dcc00317 	ldw	r19,12(sp)
    12a0:	dc800217 	ldw	r18,8(sp)
    12a4:	dc400117 	ldw	r17,4(sp)
    12a8:	dc000017 	ldw	r16,0(sp)
    12ac:	dec00904 	addi	sp,sp,36
    12b0:	f800283a 	ret

000012b4 <__fp_lock>:
    12b4:	0005883a 	mov	r2,zero
    12b8:	f800283a 	ret

000012bc <__sfmoreglue>:
    12bc:	defffc04 	addi	sp,sp,-16
    12c0:	dc400115 	stw	r17,4(sp)
    12c4:	2c7fffc4 	addi	r17,r5,-1
    12c8:	8c401a24 	muli	r17,r17,104
    12cc:	dc800215 	stw	r18,8(sp)
    12d0:	2825883a 	mov	r18,r5
    12d4:	89401d04 	addi	r5,r17,116
    12d8:	dc000015 	stw	r16,0(sp)
    12dc:	dfc00315 	stw	ra,12(sp)
    12e0:	0001ae80 	call	1ae8 <_malloc_r>
    12e4:	1021883a 	mov	r16,r2
    12e8:	10000726 	beq	r2,zero,1308 <__sfmoreglue+0x4c>
    12ec:	11000304 	addi	r4,r2,12
    12f0:	10000015 	stw	zero,0(r2)
    12f4:	14800115 	stw	r18,4(r2)
    12f8:	11000215 	stw	r4,8(r2)
    12fc:	89801a04 	addi	r6,r17,104
    1300:	000b883a 	mov	r5,zero
    1304:	000267c0 	call	267c <memset>
    1308:	8005883a 	mov	r2,r16
    130c:	dfc00317 	ldw	ra,12(sp)
    1310:	dc800217 	ldw	r18,8(sp)
    1314:	dc400117 	ldw	r17,4(sp)
    1318:	dc000017 	ldw	r16,0(sp)
    131c:	dec00404 	addi	sp,sp,16
    1320:	f800283a 	ret

00001324 <__sfp>:
    1324:	defffb04 	addi	sp,sp,-20
    1328:	dc000015 	stw	r16,0(sp)
    132c:	04000074 	movhi	r16,1
    1330:	8437f004 	addi	r16,r16,-8256
    1334:	dcc00315 	stw	r19,12(sp)
    1338:	2027883a 	mov	r19,r4
    133c:	81000017 	ldw	r4,0(r16)
    1340:	dfc00415 	stw	ra,16(sp)
    1344:	dc800215 	stw	r18,8(sp)
    1348:	20800e17 	ldw	r2,56(r4)
    134c:	dc400115 	stw	r17,4(sp)
    1350:	1000021e 	bne	r2,zero,135c <__sfp+0x38>
    1354:	00011180 	call	1118 <__sinit.part.1>
    1358:	81000017 	ldw	r4,0(r16)
    135c:	2480b804 	addi	r18,r4,736
    1360:	047fffc4 	movi	r17,-1
    1364:	91000117 	ldw	r4,4(r18)
    1368:	94000217 	ldw	r16,8(r18)
    136c:	213fffc4 	addi	r4,r4,-1
    1370:	20000a16 	blt	r4,zero,139c <__sfp+0x78>
    1374:	8080030f 	ldh	r2,12(r16)
    1378:	10000c26 	beq	r2,zero,13ac <__sfp+0x88>
    137c:	80c01d04 	addi	r3,r16,116
    1380:	00000206 	br	138c <__sfp+0x68>
    1384:	18bfe60f 	ldh	r2,-104(r3)
    1388:	10000826 	beq	r2,zero,13ac <__sfp+0x88>
    138c:	213fffc4 	addi	r4,r4,-1
    1390:	1c3ffd04 	addi	r16,r3,-12
    1394:	18c01a04 	addi	r3,r3,104
    1398:	247ffa1e 	bne	r4,r17,1384 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001384>
    139c:	90800017 	ldw	r2,0(r18)
    13a0:	10001d26 	beq	r2,zero,1418 <__sfp+0xf4>
    13a4:	1025883a 	mov	r18,r2
    13a8:	003fee06 	br	1364 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001364>
    13ac:	00bfffc4 	movi	r2,-1
    13b0:	8080038d 	sth	r2,14(r16)
    13b4:	00800044 	movi	r2,1
    13b8:	8080030d 	sth	r2,12(r16)
    13bc:	80001915 	stw	zero,100(r16)
    13c0:	80000015 	stw	zero,0(r16)
    13c4:	80000215 	stw	zero,8(r16)
    13c8:	80000115 	stw	zero,4(r16)
    13cc:	80000415 	stw	zero,16(r16)
    13d0:	80000515 	stw	zero,20(r16)
    13d4:	80000615 	stw	zero,24(r16)
    13d8:	01800204 	movi	r6,8
    13dc:	000b883a 	mov	r5,zero
    13e0:	81001704 	addi	r4,r16,92
    13e4:	000267c0 	call	267c <memset>
    13e8:	8005883a 	mov	r2,r16
    13ec:	80000c15 	stw	zero,48(r16)
    13f0:	80000d15 	stw	zero,52(r16)
    13f4:	80001115 	stw	zero,68(r16)
    13f8:	80001215 	stw	zero,72(r16)
    13fc:	dfc00417 	ldw	ra,16(sp)
    1400:	dcc00317 	ldw	r19,12(sp)
    1404:	dc800217 	ldw	r18,8(sp)
    1408:	dc400117 	ldw	r17,4(sp)
    140c:	dc000017 	ldw	r16,0(sp)
    1410:	dec00504 	addi	sp,sp,20
    1414:	f800283a 	ret
    1418:	01400104 	movi	r5,4
    141c:	9809883a 	mov	r4,r19
    1420:	00012bc0 	call	12bc <__sfmoreglue>
    1424:	90800015 	stw	r2,0(r18)
    1428:	103fde1e 	bne	r2,zero,13a4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00013a4>
    142c:	00800304 	movi	r2,12
    1430:	98800015 	stw	r2,0(r19)
    1434:	0005883a 	mov	r2,zero
    1438:	003ff006 	br	13fc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00013fc>

0000143c <_cleanup>:
    143c:	00800074 	movhi	r2,1
    1440:	10b7f004 	addi	r2,r2,-8256
    1444:	11000017 	ldw	r4,0(r2)
    1448:	01400034 	movhi	r5,0
    144c:	294c2804 	addi	r5,r5,12448
    1450:	0001a241 	jmpi	1a24 <_fwalk_reent>

00001454 <__sinit>:
    1454:	20800e17 	ldw	r2,56(r4)
    1458:	10000126 	beq	r2,zero,1460 <__sinit+0xc>
    145c:	f800283a 	ret
    1460:	00011181 	jmpi	1118 <__sinit.part.1>

00001464 <__sfp_lock_acquire>:
    1464:	f800283a 	ret

00001468 <__sfp_lock_release>:
    1468:	f800283a 	ret

0000146c <__sinit_lock_acquire>:
    146c:	f800283a 	ret

00001470 <__sinit_lock_release>:
    1470:	f800283a 	ret

00001474 <__fp_lock_all>:
    1474:	00800074 	movhi	r2,1
    1478:	10b7f104 	addi	r2,r2,-8252
    147c:	11000017 	ldw	r4,0(r2)
    1480:	01400034 	movhi	r5,0
    1484:	2944ad04 	addi	r5,r5,4788
    1488:	00019601 	jmpi	1960 <_fwalk>

0000148c <__fp_unlock_all>:
    148c:	00800074 	movhi	r2,1
    1490:	10b7f104 	addi	r2,r2,-8252
    1494:	11000017 	ldw	r4,0(r2)
    1498:	01400034 	movhi	r5,0
    149c:	29444104 	addi	r5,r5,4356
    14a0:	00019601 	jmpi	1960 <_fwalk>

000014a4 <__sfvwrite_r>:
    14a4:	30800217 	ldw	r2,8(r6)
    14a8:	10006726 	beq	r2,zero,1648 <__sfvwrite_r+0x1a4>
    14ac:	28c0030b 	ldhu	r3,12(r5)
    14b0:	defff404 	addi	sp,sp,-48
    14b4:	dd400715 	stw	r21,28(sp)
    14b8:	dd000615 	stw	r20,24(sp)
    14bc:	dc000215 	stw	r16,8(sp)
    14c0:	dfc00b15 	stw	ra,44(sp)
    14c4:	df000a15 	stw	fp,40(sp)
    14c8:	ddc00915 	stw	r23,36(sp)
    14cc:	dd800815 	stw	r22,32(sp)
    14d0:	dcc00515 	stw	r19,20(sp)
    14d4:	dc800415 	stw	r18,16(sp)
    14d8:	dc400315 	stw	r17,12(sp)
    14dc:	1880020c 	andi	r2,r3,8
    14e0:	2821883a 	mov	r16,r5
    14e4:	202b883a 	mov	r21,r4
    14e8:	3029883a 	mov	r20,r6
    14ec:	10002726 	beq	r2,zero,158c <__sfvwrite_r+0xe8>
    14f0:	28800417 	ldw	r2,16(r5)
    14f4:	10002526 	beq	r2,zero,158c <__sfvwrite_r+0xe8>
    14f8:	1880008c 	andi	r2,r3,2
    14fc:	a4400017 	ldw	r17,0(r20)
    1500:	10002a26 	beq	r2,zero,15ac <__sfvwrite_r+0x108>
    1504:	05a00034 	movhi	r22,32768
    1508:	0027883a 	mov	r19,zero
    150c:	0025883a 	mov	r18,zero
    1510:	b5bf0004 	addi	r22,r22,-1024
    1514:	980d883a 	mov	r6,r19
    1518:	a809883a 	mov	r4,r21
    151c:	90004626 	beq	r18,zero,1638 <__sfvwrite_r+0x194>
    1520:	900f883a 	mov	r7,r18
    1524:	b480022e 	bgeu	r22,r18,1530 <__sfvwrite_r+0x8c>
    1528:	01e00034 	movhi	r7,32768
    152c:	39ff0004 	addi	r7,r7,-1024
    1530:	80800917 	ldw	r2,36(r16)
    1534:	81400717 	ldw	r5,28(r16)
    1538:	103ee83a 	callr	r2
    153c:	0080570e 	bge	zero,r2,169c <__sfvwrite_r+0x1f8>
    1540:	a0c00217 	ldw	r3,8(r20)
    1544:	98a7883a 	add	r19,r19,r2
    1548:	90a5c83a 	sub	r18,r18,r2
    154c:	1885c83a 	sub	r2,r3,r2
    1550:	a0800215 	stw	r2,8(r20)
    1554:	103fef1e 	bne	r2,zero,1514 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001514>
    1558:	0005883a 	mov	r2,zero
    155c:	dfc00b17 	ldw	ra,44(sp)
    1560:	df000a17 	ldw	fp,40(sp)
    1564:	ddc00917 	ldw	r23,36(sp)
    1568:	dd800817 	ldw	r22,32(sp)
    156c:	dd400717 	ldw	r21,28(sp)
    1570:	dd000617 	ldw	r20,24(sp)
    1574:	dcc00517 	ldw	r19,20(sp)
    1578:	dc800417 	ldw	r18,16(sp)
    157c:	dc400317 	ldw	r17,12(sp)
    1580:	dc000217 	ldw	r16,8(sp)
    1584:	dec00c04 	addi	sp,sp,48
    1588:	f800283a 	ret
    158c:	800b883a 	mov	r5,r16
    1590:	a809883a 	mov	r4,r21
    1594:	0002ef80 	call	2ef8 <__swsetup_r>
    1598:	1000eb1e 	bne	r2,zero,1948 <__sfvwrite_r+0x4a4>
    159c:	80c0030b 	ldhu	r3,12(r16)
    15a0:	a4400017 	ldw	r17,0(r20)
    15a4:	1880008c 	andi	r2,r3,2
    15a8:	103fd61e 	bne	r2,zero,1504 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001504>
    15ac:	1880004c 	andi	r2,r3,1
    15b0:	10003f1e 	bne	r2,zero,16b0 <__sfvwrite_r+0x20c>
    15b4:	0039883a 	mov	fp,zero
    15b8:	0025883a 	mov	r18,zero
    15bc:	90001a26 	beq	r18,zero,1628 <__sfvwrite_r+0x184>
    15c0:	1880800c 	andi	r2,r3,512
    15c4:	84c00217 	ldw	r19,8(r16)
    15c8:	10002126 	beq	r2,zero,1650 <__sfvwrite_r+0x1ac>
    15cc:	982f883a 	mov	r23,r19
    15d0:	94c09336 	bltu	r18,r19,1820 <__sfvwrite_r+0x37c>
    15d4:	1881200c 	andi	r2,r3,1152
    15d8:	10009e1e 	bne	r2,zero,1854 <__sfvwrite_r+0x3b0>
    15dc:	81000017 	ldw	r4,0(r16)
    15e0:	b80d883a 	mov	r6,r23
    15e4:	e00b883a 	mov	r5,fp
    15e8:	00025200 	call	2520 <memmove>
    15ec:	80c00217 	ldw	r3,8(r16)
    15f0:	81000017 	ldw	r4,0(r16)
    15f4:	9005883a 	mov	r2,r18
    15f8:	1ce7c83a 	sub	r19,r3,r19
    15fc:	25cf883a 	add	r7,r4,r23
    1600:	84c00215 	stw	r19,8(r16)
    1604:	81c00015 	stw	r7,0(r16)
    1608:	a0c00217 	ldw	r3,8(r20)
    160c:	e0b9883a 	add	fp,fp,r2
    1610:	90a5c83a 	sub	r18,r18,r2
    1614:	18a7c83a 	sub	r19,r3,r2
    1618:	a4c00215 	stw	r19,8(r20)
    161c:	983fce26 	beq	r19,zero,1558 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001558>
    1620:	80c0030b 	ldhu	r3,12(r16)
    1624:	903fe61e 	bne	r18,zero,15c0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00015c0>
    1628:	8f000017 	ldw	fp,0(r17)
    162c:	8c800117 	ldw	r18,4(r17)
    1630:	8c400204 	addi	r17,r17,8
    1634:	003fe106 	br	15bc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00015bc>
    1638:	8cc00017 	ldw	r19,0(r17)
    163c:	8c800117 	ldw	r18,4(r17)
    1640:	8c400204 	addi	r17,r17,8
    1644:	003fb306 	br	1514 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001514>
    1648:	0005883a 	mov	r2,zero
    164c:	f800283a 	ret
    1650:	81000017 	ldw	r4,0(r16)
    1654:	80800417 	ldw	r2,16(r16)
    1658:	11005736 	bltu	r2,r4,17b8 <__sfvwrite_r+0x314>
    165c:	85c00517 	ldw	r23,20(r16)
    1660:	95c05536 	bltu	r18,r23,17b8 <__sfvwrite_r+0x314>
    1664:	00a00034 	movhi	r2,32768
    1668:	10bfffc4 	addi	r2,r2,-1
    166c:	9009883a 	mov	r4,r18
    1670:	1480012e 	bgeu	r2,r18,1678 <__sfvwrite_r+0x1d4>
    1674:	1009883a 	mov	r4,r2
    1678:	b80b883a 	mov	r5,r23
    167c:	0003bac0 	call	3bac <__divsi3>
    1680:	15cf383a 	mul	r7,r2,r23
    1684:	81400717 	ldw	r5,28(r16)
    1688:	80800917 	ldw	r2,36(r16)
    168c:	e00d883a 	mov	r6,fp
    1690:	a809883a 	mov	r4,r21
    1694:	103ee83a 	callr	r2
    1698:	00bfdb16 	blt	zero,r2,1608 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001608>
    169c:	8080030b 	ldhu	r2,12(r16)
    16a0:	10801014 	ori	r2,r2,64
    16a4:	8080030d 	sth	r2,12(r16)
    16a8:	00bfffc4 	movi	r2,-1
    16ac:	003fab06 	br	155c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000155c>
    16b0:	0027883a 	mov	r19,zero
    16b4:	0011883a 	mov	r8,zero
    16b8:	0039883a 	mov	fp,zero
    16bc:	0025883a 	mov	r18,zero
    16c0:	90001f26 	beq	r18,zero,1740 <__sfvwrite_r+0x29c>
    16c4:	40005a26 	beq	r8,zero,1830 <__sfvwrite_r+0x38c>
    16c8:	982d883a 	mov	r22,r19
    16cc:	94c0012e 	bgeu	r18,r19,16d4 <__sfvwrite_r+0x230>
    16d0:	902d883a 	mov	r22,r18
    16d4:	81000017 	ldw	r4,0(r16)
    16d8:	80800417 	ldw	r2,16(r16)
    16dc:	b02f883a 	mov	r23,r22
    16e0:	81c00517 	ldw	r7,20(r16)
    16e4:	1100032e 	bgeu	r2,r4,16f4 <__sfvwrite_r+0x250>
    16e8:	80c00217 	ldw	r3,8(r16)
    16ec:	38c7883a 	add	r3,r7,r3
    16f0:	1d801816 	blt	r3,r22,1754 <__sfvwrite_r+0x2b0>
    16f4:	b1c03e16 	blt	r22,r7,17f0 <__sfvwrite_r+0x34c>
    16f8:	80800917 	ldw	r2,36(r16)
    16fc:	81400717 	ldw	r5,28(r16)
    1700:	e00d883a 	mov	r6,fp
    1704:	da000115 	stw	r8,4(sp)
    1708:	a809883a 	mov	r4,r21
    170c:	103ee83a 	callr	r2
    1710:	102f883a 	mov	r23,r2
    1714:	da000117 	ldw	r8,4(sp)
    1718:	00bfe00e 	bge	zero,r2,169c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000169c>
    171c:	9de7c83a 	sub	r19,r19,r23
    1720:	98001f26 	beq	r19,zero,17a0 <__sfvwrite_r+0x2fc>
    1724:	a0800217 	ldw	r2,8(r20)
    1728:	e5f9883a 	add	fp,fp,r23
    172c:	95e5c83a 	sub	r18,r18,r23
    1730:	15efc83a 	sub	r23,r2,r23
    1734:	a5c00215 	stw	r23,8(r20)
    1738:	b83f8726 	beq	r23,zero,1558 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001558>
    173c:	903fe11e 	bne	r18,zero,16c4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00016c4>
    1740:	8f000017 	ldw	fp,0(r17)
    1744:	8c800117 	ldw	r18,4(r17)
    1748:	0011883a 	mov	r8,zero
    174c:	8c400204 	addi	r17,r17,8
    1750:	003fdb06 	br	16c0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00016c0>
    1754:	180d883a 	mov	r6,r3
    1758:	e00b883a 	mov	r5,fp
    175c:	da000115 	stw	r8,4(sp)
    1760:	d8c00015 	stw	r3,0(sp)
    1764:	00025200 	call	2520 <memmove>
    1768:	d8c00017 	ldw	r3,0(sp)
    176c:	80800017 	ldw	r2,0(r16)
    1770:	800b883a 	mov	r5,r16
    1774:	a809883a 	mov	r4,r21
    1778:	10c5883a 	add	r2,r2,r3
    177c:	80800015 	stw	r2,0(r16)
    1780:	d8c00015 	stw	r3,0(sp)
    1784:	00033c00 	call	33c0 <_fflush_r>
    1788:	d8c00017 	ldw	r3,0(sp)
    178c:	da000117 	ldw	r8,4(sp)
    1790:	103fc21e 	bne	r2,zero,169c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000169c>
    1794:	182f883a 	mov	r23,r3
    1798:	9de7c83a 	sub	r19,r19,r23
    179c:	983fe11e 	bne	r19,zero,1724 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001724>
    17a0:	800b883a 	mov	r5,r16
    17a4:	a809883a 	mov	r4,r21
    17a8:	00033c00 	call	33c0 <_fflush_r>
    17ac:	103fbb1e 	bne	r2,zero,169c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000169c>
    17b0:	0011883a 	mov	r8,zero
    17b4:	003fdb06 	br	1724 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001724>
    17b8:	94c0012e 	bgeu	r18,r19,17c0 <__sfvwrite_r+0x31c>
    17bc:	9027883a 	mov	r19,r18
    17c0:	980d883a 	mov	r6,r19
    17c4:	e00b883a 	mov	r5,fp
    17c8:	00025200 	call	2520 <memmove>
    17cc:	80800217 	ldw	r2,8(r16)
    17d0:	80c00017 	ldw	r3,0(r16)
    17d4:	14c5c83a 	sub	r2,r2,r19
    17d8:	1cc7883a 	add	r3,r3,r19
    17dc:	80800215 	stw	r2,8(r16)
    17e0:	80c00015 	stw	r3,0(r16)
    17e4:	10004326 	beq	r2,zero,18f4 <__sfvwrite_r+0x450>
    17e8:	9805883a 	mov	r2,r19
    17ec:	003f8606 	br	1608 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001608>
    17f0:	b00d883a 	mov	r6,r22
    17f4:	e00b883a 	mov	r5,fp
    17f8:	da000115 	stw	r8,4(sp)
    17fc:	00025200 	call	2520 <memmove>
    1800:	80800217 	ldw	r2,8(r16)
    1804:	80c00017 	ldw	r3,0(r16)
    1808:	da000117 	ldw	r8,4(sp)
    180c:	1585c83a 	sub	r2,r2,r22
    1810:	1dad883a 	add	r22,r3,r22
    1814:	80800215 	stw	r2,8(r16)
    1818:	85800015 	stw	r22,0(r16)
    181c:	003fbf06 	br	171c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000171c>
    1820:	81000017 	ldw	r4,0(r16)
    1824:	9027883a 	mov	r19,r18
    1828:	902f883a 	mov	r23,r18
    182c:	003f6c06 	br	15e0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00015e0>
    1830:	900d883a 	mov	r6,r18
    1834:	01400284 	movi	r5,10
    1838:	e009883a 	mov	r4,fp
    183c:	00022f40 	call	22f4 <memchr>
    1840:	10003e26 	beq	r2,zero,193c <__sfvwrite_r+0x498>
    1844:	10800044 	addi	r2,r2,1
    1848:	1727c83a 	sub	r19,r2,fp
    184c:	02000044 	movi	r8,1
    1850:	003f9d06 	br	16c8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00016c8>
    1854:	80800517 	ldw	r2,20(r16)
    1858:	81400417 	ldw	r5,16(r16)
    185c:	81c00017 	ldw	r7,0(r16)
    1860:	10a7883a 	add	r19,r2,r2
    1864:	9885883a 	add	r2,r19,r2
    1868:	1026d7fa 	srli	r19,r2,31
    186c:	396dc83a 	sub	r22,r7,r5
    1870:	b1000044 	addi	r4,r22,1
    1874:	9885883a 	add	r2,r19,r2
    1878:	1027d07a 	srai	r19,r2,1
    187c:	2485883a 	add	r2,r4,r18
    1880:	980d883a 	mov	r6,r19
    1884:	9880022e 	bgeu	r19,r2,1890 <__sfvwrite_r+0x3ec>
    1888:	1027883a 	mov	r19,r2
    188c:	100d883a 	mov	r6,r2
    1890:	18c1000c 	andi	r3,r3,1024
    1894:	18001c26 	beq	r3,zero,1908 <__sfvwrite_r+0x464>
    1898:	300b883a 	mov	r5,r6
    189c:	a809883a 	mov	r4,r21
    18a0:	0001ae80 	call	1ae8 <_malloc_r>
    18a4:	102f883a 	mov	r23,r2
    18a8:	10002926 	beq	r2,zero,1950 <__sfvwrite_r+0x4ac>
    18ac:	81400417 	ldw	r5,16(r16)
    18b0:	b00d883a 	mov	r6,r22
    18b4:	1009883a 	mov	r4,r2
    18b8:	00023d80 	call	23d8 <memcpy>
    18bc:	8080030b 	ldhu	r2,12(r16)
    18c0:	00fedfc4 	movi	r3,-1153
    18c4:	10c4703a 	and	r2,r2,r3
    18c8:	10802014 	ori	r2,r2,128
    18cc:	8080030d 	sth	r2,12(r16)
    18d0:	bd89883a 	add	r4,r23,r22
    18d4:	9d8fc83a 	sub	r7,r19,r22
    18d8:	85c00415 	stw	r23,16(r16)
    18dc:	84c00515 	stw	r19,20(r16)
    18e0:	81000015 	stw	r4,0(r16)
    18e4:	9027883a 	mov	r19,r18
    18e8:	81c00215 	stw	r7,8(r16)
    18ec:	902f883a 	mov	r23,r18
    18f0:	003f3b06 	br	15e0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00015e0>
    18f4:	800b883a 	mov	r5,r16
    18f8:	a809883a 	mov	r4,r21
    18fc:	00033c00 	call	33c0 <_fflush_r>
    1900:	103fb926 	beq	r2,zero,17e8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00017e8>
    1904:	003f6506 	br	169c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000169c>
    1908:	a809883a 	mov	r4,r21
    190c:	00027a40 	call	27a4 <_realloc_r>
    1910:	102f883a 	mov	r23,r2
    1914:	103fee1e 	bne	r2,zero,18d0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00018d0>
    1918:	81400417 	ldw	r5,16(r16)
    191c:	a809883a 	mov	r4,r21
    1920:	00035700 	call	3570 <_free_r>
    1924:	8080030b 	ldhu	r2,12(r16)
    1928:	00ffdfc4 	movi	r3,-129
    192c:	1884703a 	and	r2,r3,r2
    1930:	00c00304 	movi	r3,12
    1934:	a8c00015 	stw	r3,0(r21)
    1938:	003f5906 	br	16a0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00016a0>
    193c:	94c00044 	addi	r19,r18,1
    1940:	02000044 	movi	r8,1
    1944:	003f6006 	br	16c8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00016c8>
    1948:	00bfffc4 	movi	r2,-1
    194c:	003f0306 	br	155c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000155c>
    1950:	00800304 	movi	r2,12
    1954:	a8800015 	stw	r2,0(r21)
    1958:	8080030b 	ldhu	r2,12(r16)
    195c:	003f5006 	br	16a0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00016a0>

00001960 <_fwalk>:
    1960:	defff704 	addi	sp,sp,-36
    1964:	dd000415 	stw	r20,16(sp)
    1968:	dfc00815 	stw	ra,32(sp)
    196c:	ddc00715 	stw	r23,28(sp)
    1970:	dd800615 	stw	r22,24(sp)
    1974:	dd400515 	stw	r21,20(sp)
    1978:	dcc00315 	stw	r19,12(sp)
    197c:	dc800215 	stw	r18,8(sp)
    1980:	dc400115 	stw	r17,4(sp)
    1984:	dc000015 	stw	r16,0(sp)
    1988:	2500b804 	addi	r20,r4,736
    198c:	a0002326 	beq	r20,zero,1a1c <_fwalk+0xbc>
    1990:	282b883a 	mov	r21,r5
    1994:	002f883a 	mov	r23,zero
    1998:	05800044 	movi	r22,1
    199c:	04ffffc4 	movi	r19,-1
    19a0:	a4400117 	ldw	r17,4(r20)
    19a4:	a4800217 	ldw	r18,8(r20)
    19a8:	8c7fffc4 	addi	r17,r17,-1
    19ac:	88000d16 	blt	r17,zero,19e4 <_fwalk+0x84>
    19b0:	94000304 	addi	r16,r18,12
    19b4:	94800384 	addi	r18,r18,14
    19b8:	8080000b 	ldhu	r2,0(r16)
    19bc:	8c7fffc4 	addi	r17,r17,-1
    19c0:	813ffd04 	addi	r4,r16,-12
    19c4:	b080042e 	bgeu	r22,r2,19d8 <_fwalk+0x78>
    19c8:	9080000f 	ldh	r2,0(r18)
    19cc:	14c00226 	beq	r2,r19,19d8 <_fwalk+0x78>
    19d0:	a83ee83a 	callr	r21
    19d4:	b8aeb03a 	or	r23,r23,r2
    19d8:	84001a04 	addi	r16,r16,104
    19dc:	94801a04 	addi	r18,r18,104
    19e0:	8cfff51e 	bne	r17,r19,19b8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00019b8>
    19e4:	a5000017 	ldw	r20,0(r20)
    19e8:	a03fed1e 	bne	r20,zero,19a0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00019a0>
    19ec:	b805883a 	mov	r2,r23
    19f0:	dfc00817 	ldw	ra,32(sp)
    19f4:	ddc00717 	ldw	r23,28(sp)
    19f8:	dd800617 	ldw	r22,24(sp)
    19fc:	dd400517 	ldw	r21,20(sp)
    1a00:	dd000417 	ldw	r20,16(sp)
    1a04:	dcc00317 	ldw	r19,12(sp)
    1a08:	dc800217 	ldw	r18,8(sp)
    1a0c:	dc400117 	ldw	r17,4(sp)
    1a10:	dc000017 	ldw	r16,0(sp)
    1a14:	dec00904 	addi	sp,sp,36
    1a18:	f800283a 	ret
    1a1c:	002f883a 	mov	r23,zero
    1a20:	003ff206 	br	19ec <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00019ec>

00001a24 <_fwalk_reent>:
    1a24:	defff704 	addi	sp,sp,-36
    1a28:	dd000415 	stw	r20,16(sp)
    1a2c:	dfc00815 	stw	ra,32(sp)
    1a30:	ddc00715 	stw	r23,28(sp)
    1a34:	dd800615 	stw	r22,24(sp)
    1a38:	dd400515 	stw	r21,20(sp)
    1a3c:	dcc00315 	stw	r19,12(sp)
    1a40:	dc800215 	stw	r18,8(sp)
    1a44:	dc400115 	stw	r17,4(sp)
    1a48:	dc000015 	stw	r16,0(sp)
    1a4c:	2500b804 	addi	r20,r4,736
    1a50:	a0002326 	beq	r20,zero,1ae0 <_fwalk_reent+0xbc>
    1a54:	282b883a 	mov	r21,r5
    1a58:	2027883a 	mov	r19,r4
    1a5c:	002f883a 	mov	r23,zero
    1a60:	05800044 	movi	r22,1
    1a64:	04bfffc4 	movi	r18,-1
    1a68:	a4400117 	ldw	r17,4(r20)
    1a6c:	a4000217 	ldw	r16,8(r20)
    1a70:	8c7fffc4 	addi	r17,r17,-1
    1a74:	88000c16 	blt	r17,zero,1aa8 <_fwalk_reent+0x84>
    1a78:	84000304 	addi	r16,r16,12
    1a7c:	8080000b 	ldhu	r2,0(r16)
    1a80:	8c7fffc4 	addi	r17,r17,-1
    1a84:	817ffd04 	addi	r5,r16,-12
    1a88:	b080052e 	bgeu	r22,r2,1aa0 <_fwalk_reent+0x7c>
    1a8c:	8080008f 	ldh	r2,2(r16)
    1a90:	9809883a 	mov	r4,r19
    1a94:	14800226 	beq	r2,r18,1aa0 <_fwalk_reent+0x7c>
    1a98:	a83ee83a 	callr	r21
    1a9c:	b8aeb03a 	or	r23,r23,r2
    1aa0:	84001a04 	addi	r16,r16,104
    1aa4:	8cbff51e 	bne	r17,r18,1a7c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001a7c>
    1aa8:	a5000017 	ldw	r20,0(r20)
    1aac:	a03fee1e 	bne	r20,zero,1a68 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001a68>
    1ab0:	b805883a 	mov	r2,r23
    1ab4:	dfc00817 	ldw	ra,32(sp)
    1ab8:	ddc00717 	ldw	r23,28(sp)
    1abc:	dd800617 	ldw	r22,24(sp)
    1ac0:	dd400517 	ldw	r21,20(sp)
    1ac4:	dd000417 	ldw	r20,16(sp)
    1ac8:	dcc00317 	ldw	r19,12(sp)
    1acc:	dc800217 	ldw	r18,8(sp)
    1ad0:	dc400117 	ldw	r17,4(sp)
    1ad4:	dc000017 	ldw	r16,0(sp)
    1ad8:	dec00904 	addi	sp,sp,36
    1adc:	f800283a 	ret
    1ae0:	002f883a 	mov	r23,zero
    1ae4:	003ff206 	br	1ab0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001ab0>

00001ae8 <_malloc_r>:
    1ae8:	defff504 	addi	sp,sp,-44
    1aec:	dc800315 	stw	r18,12(sp)
    1af0:	dfc00a15 	stw	ra,40(sp)
    1af4:	df000915 	stw	fp,36(sp)
    1af8:	ddc00815 	stw	r23,32(sp)
    1afc:	dd800715 	stw	r22,28(sp)
    1b00:	dd400615 	stw	r21,24(sp)
    1b04:	dd000515 	stw	r20,20(sp)
    1b08:	dcc00415 	stw	r19,16(sp)
    1b0c:	dc400215 	stw	r17,8(sp)
    1b10:	dc000115 	stw	r16,4(sp)
    1b14:	288002c4 	addi	r2,r5,11
    1b18:	00c00584 	movi	r3,22
    1b1c:	2025883a 	mov	r18,r4
    1b20:	18807f2e 	bgeu	r3,r2,1d20 <_malloc_r+0x238>
    1b24:	047ffe04 	movi	r17,-8
    1b28:	1462703a 	and	r17,r2,r17
    1b2c:	8800a316 	blt	r17,zero,1dbc <_malloc_r+0x2d4>
    1b30:	8940a236 	bltu	r17,r5,1dbc <_malloc_r+0x2d4>
    1b34:	000445c0 	call	445c <__malloc_lock>
    1b38:	00807dc4 	movi	r2,503
    1b3c:	1441e92e 	bgeu	r2,r17,22e4 <_malloc_r+0x7fc>
    1b40:	8804d27a 	srli	r2,r17,9
    1b44:	1000a126 	beq	r2,zero,1dcc <_malloc_r+0x2e4>
    1b48:	00c00104 	movi	r3,4
    1b4c:	18811e36 	bltu	r3,r2,1fc8 <_malloc_r+0x4e0>
    1b50:	8804d1ba 	srli	r2,r17,6
    1b54:	12000e44 	addi	r8,r2,57
    1b58:	11c00e04 	addi	r7,r2,56
    1b5c:	4209883a 	add	r4,r8,r8
    1b60:	04c00074 	movhi	r19,1
    1b64:	2109883a 	add	r4,r4,r4
    1b68:	9cf1d704 	addi	r19,r19,-14500
    1b6c:	2109883a 	add	r4,r4,r4
    1b70:	9909883a 	add	r4,r19,r4
    1b74:	24000117 	ldw	r16,4(r4)
    1b78:	213ffe04 	addi	r4,r4,-8
    1b7c:	24009726 	beq	r4,r16,1ddc <_malloc_r+0x2f4>
    1b80:	80800117 	ldw	r2,4(r16)
    1b84:	01bfff04 	movi	r6,-4
    1b88:	014003c4 	movi	r5,15
    1b8c:	1184703a 	and	r2,r2,r6
    1b90:	1447c83a 	sub	r3,r2,r17
    1b94:	28c00716 	blt	r5,r3,1bb4 <_malloc_r+0xcc>
    1b98:	1800920e 	bge	r3,zero,1de4 <_malloc_r+0x2fc>
    1b9c:	84000317 	ldw	r16,12(r16)
    1ba0:	24008e26 	beq	r4,r16,1ddc <_malloc_r+0x2f4>
    1ba4:	80800117 	ldw	r2,4(r16)
    1ba8:	1184703a 	and	r2,r2,r6
    1bac:	1447c83a 	sub	r3,r2,r17
    1bb0:	28fff90e 	bge	r5,r3,1b98 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001b98>
    1bb4:	3809883a 	mov	r4,r7
    1bb8:	01800074 	movhi	r6,1
    1bbc:	9c000417 	ldw	r16,16(r19)
    1bc0:	31b1d704 	addi	r6,r6,-14500
    1bc4:	32000204 	addi	r8,r6,8
    1bc8:	82013426 	beq	r16,r8,209c <_malloc_r+0x5b4>
    1bcc:	80c00117 	ldw	r3,4(r16)
    1bd0:	00bfff04 	movi	r2,-4
    1bd4:	188e703a 	and	r7,r3,r2
    1bd8:	3c45c83a 	sub	r2,r7,r17
    1bdc:	00c003c4 	movi	r3,15
    1be0:	18811f16 	blt	r3,r2,2060 <_malloc_r+0x578>
    1be4:	32000515 	stw	r8,20(r6)
    1be8:	32000415 	stw	r8,16(r6)
    1bec:	10007f0e 	bge	r2,zero,1dec <_malloc_r+0x304>
    1bf0:	00807fc4 	movi	r2,511
    1bf4:	11c0fd36 	bltu	r2,r7,1fec <_malloc_r+0x504>
    1bf8:	3806d0fa 	srli	r3,r7,3
    1bfc:	01c00044 	movi	r7,1
    1c00:	30800117 	ldw	r2,4(r6)
    1c04:	19400044 	addi	r5,r3,1
    1c08:	294b883a 	add	r5,r5,r5
    1c0c:	1807d0ba 	srai	r3,r3,2
    1c10:	294b883a 	add	r5,r5,r5
    1c14:	294b883a 	add	r5,r5,r5
    1c18:	298b883a 	add	r5,r5,r6
    1c1c:	38c6983a 	sll	r3,r7,r3
    1c20:	29c00017 	ldw	r7,0(r5)
    1c24:	2a7ffe04 	addi	r9,r5,-8
    1c28:	1886b03a 	or	r3,r3,r2
    1c2c:	82400315 	stw	r9,12(r16)
    1c30:	81c00215 	stw	r7,8(r16)
    1c34:	30c00115 	stw	r3,4(r6)
    1c38:	2c000015 	stw	r16,0(r5)
    1c3c:	3c000315 	stw	r16,12(r7)
    1c40:	2005d0ba 	srai	r2,r4,2
    1c44:	01400044 	movi	r5,1
    1c48:	288a983a 	sll	r5,r5,r2
    1c4c:	19406f36 	bltu	r3,r5,1e0c <_malloc_r+0x324>
    1c50:	28c4703a 	and	r2,r5,r3
    1c54:	10000a1e 	bne	r2,zero,1c80 <_malloc_r+0x198>
    1c58:	00bfff04 	movi	r2,-4
    1c5c:	294b883a 	add	r5,r5,r5
    1c60:	2088703a 	and	r4,r4,r2
    1c64:	28c4703a 	and	r2,r5,r3
    1c68:	21000104 	addi	r4,r4,4
    1c6c:	1000041e 	bne	r2,zero,1c80 <_malloc_r+0x198>
    1c70:	294b883a 	add	r5,r5,r5
    1c74:	28c4703a 	and	r2,r5,r3
    1c78:	21000104 	addi	r4,r4,4
    1c7c:	103ffc26 	beq	r2,zero,1c70 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001c70>
    1c80:	02bfff04 	movi	r10,-4
    1c84:	024003c4 	movi	r9,15
    1c88:	21800044 	addi	r6,r4,1
    1c8c:	318d883a 	add	r6,r6,r6
    1c90:	318d883a 	add	r6,r6,r6
    1c94:	318d883a 	add	r6,r6,r6
    1c98:	998d883a 	add	r6,r19,r6
    1c9c:	333ffe04 	addi	r12,r6,-8
    1ca0:	2017883a 	mov	r11,r4
    1ca4:	31800104 	addi	r6,r6,4
    1ca8:	34000017 	ldw	r16,0(r6)
    1cac:	31fffd04 	addi	r7,r6,-12
    1cb0:	81c0041e 	bne	r16,r7,1cc4 <_malloc_r+0x1dc>
    1cb4:	0000fb06 	br	20a4 <_malloc_r+0x5bc>
    1cb8:	1801030e 	bge	r3,zero,20c8 <_malloc_r+0x5e0>
    1cbc:	84000317 	ldw	r16,12(r16)
    1cc0:	81c0f826 	beq	r16,r7,20a4 <_malloc_r+0x5bc>
    1cc4:	80800117 	ldw	r2,4(r16)
    1cc8:	1284703a 	and	r2,r2,r10
    1ccc:	1447c83a 	sub	r3,r2,r17
    1cd0:	48fff90e 	bge	r9,r3,1cb8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001cb8>
    1cd4:	80800317 	ldw	r2,12(r16)
    1cd8:	81000217 	ldw	r4,8(r16)
    1cdc:	89400054 	ori	r5,r17,1
    1ce0:	81400115 	stw	r5,4(r16)
    1ce4:	20800315 	stw	r2,12(r4)
    1ce8:	11000215 	stw	r4,8(r2)
    1cec:	8463883a 	add	r17,r16,r17
    1cf0:	9c400515 	stw	r17,20(r19)
    1cf4:	9c400415 	stw	r17,16(r19)
    1cf8:	18800054 	ori	r2,r3,1
    1cfc:	88800115 	stw	r2,4(r17)
    1d00:	8a000315 	stw	r8,12(r17)
    1d04:	8a000215 	stw	r8,8(r17)
    1d08:	88e3883a 	add	r17,r17,r3
    1d0c:	88c00015 	stw	r3,0(r17)
    1d10:	9009883a 	mov	r4,r18
    1d14:	00044800 	call	4480 <__malloc_unlock>
    1d18:	80800204 	addi	r2,r16,8
    1d1c:	00001b06 	br	1d8c <_malloc_r+0x2a4>
    1d20:	04400404 	movi	r17,16
    1d24:	89402536 	bltu	r17,r5,1dbc <_malloc_r+0x2d4>
    1d28:	000445c0 	call	445c <__malloc_lock>
    1d2c:	00800184 	movi	r2,6
    1d30:	01000084 	movi	r4,2
    1d34:	04c00074 	movhi	r19,1
    1d38:	1085883a 	add	r2,r2,r2
    1d3c:	9cf1d704 	addi	r19,r19,-14500
    1d40:	1085883a 	add	r2,r2,r2
    1d44:	9885883a 	add	r2,r19,r2
    1d48:	14000117 	ldw	r16,4(r2)
    1d4c:	10fffe04 	addi	r3,r2,-8
    1d50:	80c0d926 	beq	r16,r3,20b8 <_malloc_r+0x5d0>
    1d54:	80c00117 	ldw	r3,4(r16)
    1d58:	81000317 	ldw	r4,12(r16)
    1d5c:	00bfff04 	movi	r2,-4
    1d60:	1884703a 	and	r2,r3,r2
    1d64:	81400217 	ldw	r5,8(r16)
    1d68:	8085883a 	add	r2,r16,r2
    1d6c:	10c00117 	ldw	r3,4(r2)
    1d70:	29000315 	stw	r4,12(r5)
    1d74:	21400215 	stw	r5,8(r4)
    1d78:	18c00054 	ori	r3,r3,1
    1d7c:	10c00115 	stw	r3,4(r2)
    1d80:	9009883a 	mov	r4,r18
    1d84:	00044800 	call	4480 <__malloc_unlock>
    1d88:	80800204 	addi	r2,r16,8
    1d8c:	dfc00a17 	ldw	ra,40(sp)
    1d90:	df000917 	ldw	fp,36(sp)
    1d94:	ddc00817 	ldw	r23,32(sp)
    1d98:	dd800717 	ldw	r22,28(sp)
    1d9c:	dd400617 	ldw	r21,24(sp)
    1da0:	dd000517 	ldw	r20,20(sp)
    1da4:	dcc00417 	ldw	r19,16(sp)
    1da8:	dc800317 	ldw	r18,12(sp)
    1dac:	dc400217 	ldw	r17,8(sp)
    1db0:	dc000117 	ldw	r16,4(sp)
    1db4:	dec00b04 	addi	sp,sp,44
    1db8:	f800283a 	ret
    1dbc:	00800304 	movi	r2,12
    1dc0:	90800015 	stw	r2,0(r18)
    1dc4:	0005883a 	mov	r2,zero
    1dc8:	003ff006 	br	1d8c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d8c>
    1dcc:	01002004 	movi	r4,128
    1dd0:	02001004 	movi	r8,64
    1dd4:	01c00fc4 	movi	r7,63
    1dd8:	003f6106 	br	1b60 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001b60>
    1ddc:	4009883a 	mov	r4,r8
    1de0:	003f7506 	br	1bb8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001bb8>
    1de4:	81000317 	ldw	r4,12(r16)
    1de8:	003fde06 	br	1d64 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d64>
    1dec:	81c5883a 	add	r2,r16,r7
    1df0:	11400117 	ldw	r5,4(r2)
    1df4:	9009883a 	mov	r4,r18
    1df8:	29400054 	ori	r5,r5,1
    1dfc:	11400115 	stw	r5,4(r2)
    1e00:	00044800 	call	4480 <__malloc_unlock>
    1e04:	80800204 	addi	r2,r16,8
    1e08:	003fe006 	br	1d8c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d8c>
    1e0c:	9c000217 	ldw	r16,8(r19)
    1e10:	00bfff04 	movi	r2,-4
    1e14:	85800117 	ldw	r22,4(r16)
    1e18:	b0ac703a 	and	r22,r22,r2
    1e1c:	b4400336 	bltu	r22,r17,1e2c <_malloc_r+0x344>
    1e20:	b445c83a 	sub	r2,r22,r17
    1e24:	00c003c4 	movi	r3,15
    1e28:	18805d16 	blt	r3,r2,1fa0 <_malloc_r+0x4b8>
    1e2c:	05c00074 	movhi	r23,1
    1e30:	00800074 	movhi	r2,1
    1e34:	10bf3404 	addi	r2,r2,-816
    1e38:	bdf7f204 	addi	r23,r23,-8248
    1e3c:	15400017 	ldw	r21,0(r2)
    1e40:	b8c00017 	ldw	r3,0(r23)
    1e44:	00bfffc4 	movi	r2,-1
    1e48:	858d883a 	add	r6,r16,r22
    1e4c:	8d6b883a 	add	r21,r17,r21
    1e50:	1880ea26 	beq	r3,r2,21fc <_malloc_r+0x714>
    1e54:	ad4403c4 	addi	r21,r21,4111
    1e58:	00bc0004 	movi	r2,-4096
    1e5c:	a8aa703a 	and	r21,r21,r2
    1e60:	a80b883a 	mov	r5,r21
    1e64:	9009883a 	mov	r4,r18
    1e68:	d9800015 	stw	r6,0(sp)
    1e6c:	0002d080 	call	2d08 <_sbrk_r>
    1e70:	1029883a 	mov	r20,r2
    1e74:	00bfffc4 	movi	r2,-1
    1e78:	d9800017 	ldw	r6,0(sp)
    1e7c:	a080e826 	beq	r20,r2,2220 <_malloc_r+0x738>
    1e80:	a180a636 	bltu	r20,r6,211c <_malloc_r+0x634>
    1e84:	07000074 	movhi	fp,1
    1e88:	e73f3d04 	addi	fp,fp,-780
    1e8c:	e0800017 	ldw	r2,0(fp)
    1e90:	a887883a 	add	r3,r21,r2
    1e94:	e0c00015 	stw	r3,0(fp)
    1e98:	3500e626 	beq	r6,r20,2234 <_malloc_r+0x74c>
    1e9c:	b9000017 	ldw	r4,0(r23)
    1ea0:	00bfffc4 	movi	r2,-1
    1ea4:	2080ee26 	beq	r4,r2,2260 <_malloc_r+0x778>
    1ea8:	a185c83a 	sub	r2,r20,r6
    1eac:	10c5883a 	add	r2,r2,r3
    1eb0:	e0800015 	stw	r2,0(fp)
    1eb4:	a0c001cc 	andi	r3,r20,7
    1eb8:	1800bc26 	beq	r3,zero,21ac <_malloc_r+0x6c4>
    1ebc:	a0e9c83a 	sub	r20,r20,r3
    1ec0:	00840204 	movi	r2,4104
    1ec4:	a5000204 	addi	r20,r20,8
    1ec8:	10c7c83a 	sub	r3,r2,r3
    1ecc:	a545883a 	add	r2,r20,r21
    1ed0:	1083ffcc 	andi	r2,r2,4095
    1ed4:	18abc83a 	sub	r21,r3,r2
    1ed8:	a80b883a 	mov	r5,r21
    1edc:	9009883a 	mov	r4,r18
    1ee0:	0002d080 	call	2d08 <_sbrk_r>
    1ee4:	00ffffc4 	movi	r3,-1
    1ee8:	10c0e126 	beq	r2,r3,2270 <_malloc_r+0x788>
    1eec:	1505c83a 	sub	r2,r2,r20
    1ef0:	1545883a 	add	r2,r2,r21
    1ef4:	10800054 	ori	r2,r2,1
    1ef8:	e0c00017 	ldw	r3,0(fp)
    1efc:	9d000215 	stw	r20,8(r19)
    1f00:	a0800115 	stw	r2,4(r20)
    1f04:	a8c7883a 	add	r3,r21,r3
    1f08:	e0c00015 	stw	r3,0(fp)
    1f0c:	84c00e26 	beq	r16,r19,1f48 <_malloc_r+0x460>
    1f10:	018003c4 	movi	r6,15
    1f14:	3580a72e 	bgeu	r6,r22,21b4 <_malloc_r+0x6cc>
    1f18:	81400117 	ldw	r5,4(r16)
    1f1c:	013ffe04 	movi	r4,-8
    1f20:	b0bffd04 	addi	r2,r22,-12
    1f24:	1104703a 	and	r2,r2,r4
    1f28:	2900004c 	andi	r4,r5,1
    1f2c:	2088b03a 	or	r4,r4,r2
    1f30:	81000115 	stw	r4,4(r16)
    1f34:	01400144 	movi	r5,5
    1f38:	8089883a 	add	r4,r16,r2
    1f3c:	21400115 	stw	r5,4(r4)
    1f40:	21400215 	stw	r5,8(r4)
    1f44:	3080cd36 	bltu	r6,r2,227c <_malloc_r+0x794>
    1f48:	00800074 	movhi	r2,1
    1f4c:	10bf3304 	addi	r2,r2,-820
    1f50:	11000017 	ldw	r4,0(r2)
    1f54:	20c0012e 	bgeu	r4,r3,1f5c <_malloc_r+0x474>
    1f58:	10c00015 	stw	r3,0(r2)
    1f5c:	00800074 	movhi	r2,1
    1f60:	10bf3204 	addi	r2,r2,-824
    1f64:	11000017 	ldw	r4,0(r2)
    1f68:	9c000217 	ldw	r16,8(r19)
    1f6c:	20c0012e 	bgeu	r4,r3,1f74 <_malloc_r+0x48c>
    1f70:	10c00015 	stw	r3,0(r2)
    1f74:	80c00117 	ldw	r3,4(r16)
    1f78:	00bfff04 	movi	r2,-4
    1f7c:	1886703a 	and	r3,r3,r2
    1f80:	1c45c83a 	sub	r2,r3,r17
    1f84:	1c400236 	bltu	r3,r17,1f90 <_malloc_r+0x4a8>
    1f88:	00c003c4 	movi	r3,15
    1f8c:	18800416 	blt	r3,r2,1fa0 <_malloc_r+0x4b8>
    1f90:	9009883a 	mov	r4,r18
    1f94:	00044800 	call	4480 <__malloc_unlock>
    1f98:	0005883a 	mov	r2,zero
    1f9c:	003f7b06 	br	1d8c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d8c>
    1fa0:	88c00054 	ori	r3,r17,1
    1fa4:	80c00115 	stw	r3,4(r16)
    1fa8:	8463883a 	add	r17,r16,r17
    1fac:	10800054 	ori	r2,r2,1
    1fb0:	9c400215 	stw	r17,8(r19)
    1fb4:	88800115 	stw	r2,4(r17)
    1fb8:	9009883a 	mov	r4,r18
    1fbc:	00044800 	call	4480 <__malloc_unlock>
    1fc0:	80800204 	addi	r2,r16,8
    1fc4:	003f7106 	br	1d8c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d8c>
    1fc8:	00c00504 	movi	r3,20
    1fcc:	18804a2e 	bgeu	r3,r2,20f8 <_malloc_r+0x610>
    1fd0:	00c01504 	movi	r3,84
    1fd4:	18806e36 	bltu	r3,r2,2190 <_malloc_r+0x6a8>
    1fd8:	8804d33a 	srli	r2,r17,12
    1fdc:	12001bc4 	addi	r8,r2,111
    1fe0:	11c01b84 	addi	r7,r2,110
    1fe4:	4209883a 	add	r4,r8,r8
    1fe8:	003edd06 	br	1b60 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001b60>
    1fec:	3804d27a 	srli	r2,r7,9
    1ff0:	00c00104 	movi	r3,4
    1ff4:	1880442e 	bgeu	r3,r2,2108 <_malloc_r+0x620>
    1ff8:	00c00504 	movi	r3,20
    1ffc:	18808136 	bltu	r3,r2,2204 <_malloc_r+0x71c>
    2000:	11401704 	addi	r5,r2,92
    2004:	10c016c4 	addi	r3,r2,91
    2008:	294b883a 	add	r5,r5,r5
    200c:	294b883a 	add	r5,r5,r5
    2010:	294b883a 	add	r5,r5,r5
    2014:	994b883a 	add	r5,r19,r5
    2018:	28800017 	ldw	r2,0(r5)
    201c:	01800074 	movhi	r6,1
    2020:	297ffe04 	addi	r5,r5,-8
    2024:	31b1d704 	addi	r6,r6,-14500
    2028:	28806526 	beq	r5,r2,21c0 <_malloc_r+0x6d8>
    202c:	01bfff04 	movi	r6,-4
    2030:	10c00117 	ldw	r3,4(r2)
    2034:	1986703a 	and	r3,r3,r6
    2038:	38c0022e 	bgeu	r7,r3,2044 <_malloc_r+0x55c>
    203c:	10800217 	ldw	r2,8(r2)
    2040:	28bffb1e 	bne	r5,r2,2030 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002030>
    2044:	11400317 	ldw	r5,12(r2)
    2048:	98c00117 	ldw	r3,4(r19)
    204c:	81400315 	stw	r5,12(r16)
    2050:	80800215 	stw	r2,8(r16)
    2054:	2c000215 	stw	r16,8(r5)
    2058:	14000315 	stw	r16,12(r2)
    205c:	003ef806 	br	1c40 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001c40>
    2060:	88c00054 	ori	r3,r17,1
    2064:	80c00115 	stw	r3,4(r16)
    2068:	8463883a 	add	r17,r16,r17
    206c:	34400515 	stw	r17,20(r6)
    2070:	34400415 	stw	r17,16(r6)
    2074:	10c00054 	ori	r3,r2,1
    2078:	8a000315 	stw	r8,12(r17)
    207c:	8a000215 	stw	r8,8(r17)
    2080:	88c00115 	stw	r3,4(r17)
    2084:	88a3883a 	add	r17,r17,r2
    2088:	88800015 	stw	r2,0(r17)
    208c:	9009883a 	mov	r4,r18
    2090:	00044800 	call	4480 <__malloc_unlock>
    2094:	80800204 	addi	r2,r16,8
    2098:	003f3c06 	br	1d8c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d8c>
    209c:	30c00117 	ldw	r3,4(r6)
    20a0:	003ee706 	br	1c40 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001c40>
    20a4:	5ac00044 	addi	r11,r11,1
    20a8:	588000cc 	andi	r2,r11,3
    20ac:	31800204 	addi	r6,r6,8
    20b0:	103efd1e 	bne	r2,zero,1ca8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001ca8>
    20b4:	00002406 	br	2148 <_malloc_r+0x660>
    20b8:	14000317 	ldw	r16,12(r2)
    20bc:	143f251e 	bne	r2,r16,1d54 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d54>
    20c0:	21000084 	addi	r4,r4,2
    20c4:	003ebc06 	br	1bb8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001bb8>
    20c8:	8085883a 	add	r2,r16,r2
    20cc:	10c00117 	ldw	r3,4(r2)
    20d0:	81000317 	ldw	r4,12(r16)
    20d4:	81400217 	ldw	r5,8(r16)
    20d8:	18c00054 	ori	r3,r3,1
    20dc:	10c00115 	stw	r3,4(r2)
    20e0:	29000315 	stw	r4,12(r5)
    20e4:	21400215 	stw	r5,8(r4)
    20e8:	9009883a 	mov	r4,r18
    20ec:	00044800 	call	4480 <__malloc_unlock>
    20f0:	80800204 	addi	r2,r16,8
    20f4:	003f2506 	br	1d8c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d8c>
    20f8:	12001704 	addi	r8,r2,92
    20fc:	11c016c4 	addi	r7,r2,91
    2100:	4209883a 	add	r4,r8,r8
    2104:	003e9606 	br	1b60 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001b60>
    2108:	3804d1ba 	srli	r2,r7,6
    210c:	11400e44 	addi	r5,r2,57
    2110:	10c00e04 	addi	r3,r2,56
    2114:	294b883a 	add	r5,r5,r5
    2118:	003fbc06 	br	200c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000200c>
    211c:	84ff5926 	beq	r16,r19,1e84 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001e84>
    2120:	00800074 	movhi	r2,1
    2124:	10b1d704 	addi	r2,r2,-14500
    2128:	14000217 	ldw	r16,8(r2)
    212c:	00bfff04 	movi	r2,-4
    2130:	80c00117 	ldw	r3,4(r16)
    2134:	1886703a 	and	r3,r3,r2
    2138:	003f9106 	br	1f80 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001f80>
    213c:	60800217 	ldw	r2,8(r12)
    2140:	213fffc4 	addi	r4,r4,-1
    2144:	1300651e 	bne	r2,r12,22dc <_malloc_r+0x7f4>
    2148:	208000cc 	andi	r2,r4,3
    214c:	633ffe04 	addi	r12,r12,-8
    2150:	103ffa1e 	bne	r2,zero,213c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000213c>
    2154:	98800117 	ldw	r2,4(r19)
    2158:	0146303a 	nor	r3,zero,r5
    215c:	1884703a 	and	r2,r3,r2
    2160:	98800115 	stw	r2,4(r19)
    2164:	294b883a 	add	r5,r5,r5
    2168:	117f2836 	bltu	r2,r5,1e0c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001e0c>
    216c:	283f2726 	beq	r5,zero,1e0c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001e0c>
    2170:	2886703a 	and	r3,r5,r2
    2174:	5809883a 	mov	r4,r11
    2178:	183ec31e 	bne	r3,zero,1c88 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001c88>
    217c:	294b883a 	add	r5,r5,r5
    2180:	2886703a 	and	r3,r5,r2
    2184:	21000104 	addi	r4,r4,4
    2188:	183ffc26 	beq	r3,zero,217c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000217c>
    218c:	003ebe06 	br	1c88 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001c88>
    2190:	00c05504 	movi	r3,340
    2194:	18801236 	bltu	r3,r2,21e0 <_malloc_r+0x6f8>
    2198:	8804d3fa 	srli	r2,r17,15
    219c:	12001e04 	addi	r8,r2,120
    21a0:	11c01dc4 	addi	r7,r2,119
    21a4:	4209883a 	add	r4,r8,r8
    21a8:	003e6d06 	br	1b60 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001b60>
    21ac:	00c40004 	movi	r3,4096
    21b0:	003f4606 	br	1ecc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001ecc>
    21b4:	00800044 	movi	r2,1
    21b8:	a0800115 	stw	r2,4(r20)
    21bc:	003f7406 	br	1f90 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001f90>
    21c0:	1805d0ba 	srai	r2,r3,2
    21c4:	01c00044 	movi	r7,1
    21c8:	30c00117 	ldw	r3,4(r6)
    21cc:	388e983a 	sll	r7,r7,r2
    21d0:	2805883a 	mov	r2,r5
    21d4:	38c6b03a 	or	r3,r7,r3
    21d8:	30c00115 	stw	r3,4(r6)
    21dc:	003f9b06 	br	204c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000204c>
    21e0:	00c15504 	movi	r3,1364
    21e4:	18801a36 	bltu	r3,r2,2250 <_malloc_r+0x768>
    21e8:	8804d4ba 	srli	r2,r17,18
    21ec:	12001f44 	addi	r8,r2,125
    21f0:	11c01f04 	addi	r7,r2,124
    21f4:	4209883a 	add	r4,r8,r8
    21f8:	003e5906 	br	1b60 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001b60>
    21fc:	ad400404 	addi	r21,r21,16
    2200:	003f1706 	br	1e60 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001e60>
    2204:	00c01504 	movi	r3,84
    2208:	18802336 	bltu	r3,r2,2298 <_malloc_r+0x7b0>
    220c:	3804d33a 	srli	r2,r7,12
    2210:	11401bc4 	addi	r5,r2,111
    2214:	10c01b84 	addi	r3,r2,110
    2218:	294b883a 	add	r5,r5,r5
    221c:	003f7b06 	br	200c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000200c>
    2220:	9c000217 	ldw	r16,8(r19)
    2224:	00bfff04 	movi	r2,-4
    2228:	80c00117 	ldw	r3,4(r16)
    222c:	1886703a 	and	r3,r3,r2
    2230:	003f5306 	br	1f80 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001f80>
    2234:	3083ffcc 	andi	r2,r6,4095
    2238:	103f181e 	bne	r2,zero,1e9c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001e9c>
    223c:	99000217 	ldw	r4,8(r19)
    2240:	b545883a 	add	r2,r22,r21
    2244:	10800054 	ori	r2,r2,1
    2248:	20800115 	stw	r2,4(r4)
    224c:	003f3e06 	br	1f48 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001f48>
    2250:	01003f84 	movi	r4,254
    2254:	02001fc4 	movi	r8,127
    2258:	01c01f84 	movi	r7,126
    225c:	003e4006 	br	1b60 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001b60>
    2260:	00800074 	movhi	r2,1
    2264:	10b7f204 	addi	r2,r2,-8248
    2268:	15000015 	stw	r20,0(r2)
    226c:	003f1106 	br	1eb4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001eb4>
    2270:	00800044 	movi	r2,1
    2274:	002b883a 	mov	r21,zero
    2278:	003f1f06 	br	1ef8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001ef8>
    227c:	81400204 	addi	r5,r16,8
    2280:	9009883a 	mov	r4,r18
    2284:	00035700 	call	3570 <_free_r>
    2288:	00800074 	movhi	r2,1
    228c:	10bf3d04 	addi	r2,r2,-780
    2290:	10c00017 	ldw	r3,0(r2)
    2294:	003f2c06 	br	1f48 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001f48>
    2298:	00c05504 	movi	r3,340
    229c:	18800536 	bltu	r3,r2,22b4 <_malloc_r+0x7cc>
    22a0:	3804d3fa 	srli	r2,r7,15
    22a4:	11401e04 	addi	r5,r2,120
    22a8:	10c01dc4 	addi	r3,r2,119
    22ac:	294b883a 	add	r5,r5,r5
    22b0:	003f5606 	br	200c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000200c>
    22b4:	00c15504 	movi	r3,1364
    22b8:	18800536 	bltu	r3,r2,22d0 <_malloc_r+0x7e8>
    22bc:	3804d4ba 	srli	r2,r7,18
    22c0:	11401f44 	addi	r5,r2,125
    22c4:	10c01f04 	addi	r3,r2,124
    22c8:	294b883a 	add	r5,r5,r5
    22cc:	003f4f06 	br	200c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000200c>
    22d0:	01403f84 	movi	r5,254
    22d4:	00c01f84 	movi	r3,126
    22d8:	003f4c06 	br	200c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000200c>
    22dc:	98800117 	ldw	r2,4(r19)
    22e0:	003fa006 	br	2164 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002164>
    22e4:	8808d0fa 	srli	r4,r17,3
    22e8:	20800044 	addi	r2,r4,1
    22ec:	1085883a 	add	r2,r2,r2
    22f0:	003e9006 	br	1d34 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0001d34>

000022f4 <memchr>:
    22f4:	208000cc 	andi	r2,r4,3
    22f8:	280f883a 	mov	r7,r5
    22fc:	10003426 	beq	r2,zero,23d0 <memchr+0xdc>
    2300:	30bfffc4 	addi	r2,r6,-1
    2304:	30001a26 	beq	r6,zero,2370 <memchr+0x7c>
    2308:	20c00003 	ldbu	r3,0(r4)
    230c:	29803fcc 	andi	r6,r5,255
    2310:	30c0051e 	bne	r6,r3,2328 <memchr+0x34>
    2314:	00001806 	br	2378 <memchr+0x84>
    2318:	10001526 	beq	r2,zero,2370 <memchr+0x7c>
    231c:	20c00003 	ldbu	r3,0(r4)
    2320:	10bfffc4 	addi	r2,r2,-1
    2324:	30c01426 	beq	r6,r3,2378 <memchr+0x84>
    2328:	21000044 	addi	r4,r4,1
    232c:	20c000cc 	andi	r3,r4,3
    2330:	183ff91e 	bne	r3,zero,2318 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002318>
    2334:	020000c4 	movi	r8,3
    2338:	40801136 	bltu	r8,r2,2380 <memchr+0x8c>
    233c:	10000c26 	beq	r2,zero,2370 <memchr+0x7c>
    2340:	20c00003 	ldbu	r3,0(r4)
    2344:	29403fcc 	andi	r5,r5,255
    2348:	28c00b26 	beq	r5,r3,2378 <memchr+0x84>
    234c:	20c00044 	addi	r3,r4,1
    2350:	39803fcc 	andi	r6,r7,255
    2354:	2089883a 	add	r4,r4,r2
    2358:	00000306 	br	2368 <memchr+0x74>
    235c:	18c00044 	addi	r3,r3,1
    2360:	197fffc3 	ldbu	r5,-1(r3)
    2364:	31400526 	beq	r6,r5,237c <memchr+0x88>
    2368:	1805883a 	mov	r2,r3
    236c:	20fffb1e 	bne	r4,r3,235c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000235c>
    2370:	0005883a 	mov	r2,zero
    2374:	f800283a 	ret
    2378:	2005883a 	mov	r2,r4
    237c:	f800283a 	ret
    2380:	28c03fcc 	andi	r3,r5,255
    2384:	1812923a 	slli	r9,r3,8
    2388:	02ffbff4 	movhi	r11,65279
    238c:	02a02074 	movhi	r10,32897
    2390:	48d2b03a 	or	r9,r9,r3
    2394:	4806943a 	slli	r3,r9,16
    2398:	5affbfc4 	addi	r11,r11,-257
    239c:	52a02004 	addi	r10,r10,-32640
    23a0:	48d2b03a 	or	r9,r9,r3
    23a4:	20c00017 	ldw	r3,0(r4)
    23a8:	48c6f03a 	xor	r3,r9,r3
    23ac:	1acd883a 	add	r6,r3,r11
    23b0:	00c6303a 	nor	r3,zero,r3
    23b4:	30c6703a 	and	r3,r6,r3
    23b8:	1a86703a 	and	r3,r3,r10
    23bc:	183fe01e 	bne	r3,zero,2340 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002340>
    23c0:	10bfff04 	addi	r2,r2,-4
    23c4:	21000104 	addi	r4,r4,4
    23c8:	40bff636 	bltu	r8,r2,23a4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00023a4>
    23cc:	003fdb06 	br	233c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000233c>
    23d0:	3005883a 	mov	r2,r6
    23d4:	003fd706 	br	2334 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002334>

000023d8 <memcpy>:
    23d8:	defffd04 	addi	sp,sp,-12
    23dc:	dfc00215 	stw	ra,8(sp)
    23e0:	dc400115 	stw	r17,4(sp)
    23e4:	dc000015 	stw	r16,0(sp)
    23e8:	00c003c4 	movi	r3,15
    23ec:	2005883a 	mov	r2,r4
    23f0:	1980452e 	bgeu	r3,r6,2508 <memcpy+0x130>
    23f4:	2906b03a 	or	r3,r5,r4
    23f8:	18c000cc 	andi	r3,r3,3
    23fc:	1800441e 	bne	r3,zero,2510 <memcpy+0x138>
    2400:	347ffc04 	addi	r17,r6,-16
    2404:	8822d13a 	srli	r17,r17,4
    2408:	28c00104 	addi	r3,r5,4
    240c:	23400104 	addi	r13,r4,4
    2410:	8820913a 	slli	r16,r17,4
    2414:	2b000204 	addi	r12,r5,8
    2418:	22c00204 	addi	r11,r4,8
    241c:	84000504 	addi	r16,r16,20
    2420:	2a800304 	addi	r10,r5,12
    2424:	22400304 	addi	r9,r4,12
    2428:	2c21883a 	add	r16,r5,r16
    242c:	2811883a 	mov	r8,r5
    2430:	200f883a 	mov	r7,r4
    2434:	41000017 	ldw	r4,0(r8)
    2438:	1fc00017 	ldw	ra,0(r3)
    243c:	63c00017 	ldw	r15,0(r12)
    2440:	39000015 	stw	r4,0(r7)
    2444:	53800017 	ldw	r14,0(r10)
    2448:	6fc00015 	stw	ra,0(r13)
    244c:	5bc00015 	stw	r15,0(r11)
    2450:	4b800015 	stw	r14,0(r9)
    2454:	18c00404 	addi	r3,r3,16
    2458:	39c00404 	addi	r7,r7,16
    245c:	42000404 	addi	r8,r8,16
    2460:	6b400404 	addi	r13,r13,16
    2464:	63000404 	addi	r12,r12,16
    2468:	5ac00404 	addi	r11,r11,16
    246c:	52800404 	addi	r10,r10,16
    2470:	4a400404 	addi	r9,r9,16
    2474:	1c3fef1e 	bne	r3,r16,2434 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002434>
    2478:	89c00044 	addi	r7,r17,1
    247c:	380e913a 	slli	r7,r7,4
    2480:	310003cc 	andi	r4,r6,15
    2484:	02c000c4 	movi	r11,3
    2488:	11c7883a 	add	r3,r2,r7
    248c:	29cb883a 	add	r5,r5,r7
    2490:	5900212e 	bgeu	r11,r4,2518 <memcpy+0x140>
    2494:	1813883a 	mov	r9,r3
    2498:	2811883a 	mov	r8,r5
    249c:	200f883a 	mov	r7,r4
    24a0:	42800017 	ldw	r10,0(r8)
    24a4:	4a400104 	addi	r9,r9,4
    24a8:	39ffff04 	addi	r7,r7,-4
    24ac:	4abfff15 	stw	r10,-4(r9)
    24b0:	42000104 	addi	r8,r8,4
    24b4:	59fffa36 	bltu	r11,r7,24a0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00024a0>
    24b8:	213fff04 	addi	r4,r4,-4
    24bc:	2008d0ba 	srli	r4,r4,2
    24c0:	318000cc 	andi	r6,r6,3
    24c4:	21000044 	addi	r4,r4,1
    24c8:	2109883a 	add	r4,r4,r4
    24cc:	2109883a 	add	r4,r4,r4
    24d0:	1907883a 	add	r3,r3,r4
    24d4:	290b883a 	add	r5,r5,r4
    24d8:	30000626 	beq	r6,zero,24f4 <memcpy+0x11c>
    24dc:	198d883a 	add	r6,r3,r6
    24e0:	29c00003 	ldbu	r7,0(r5)
    24e4:	18c00044 	addi	r3,r3,1
    24e8:	29400044 	addi	r5,r5,1
    24ec:	19ffffc5 	stb	r7,-1(r3)
    24f0:	19bffb1e 	bne	r3,r6,24e0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00024e0>
    24f4:	dfc00217 	ldw	ra,8(sp)
    24f8:	dc400117 	ldw	r17,4(sp)
    24fc:	dc000017 	ldw	r16,0(sp)
    2500:	dec00304 	addi	sp,sp,12
    2504:	f800283a 	ret
    2508:	2007883a 	mov	r3,r4
    250c:	003ff206 	br	24d8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00024d8>
    2510:	2007883a 	mov	r3,r4
    2514:	003ff106 	br	24dc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00024dc>
    2518:	200d883a 	mov	r6,r4
    251c:	003fee06 	br	24d8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00024d8>

00002520 <memmove>:
    2520:	2005883a 	mov	r2,r4
    2524:	29000b2e 	bgeu	r5,r4,2554 <memmove+0x34>
    2528:	298f883a 	add	r7,r5,r6
    252c:	21c0092e 	bgeu	r4,r7,2554 <memmove+0x34>
    2530:	2187883a 	add	r3,r4,r6
    2534:	198bc83a 	sub	r5,r3,r6
    2538:	30004826 	beq	r6,zero,265c <memmove+0x13c>
    253c:	39ffffc4 	addi	r7,r7,-1
    2540:	39000003 	ldbu	r4,0(r7)
    2544:	18ffffc4 	addi	r3,r3,-1
    2548:	19000005 	stb	r4,0(r3)
    254c:	28fffb1e 	bne	r5,r3,253c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000253c>
    2550:	f800283a 	ret
    2554:	00c003c4 	movi	r3,15
    2558:	1980412e 	bgeu	r3,r6,2660 <memmove+0x140>
    255c:	2886b03a 	or	r3,r5,r2
    2560:	18c000cc 	andi	r3,r3,3
    2564:	1800401e 	bne	r3,zero,2668 <memmove+0x148>
    2568:	33fffc04 	addi	r15,r6,-16
    256c:	781ed13a 	srli	r15,r15,4
    2570:	28c00104 	addi	r3,r5,4
    2574:	13400104 	addi	r13,r2,4
    2578:	781c913a 	slli	r14,r15,4
    257c:	2b000204 	addi	r12,r5,8
    2580:	12c00204 	addi	r11,r2,8
    2584:	73800504 	addi	r14,r14,20
    2588:	2a800304 	addi	r10,r5,12
    258c:	12400304 	addi	r9,r2,12
    2590:	2b9d883a 	add	r14,r5,r14
    2594:	2811883a 	mov	r8,r5
    2598:	100f883a 	mov	r7,r2
    259c:	41000017 	ldw	r4,0(r8)
    25a0:	39c00404 	addi	r7,r7,16
    25a4:	18c00404 	addi	r3,r3,16
    25a8:	393ffc15 	stw	r4,-16(r7)
    25ac:	193ffc17 	ldw	r4,-16(r3)
    25b0:	6b400404 	addi	r13,r13,16
    25b4:	5ac00404 	addi	r11,r11,16
    25b8:	693ffc15 	stw	r4,-16(r13)
    25bc:	61000017 	ldw	r4,0(r12)
    25c0:	4a400404 	addi	r9,r9,16
    25c4:	42000404 	addi	r8,r8,16
    25c8:	593ffc15 	stw	r4,-16(r11)
    25cc:	51000017 	ldw	r4,0(r10)
    25d0:	63000404 	addi	r12,r12,16
    25d4:	52800404 	addi	r10,r10,16
    25d8:	493ffc15 	stw	r4,-16(r9)
    25dc:	1bbfef1e 	bne	r3,r14,259c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000259c>
    25e0:	79000044 	addi	r4,r15,1
    25e4:	2008913a 	slli	r4,r4,4
    25e8:	328003cc 	andi	r10,r6,15
    25ec:	02c000c4 	movi	r11,3
    25f0:	1107883a 	add	r3,r2,r4
    25f4:	290b883a 	add	r5,r5,r4
    25f8:	5a801e2e 	bgeu	r11,r10,2674 <memmove+0x154>
    25fc:	1813883a 	mov	r9,r3
    2600:	2811883a 	mov	r8,r5
    2604:	500f883a 	mov	r7,r10
    2608:	41000017 	ldw	r4,0(r8)
    260c:	4a400104 	addi	r9,r9,4
    2610:	39ffff04 	addi	r7,r7,-4
    2614:	493fff15 	stw	r4,-4(r9)
    2618:	42000104 	addi	r8,r8,4
    261c:	59fffa36 	bltu	r11,r7,2608 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002608>
    2620:	513fff04 	addi	r4,r10,-4
    2624:	2008d0ba 	srli	r4,r4,2
    2628:	318000cc 	andi	r6,r6,3
    262c:	21000044 	addi	r4,r4,1
    2630:	2109883a 	add	r4,r4,r4
    2634:	2109883a 	add	r4,r4,r4
    2638:	1907883a 	add	r3,r3,r4
    263c:	290b883a 	add	r5,r5,r4
    2640:	30000b26 	beq	r6,zero,2670 <memmove+0x150>
    2644:	198d883a 	add	r6,r3,r6
    2648:	29c00003 	ldbu	r7,0(r5)
    264c:	18c00044 	addi	r3,r3,1
    2650:	29400044 	addi	r5,r5,1
    2654:	19ffffc5 	stb	r7,-1(r3)
    2658:	19bffb1e 	bne	r3,r6,2648 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002648>
    265c:	f800283a 	ret
    2660:	1007883a 	mov	r3,r2
    2664:	003ff606 	br	2640 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002640>
    2668:	1007883a 	mov	r3,r2
    266c:	003ff506 	br	2644 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002644>
    2670:	f800283a 	ret
    2674:	500d883a 	mov	r6,r10
    2678:	003ff106 	br	2640 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002640>

0000267c <memset>:
    267c:	20c000cc 	andi	r3,r4,3
    2680:	2005883a 	mov	r2,r4
    2684:	18004426 	beq	r3,zero,2798 <memset+0x11c>
    2688:	31ffffc4 	addi	r7,r6,-1
    268c:	30004026 	beq	r6,zero,2790 <memset+0x114>
    2690:	2813883a 	mov	r9,r5
    2694:	200d883a 	mov	r6,r4
    2698:	2007883a 	mov	r3,r4
    269c:	00000406 	br	26b0 <memset+0x34>
    26a0:	3a3fffc4 	addi	r8,r7,-1
    26a4:	31800044 	addi	r6,r6,1
    26a8:	38003926 	beq	r7,zero,2790 <memset+0x114>
    26ac:	400f883a 	mov	r7,r8
    26b0:	18c00044 	addi	r3,r3,1
    26b4:	32400005 	stb	r9,0(r6)
    26b8:	1a0000cc 	andi	r8,r3,3
    26bc:	403ff81e 	bne	r8,zero,26a0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00026a0>
    26c0:	010000c4 	movi	r4,3
    26c4:	21c02d2e 	bgeu	r4,r7,277c <memset+0x100>
    26c8:	29003fcc 	andi	r4,r5,255
    26cc:	200c923a 	slli	r6,r4,8
    26d0:	3108b03a 	or	r4,r6,r4
    26d4:	200c943a 	slli	r6,r4,16
    26d8:	218cb03a 	or	r6,r4,r6
    26dc:	010003c4 	movi	r4,15
    26e0:	21c0182e 	bgeu	r4,r7,2744 <memset+0xc8>
    26e4:	3b3ffc04 	addi	r12,r7,-16
    26e8:	6018d13a 	srli	r12,r12,4
    26ec:	1a000104 	addi	r8,r3,4
    26f0:	1ac00204 	addi	r11,r3,8
    26f4:	6008913a 	slli	r4,r12,4
    26f8:	1a800304 	addi	r10,r3,12
    26fc:	1813883a 	mov	r9,r3
    2700:	21000504 	addi	r4,r4,20
    2704:	1909883a 	add	r4,r3,r4
    2708:	49800015 	stw	r6,0(r9)
    270c:	41800015 	stw	r6,0(r8)
    2710:	59800015 	stw	r6,0(r11)
    2714:	51800015 	stw	r6,0(r10)
    2718:	42000404 	addi	r8,r8,16
    271c:	4a400404 	addi	r9,r9,16
    2720:	5ac00404 	addi	r11,r11,16
    2724:	52800404 	addi	r10,r10,16
    2728:	413ff71e 	bne	r8,r4,2708 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002708>
    272c:	63000044 	addi	r12,r12,1
    2730:	6018913a 	slli	r12,r12,4
    2734:	39c003cc 	andi	r7,r7,15
    2738:	010000c4 	movi	r4,3
    273c:	1b07883a 	add	r3,r3,r12
    2740:	21c00e2e 	bgeu	r4,r7,277c <memset+0x100>
    2744:	1813883a 	mov	r9,r3
    2748:	3811883a 	mov	r8,r7
    274c:	010000c4 	movi	r4,3
    2750:	49800015 	stw	r6,0(r9)
    2754:	423fff04 	addi	r8,r8,-4
    2758:	4a400104 	addi	r9,r9,4
    275c:	223ffc36 	bltu	r4,r8,2750 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002750>
    2760:	393fff04 	addi	r4,r7,-4
    2764:	2008d0ba 	srli	r4,r4,2
    2768:	39c000cc 	andi	r7,r7,3
    276c:	21000044 	addi	r4,r4,1
    2770:	2109883a 	add	r4,r4,r4
    2774:	2109883a 	add	r4,r4,r4
    2778:	1907883a 	add	r3,r3,r4
    277c:	38000526 	beq	r7,zero,2794 <memset+0x118>
    2780:	19cf883a 	add	r7,r3,r7
    2784:	19400005 	stb	r5,0(r3)
    2788:	18c00044 	addi	r3,r3,1
    278c:	38fffd1e 	bne	r7,r3,2784 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002784>
    2790:	f800283a 	ret
    2794:	f800283a 	ret
    2798:	2007883a 	mov	r3,r4
    279c:	300f883a 	mov	r7,r6
    27a0:	003fc706 	br	26c0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00026c0>

000027a4 <_realloc_r>:
    27a4:	defff604 	addi	sp,sp,-40
    27a8:	dc800215 	stw	r18,8(sp)
    27ac:	dfc00915 	stw	ra,36(sp)
    27b0:	df000815 	stw	fp,32(sp)
    27b4:	ddc00715 	stw	r23,28(sp)
    27b8:	dd800615 	stw	r22,24(sp)
    27bc:	dd400515 	stw	r21,20(sp)
    27c0:	dd000415 	stw	r20,16(sp)
    27c4:	dcc00315 	stw	r19,12(sp)
    27c8:	dc400115 	stw	r17,4(sp)
    27cc:	dc000015 	stw	r16,0(sp)
    27d0:	3025883a 	mov	r18,r6
    27d4:	2800b726 	beq	r5,zero,2ab4 <_realloc_r+0x310>
    27d8:	282b883a 	mov	r21,r5
    27dc:	2029883a 	mov	r20,r4
    27e0:	000445c0 	call	445c <__malloc_lock>
    27e4:	a8bfff17 	ldw	r2,-4(r21)
    27e8:	043fff04 	movi	r16,-4
    27ec:	90c002c4 	addi	r3,r18,11
    27f0:	01000584 	movi	r4,22
    27f4:	acfffe04 	addi	r19,r21,-8
    27f8:	1420703a 	and	r16,r2,r16
    27fc:	20c0332e 	bgeu	r4,r3,28cc <_realloc_r+0x128>
    2800:	047ffe04 	movi	r17,-8
    2804:	1c62703a 	and	r17,r3,r17
    2808:	8807883a 	mov	r3,r17
    280c:	88005816 	blt	r17,zero,2970 <_realloc_r+0x1cc>
    2810:	8c805736 	bltu	r17,r18,2970 <_realloc_r+0x1cc>
    2814:	80c0300e 	bge	r16,r3,28d8 <_realloc_r+0x134>
    2818:	07000074 	movhi	fp,1
    281c:	e731d704 	addi	fp,fp,-14500
    2820:	e1c00217 	ldw	r7,8(fp)
    2824:	9c09883a 	add	r4,r19,r16
    2828:	22000117 	ldw	r8,4(r4)
    282c:	21c06326 	beq	r4,r7,29bc <_realloc_r+0x218>
    2830:	017fff84 	movi	r5,-2
    2834:	414a703a 	and	r5,r8,r5
    2838:	214b883a 	add	r5,r4,r5
    283c:	29800117 	ldw	r6,4(r5)
    2840:	3180004c 	andi	r6,r6,1
    2844:	30003f26 	beq	r6,zero,2944 <_realloc_r+0x1a0>
    2848:	1080004c 	andi	r2,r2,1
    284c:	10008326 	beq	r2,zero,2a5c <_realloc_r+0x2b8>
    2850:	900b883a 	mov	r5,r18
    2854:	a009883a 	mov	r4,r20
    2858:	0001ae80 	call	1ae8 <_malloc_r>
    285c:	1025883a 	mov	r18,r2
    2860:	10011e26 	beq	r2,zero,2cdc <_realloc_r+0x538>
    2864:	a93fff17 	ldw	r4,-4(r21)
    2868:	10fffe04 	addi	r3,r2,-8
    286c:	00bfff84 	movi	r2,-2
    2870:	2084703a 	and	r2,r4,r2
    2874:	9885883a 	add	r2,r19,r2
    2878:	1880ee26 	beq	r3,r2,2c34 <_realloc_r+0x490>
    287c:	81bfff04 	addi	r6,r16,-4
    2880:	00800904 	movi	r2,36
    2884:	1180b836 	bltu	r2,r6,2b68 <_realloc_r+0x3c4>
    2888:	00c004c4 	movi	r3,19
    288c:	19809636 	bltu	r3,r6,2ae8 <_realloc_r+0x344>
    2890:	9005883a 	mov	r2,r18
    2894:	a807883a 	mov	r3,r21
    2898:	19000017 	ldw	r4,0(r3)
    289c:	11000015 	stw	r4,0(r2)
    28a0:	19000117 	ldw	r4,4(r3)
    28a4:	11000115 	stw	r4,4(r2)
    28a8:	18c00217 	ldw	r3,8(r3)
    28ac:	10c00215 	stw	r3,8(r2)
    28b0:	a80b883a 	mov	r5,r21
    28b4:	a009883a 	mov	r4,r20
    28b8:	00035700 	call	3570 <_free_r>
    28bc:	a009883a 	mov	r4,r20
    28c0:	00044800 	call	4480 <__malloc_unlock>
    28c4:	9005883a 	mov	r2,r18
    28c8:	00001206 	br	2914 <_realloc_r+0x170>
    28cc:	00c00404 	movi	r3,16
    28d0:	1823883a 	mov	r17,r3
    28d4:	003fce06 	br	2810 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002810>
    28d8:	a825883a 	mov	r18,r21
    28dc:	8445c83a 	sub	r2,r16,r17
    28e0:	00c003c4 	movi	r3,15
    28e4:	18802636 	bltu	r3,r2,2980 <_realloc_r+0x1dc>
    28e8:	99800117 	ldw	r6,4(r19)
    28ec:	9c07883a 	add	r3,r19,r16
    28f0:	3180004c 	andi	r6,r6,1
    28f4:	3420b03a 	or	r16,r6,r16
    28f8:	9c000115 	stw	r16,4(r19)
    28fc:	18800117 	ldw	r2,4(r3)
    2900:	10800054 	ori	r2,r2,1
    2904:	18800115 	stw	r2,4(r3)
    2908:	a009883a 	mov	r4,r20
    290c:	00044800 	call	4480 <__malloc_unlock>
    2910:	9005883a 	mov	r2,r18
    2914:	dfc00917 	ldw	ra,36(sp)
    2918:	df000817 	ldw	fp,32(sp)
    291c:	ddc00717 	ldw	r23,28(sp)
    2920:	dd800617 	ldw	r22,24(sp)
    2924:	dd400517 	ldw	r21,20(sp)
    2928:	dd000417 	ldw	r20,16(sp)
    292c:	dcc00317 	ldw	r19,12(sp)
    2930:	dc800217 	ldw	r18,8(sp)
    2934:	dc400117 	ldw	r17,4(sp)
    2938:	dc000017 	ldw	r16,0(sp)
    293c:	dec00a04 	addi	sp,sp,40
    2940:	f800283a 	ret
    2944:	017fff04 	movi	r5,-4
    2948:	414a703a 	and	r5,r8,r5
    294c:	814d883a 	add	r6,r16,r5
    2950:	30c01f16 	blt	r6,r3,29d0 <_realloc_r+0x22c>
    2954:	20800317 	ldw	r2,12(r4)
    2958:	20c00217 	ldw	r3,8(r4)
    295c:	a825883a 	mov	r18,r21
    2960:	3021883a 	mov	r16,r6
    2964:	18800315 	stw	r2,12(r3)
    2968:	10c00215 	stw	r3,8(r2)
    296c:	003fdb06 	br	28dc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00028dc>
    2970:	00800304 	movi	r2,12
    2974:	a0800015 	stw	r2,0(r20)
    2978:	0005883a 	mov	r2,zero
    297c:	003fe506 	br	2914 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002914>
    2980:	98c00117 	ldw	r3,4(r19)
    2984:	9c4b883a 	add	r5,r19,r17
    2988:	11000054 	ori	r4,r2,1
    298c:	18c0004c 	andi	r3,r3,1
    2990:	1c62b03a 	or	r17,r3,r17
    2994:	9c400115 	stw	r17,4(r19)
    2998:	29000115 	stw	r4,4(r5)
    299c:	2885883a 	add	r2,r5,r2
    29a0:	10c00117 	ldw	r3,4(r2)
    29a4:	29400204 	addi	r5,r5,8
    29a8:	a009883a 	mov	r4,r20
    29ac:	18c00054 	ori	r3,r3,1
    29b0:	10c00115 	stw	r3,4(r2)
    29b4:	00035700 	call	3570 <_free_r>
    29b8:	003fd306 	br	2908 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002908>
    29bc:	017fff04 	movi	r5,-4
    29c0:	414a703a 	and	r5,r8,r5
    29c4:	89800404 	addi	r6,r17,16
    29c8:	8151883a 	add	r8,r16,r5
    29cc:	4180590e 	bge	r8,r6,2b34 <_realloc_r+0x390>
    29d0:	1080004c 	andi	r2,r2,1
    29d4:	103f9e1e 	bne	r2,zero,2850 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002850>
    29d8:	adbffe17 	ldw	r22,-8(r21)
    29dc:	00bfff04 	movi	r2,-4
    29e0:	9dadc83a 	sub	r22,r19,r22
    29e4:	b1800117 	ldw	r6,4(r22)
    29e8:	3084703a 	and	r2,r6,r2
    29ec:	20002026 	beq	r4,zero,2a70 <_realloc_r+0x2cc>
    29f0:	80af883a 	add	r23,r16,r2
    29f4:	b96f883a 	add	r23,r23,r5
    29f8:	21c05f26 	beq	r4,r7,2b78 <_realloc_r+0x3d4>
    29fc:	b8c01c16 	blt	r23,r3,2a70 <_realloc_r+0x2cc>
    2a00:	20800317 	ldw	r2,12(r4)
    2a04:	20c00217 	ldw	r3,8(r4)
    2a08:	81bfff04 	addi	r6,r16,-4
    2a0c:	01000904 	movi	r4,36
    2a10:	18800315 	stw	r2,12(r3)
    2a14:	10c00215 	stw	r3,8(r2)
    2a18:	b0c00217 	ldw	r3,8(r22)
    2a1c:	b0800317 	ldw	r2,12(r22)
    2a20:	b4800204 	addi	r18,r22,8
    2a24:	18800315 	stw	r2,12(r3)
    2a28:	10c00215 	stw	r3,8(r2)
    2a2c:	21801b36 	bltu	r4,r6,2a9c <_realloc_r+0x2f8>
    2a30:	008004c4 	movi	r2,19
    2a34:	1180352e 	bgeu	r2,r6,2b0c <_realloc_r+0x368>
    2a38:	a8800017 	ldw	r2,0(r21)
    2a3c:	b0800215 	stw	r2,8(r22)
    2a40:	a8800117 	ldw	r2,4(r21)
    2a44:	b0800315 	stw	r2,12(r22)
    2a48:	008006c4 	movi	r2,27
    2a4c:	11807f36 	bltu	r2,r6,2c4c <_realloc_r+0x4a8>
    2a50:	b0800404 	addi	r2,r22,16
    2a54:	ad400204 	addi	r21,r21,8
    2a58:	00002d06 	br	2b10 <_realloc_r+0x36c>
    2a5c:	adbffe17 	ldw	r22,-8(r21)
    2a60:	00bfff04 	movi	r2,-4
    2a64:	9dadc83a 	sub	r22,r19,r22
    2a68:	b1000117 	ldw	r4,4(r22)
    2a6c:	2084703a 	and	r2,r4,r2
    2a70:	b03f7726 	beq	r22,zero,2850 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002850>
    2a74:	80af883a 	add	r23,r16,r2
    2a78:	b8ff7516 	blt	r23,r3,2850 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002850>
    2a7c:	b0800317 	ldw	r2,12(r22)
    2a80:	b0c00217 	ldw	r3,8(r22)
    2a84:	81bfff04 	addi	r6,r16,-4
    2a88:	01000904 	movi	r4,36
    2a8c:	18800315 	stw	r2,12(r3)
    2a90:	10c00215 	stw	r3,8(r2)
    2a94:	b4800204 	addi	r18,r22,8
    2a98:	21bfe52e 	bgeu	r4,r6,2a30 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002a30>
    2a9c:	a80b883a 	mov	r5,r21
    2aa0:	9009883a 	mov	r4,r18
    2aa4:	00025200 	call	2520 <memmove>
    2aa8:	b821883a 	mov	r16,r23
    2aac:	b027883a 	mov	r19,r22
    2ab0:	003f8a06 	br	28dc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00028dc>
    2ab4:	300b883a 	mov	r5,r6
    2ab8:	dfc00917 	ldw	ra,36(sp)
    2abc:	df000817 	ldw	fp,32(sp)
    2ac0:	ddc00717 	ldw	r23,28(sp)
    2ac4:	dd800617 	ldw	r22,24(sp)
    2ac8:	dd400517 	ldw	r21,20(sp)
    2acc:	dd000417 	ldw	r20,16(sp)
    2ad0:	dcc00317 	ldw	r19,12(sp)
    2ad4:	dc800217 	ldw	r18,8(sp)
    2ad8:	dc400117 	ldw	r17,4(sp)
    2adc:	dc000017 	ldw	r16,0(sp)
    2ae0:	dec00a04 	addi	sp,sp,40
    2ae4:	0001ae81 	jmpi	1ae8 <_malloc_r>
    2ae8:	a8c00017 	ldw	r3,0(r21)
    2aec:	90c00015 	stw	r3,0(r18)
    2af0:	a8c00117 	ldw	r3,4(r21)
    2af4:	90c00115 	stw	r3,4(r18)
    2af8:	00c006c4 	movi	r3,27
    2afc:	19804536 	bltu	r3,r6,2c14 <_realloc_r+0x470>
    2b00:	90800204 	addi	r2,r18,8
    2b04:	a8c00204 	addi	r3,r21,8
    2b08:	003f6306 	br	2898 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002898>
    2b0c:	9005883a 	mov	r2,r18
    2b10:	a8c00017 	ldw	r3,0(r21)
    2b14:	b821883a 	mov	r16,r23
    2b18:	b027883a 	mov	r19,r22
    2b1c:	10c00015 	stw	r3,0(r2)
    2b20:	a8c00117 	ldw	r3,4(r21)
    2b24:	10c00115 	stw	r3,4(r2)
    2b28:	a8c00217 	ldw	r3,8(r21)
    2b2c:	10c00215 	stw	r3,8(r2)
    2b30:	003f6a06 	br	28dc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00028dc>
    2b34:	9c67883a 	add	r19,r19,r17
    2b38:	4445c83a 	sub	r2,r8,r17
    2b3c:	e4c00215 	stw	r19,8(fp)
    2b40:	10800054 	ori	r2,r2,1
    2b44:	98800115 	stw	r2,4(r19)
    2b48:	a8bfff17 	ldw	r2,-4(r21)
    2b4c:	a009883a 	mov	r4,r20
    2b50:	1080004c 	andi	r2,r2,1
    2b54:	1462b03a 	or	r17,r2,r17
    2b58:	ac7fff15 	stw	r17,-4(r21)
    2b5c:	00044800 	call	4480 <__malloc_unlock>
    2b60:	a805883a 	mov	r2,r21
    2b64:	003f6b06 	br	2914 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002914>
    2b68:	a80b883a 	mov	r5,r21
    2b6c:	9009883a 	mov	r4,r18
    2b70:	00025200 	call	2520 <memmove>
    2b74:	003f4e06 	br	28b0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00028b0>
    2b78:	89000404 	addi	r4,r17,16
    2b7c:	b93fbc16 	blt	r23,r4,2a70 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002a70>
    2b80:	b0800317 	ldw	r2,12(r22)
    2b84:	b0c00217 	ldw	r3,8(r22)
    2b88:	81bfff04 	addi	r6,r16,-4
    2b8c:	01000904 	movi	r4,36
    2b90:	18800315 	stw	r2,12(r3)
    2b94:	10c00215 	stw	r3,8(r2)
    2b98:	b4800204 	addi	r18,r22,8
    2b9c:	21804336 	bltu	r4,r6,2cac <_realloc_r+0x508>
    2ba0:	008004c4 	movi	r2,19
    2ba4:	11803f2e 	bgeu	r2,r6,2ca4 <_realloc_r+0x500>
    2ba8:	a8800017 	ldw	r2,0(r21)
    2bac:	b0800215 	stw	r2,8(r22)
    2bb0:	a8800117 	ldw	r2,4(r21)
    2bb4:	b0800315 	stw	r2,12(r22)
    2bb8:	008006c4 	movi	r2,27
    2bbc:	11803f36 	bltu	r2,r6,2cbc <_realloc_r+0x518>
    2bc0:	b0800404 	addi	r2,r22,16
    2bc4:	ad400204 	addi	r21,r21,8
    2bc8:	a8c00017 	ldw	r3,0(r21)
    2bcc:	10c00015 	stw	r3,0(r2)
    2bd0:	a8c00117 	ldw	r3,4(r21)
    2bd4:	10c00115 	stw	r3,4(r2)
    2bd8:	a8c00217 	ldw	r3,8(r21)
    2bdc:	10c00215 	stw	r3,8(r2)
    2be0:	b447883a 	add	r3,r22,r17
    2be4:	bc45c83a 	sub	r2,r23,r17
    2be8:	e0c00215 	stw	r3,8(fp)
    2bec:	10800054 	ori	r2,r2,1
    2bf0:	18800115 	stw	r2,4(r3)
    2bf4:	b0800117 	ldw	r2,4(r22)
    2bf8:	a009883a 	mov	r4,r20
    2bfc:	1080004c 	andi	r2,r2,1
    2c00:	1462b03a 	or	r17,r2,r17
    2c04:	b4400115 	stw	r17,4(r22)
    2c08:	00044800 	call	4480 <__malloc_unlock>
    2c0c:	9005883a 	mov	r2,r18
    2c10:	003f4006 	br	2914 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002914>
    2c14:	a8c00217 	ldw	r3,8(r21)
    2c18:	90c00215 	stw	r3,8(r18)
    2c1c:	a8c00317 	ldw	r3,12(r21)
    2c20:	90c00315 	stw	r3,12(r18)
    2c24:	30801126 	beq	r6,r2,2c6c <_realloc_r+0x4c8>
    2c28:	90800404 	addi	r2,r18,16
    2c2c:	a8c00404 	addi	r3,r21,16
    2c30:	003f1906 	br	2898 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002898>
    2c34:	90ffff17 	ldw	r3,-4(r18)
    2c38:	00bfff04 	movi	r2,-4
    2c3c:	a825883a 	mov	r18,r21
    2c40:	1884703a 	and	r2,r3,r2
    2c44:	80a1883a 	add	r16,r16,r2
    2c48:	003f2406 	br	28dc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00028dc>
    2c4c:	a8800217 	ldw	r2,8(r21)
    2c50:	b0800415 	stw	r2,16(r22)
    2c54:	a8800317 	ldw	r2,12(r21)
    2c58:	b0800515 	stw	r2,20(r22)
    2c5c:	31000a26 	beq	r6,r4,2c88 <_realloc_r+0x4e4>
    2c60:	b0800604 	addi	r2,r22,24
    2c64:	ad400404 	addi	r21,r21,16
    2c68:	003fa906 	br	2b10 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002b10>
    2c6c:	a9000417 	ldw	r4,16(r21)
    2c70:	90800604 	addi	r2,r18,24
    2c74:	a8c00604 	addi	r3,r21,24
    2c78:	91000415 	stw	r4,16(r18)
    2c7c:	a9000517 	ldw	r4,20(r21)
    2c80:	91000515 	stw	r4,20(r18)
    2c84:	003f0406 	br	2898 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002898>
    2c88:	a8c00417 	ldw	r3,16(r21)
    2c8c:	ad400604 	addi	r21,r21,24
    2c90:	b0800804 	addi	r2,r22,32
    2c94:	b0c00615 	stw	r3,24(r22)
    2c98:	a8ffff17 	ldw	r3,-4(r21)
    2c9c:	b0c00715 	stw	r3,28(r22)
    2ca0:	003f9b06 	br	2b10 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002b10>
    2ca4:	9005883a 	mov	r2,r18
    2ca8:	003fc706 	br	2bc8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002bc8>
    2cac:	a80b883a 	mov	r5,r21
    2cb0:	9009883a 	mov	r4,r18
    2cb4:	00025200 	call	2520 <memmove>
    2cb8:	003fc906 	br	2be0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002be0>
    2cbc:	a8800217 	ldw	r2,8(r21)
    2cc0:	b0800415 	stw	r2,16(r22)
    2cc4:	a8800317 	ldw	r2,12(r21)
    2cc8:	b0800515 	stw	r2,20(r22)
    2ccc:	31000726 	beq	r6,r4,2cec <_realloc_r+0x548>
    2cd0:	b0800604 	addi	r2,r22,24
    2cd4:	ad400404 	addi	r21,r21,16
    2cd8:	003fbb06 	br	2bc8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002bc8>
    2cdc:	a009883a 	mov	r4,r20
    2ce0:	00044800 	call	4480 <__malloc_unlock>
    2ce4:	0005883a 	mov	r2,zero
    2ce8:	003f0a06 	br	2914 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002914>
    2cec:	a8c00417 	ldw	r3,16(r21)
    2cf0:	ad400604 	addi	r21,r21,24
    2cf4:	b0800804 	addi	r2,r22,32
    2cf8:	b0c00615 	stw	r3,24(r22)
    2cfc:	a8ffff17 	ldw	r3,-4(r21)
    2d00:	b0c00715 	stw	r3,28(r22)
    2d04:	003fb006 	br	2bc8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002bc8>

00002d08 <_sbrk_r>:
    2d08:	defffd04 	addi	sp,sp,-12
    2d0c:	dc000015 	stw	r16,0(sp)
    2d10:	04000074 	movhi	r16,1
    2d14:	dc400115 	stw	r17,4(sp)
    2d18:	843f3504 	addi	r16,r16,-812
    2d1c:	2023883a 	mov	r17,r4
    2d20:	2809883a 	mov	r4,r5
    2d24:	dfc00215 	stw	ra,8(sp)
    2d28:	80000015 	stw	zero,0(r16)
    2d2c:	00046400 	call	4640 <sbrk>
    2d30:	00ffffc4 	movi	r3,-1
    2d34:	10c00526 	beq	r2,r3,2d4c <_sbrk_r+0x44>
    2d38:	dfc00217 	ldw	ra,8(sp)
    2d3c:	dc400117 	ldw	r17,4(sp)
    2d40:	dc000017 	ldw	r16,0(sp)
    2d44:	dec00304 	addi	sp,sp,12
    2d48:	f800283a 	ret
    2d4c:	80c00017 	ldw	r3,0(r16)
    2d50:	183ff926 	beq	r3,zero,2d38 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002d38>
    2d54:	88c00015 	stw	r3,0(r17)
    2d58:	003ff706 	br	2d38 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002d38>

00002d5c <__sread>:
    2d5c:	defffe04 	addi	sp,sp,-8
    2d60:	dc000015 	stw	r16,0(sp)
    2d64:	2821883a 	mov	r16,r5
    2d68:	2940038f 	ldh	r5,14(r5)
    2d6c:	dfc00115 	stw	ra,4(sp)
    2d70:	0003a9c0 	call	3a9c <_read_r>
    2d74:	10000716 	blt	r2,zero,2d94 <__sread+0x38>
    2d78:	80c01417 	ldw	r3,80(r16)
    2d7c:	1887883a 	add	r3,r3,r2
    2d80:	80c01415 	stw	r3,80(r16)
    2d84:	dfc00117 	ldw	ra,4(sp)
    2d88:	dc000017 	ldw	r16,0(sp)
    2d8c:	dec00204 	addi	sp,sp,8
    2d90:	f800283a 	ret
    2d94:	80c0030b 	ldhu	r3,12(r16)
    2d98:	18fbffcc 	andi	r3,r3,61439
    2d9c:	80c0030d 	sth	r3,12(r16)
    2da0:	dfc00117 	ldw	ra,4(sp)
    2da4:	dc000017 	ldw	r16,0(sp)
    2da8:	dec00204 	addi	sp,sp,8
    2dac:	f800283a 	ret

00002db0 <__seofread>:
    2db0:	0005883a 	mov	r2,zero
    2db4:	f800283a 	ret

00002db8 <__swrite>:
    2db8:	2880030b 	ldhu	r2,12(r5)
    2dbc:	defffb04 	addi	sp,sp,-20
    2dc0:	dcc00315 	stw	r19,12(sp)
    2dc4:	dc800215 	stw	r18,8(sp)
    2dc8:	dc400115 	stw	r17,4(sp)
    2dcc:	dc000015 	stw	r16,0(sp)
    2dd0:	dfc00415 	stw	ra,16(sp)
    2dd4:	10c0400c 	andi	r3,r2,256
    2dd8:	2821883a 	mov	r16,r5
    2ddc:	2023883a 	mov	r17,r4
    2de0:	3025883a 	mov	r18,r6
    2de4:	3827883a 	mov	r19,r7
    2de8:	18000526 	beq	r3,zero,2e00 <__swrite+0x48>
    2dec:	2940038f 	ldh	r5,14(r5)
    2df0:	01c00084 	movi	r7,2
    2df4:	000d883a 	mov	r6,zero
    2df8:	00038800 	call	3880 <_lseek_r>
    2dfc:	8080030b 	ldhu	r2,12(r16)
    2e00:	8140038f 	ldh	r5,14(r16)
    2e04:	10bbffcc 	andi	r2,r2,61439
    2e08:	980f883a 	mov	r7,r19
    2e0c:	900d883a 	mov	r6,r18
    2e10:	8809883a 	mov	r4,r17
    2e14:	8080030d 	sth	r2,12(r16)
    2e18:	dfc00417 	ldw	ra,16(sp)
    2e1c:	dcc00317 	ldw	r19,12(sp)
    2e20:	dc800217 	ldw	r18,8(sp)
    2e24:	dc400117 	ldw	r17,4(sp)
    2e28:	dc000017 	ldw	r16,0(sp)
    2e2c:	dec00504 	addi	sp,sp,20
    2e30:	0002e981 	jmpi	2e98 <_write_r>

00002e34 <__sseek>:
    2e34:	defffe04 	addi	sp,sp,-8
    2e38:	dc000015 	stw	r16,0(sp)
    2e3c:	2821883a 	mov	r16,r5
    2e40:	2940038f 	ldh	r5,14(r5)
    2e44:	dfc00115 	stw	ra,4(sp)
    2e48:	00038800 	call	3880 <_lseek_r>
    2e4c:	00ffffc4 	movi	r3,-1
    2e50:	10c00826 	beq	r2,r3,2e74 <__sseek+0x40>
    2e54:	80c0030b 	ldhu	r3,12(r16)
    2e58:	80801415 	stw	r2,80(r16)
    2e5c:	18c40014 	ori	r3,r3,4096
    2e60:	80c0030d 	sth	r3,12(r16)
    2e64:	dfc00117 	ldw	ra,4(sp)
    2e68:	dc000017 	ldw	r16,0(sp)
    2e6c:	dec00204 	addi	sp,sp,8
    2e70:	f800283a 	ret
    2e74:	80c0030b 	ldhu	r3,12(r16)
    2e78:	18fbffcc 	andi	r3,r3,61439
    2e7c:	80c0030d 	sth	r3,12(r16)
    2e80:	dfc00117 	ldw	ra,4(sp)
    2e84:	dc000017 	ldw	r16,0(sp)
    2e88:	dec00204 	addi	sp,sp,8
    2e8c:	f800283a 	ret

00002e90 <__sclose>:
    2e90:	2940038f 	ldh	r5,14(r5)
    2e94:	000304c1 	jmpi	304c <_close_r>

00002e98 <_write_r>:
    2e98:	defffd04 	addi	sp,sp,-12
    2e9c:	2805883a 	mov	r2,r5
    2ea0:	dc000015 	stw	r16,0(sp)
    2ea4:	04000074 	movhi	r16,1
    2ea8:	dc400115 	stw	r17,4(sp)
    2eac:	300b883a 	mov	r5,r6
    2eb0:	843f3504 	addi	r16,r16,-812
    2eb4:	2023883a 	mov	r17,r4
    2eb8:	380d883a 	mov	r6,r7
    2ebc:	1009883a 	mov	r4,r2
    2ec0:	dfc00215 	stw	ra,8(sp)
    2ec4:	80000015 	stw	zero,0(r16)
    2ec8:	000472c0 	call	472c <write>
    2ecc:	00ffffc4 	movi	r3,-1
    2ed0:	10c00526 	beq	r2,r3,2ee8 <_write_r+0x50>
    2ed4:	dfc00217 	ldw	ra,8(sp)
    2ed8:	dc400117 	ldw	r17,4(sp)
    2edc:	dc000017 	ldw	r16,0(sp)
    2ee0:	dec00304 	addi	sp,sp,12
    2ee4:	f800283a 	ret
    2ee8:	80c00017 	ldw	r3,0(r16)
    2eec:	183ff926 	beq	r3,zero,2ed4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002ed4>
    2ef0:	88c00015 	stw	r3,0(r17)
    2ef4:	003ff706 	br	2ed4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002ed4>

00002ef8 <__swsetup_r>:
    2ef8:	00800074 	movhi	r2,1
    2efc:	defffd04 	addi	sp,sp,-12
    2f00:	10b7f104 	addi	r2,r2,-8252
    2f04:	dc400115 	stw	r17,4(sp)
    2f08:	2023883a 	mov	r17,r4
    2f0c:	11000017 	ldw	r4,0(r2)
    2f10:	dc000015 	stw	r16,0(sp)
    2f14:	dfc00215 	stw	ra,8(sp)
    2f18:	2821883a 	mov	r16,r5
    2f1c:	20000226 	beq	r4,zero,2f28 <__swsetup_r+0x30>
    2f20:	20800e17 	ldw	r2,56(r4)
    2f24:	10003126 	beq	r2,zero,2fec <__swsetup_r+0xf4>
    2f28:	8080030b 	ldhu	r2,12(r16)
    2f2c:	10c0020c 	andi	r3,r2,8
    2f30:	1009883a 	mov	r4,r2
    2f34:	18000f26 	beq	r3,zero,2f74 <__swsetup_r+0x7c>
    2f38:	80c00417 	ldw	r3,16(r16)
    2f3c:	18001526 	beq	r3,zero,2f94 <__swsetup_r+0x9c>
    2f40:	1100004c 	andi	r4,r2,1
    2f44:	20001c1e 	bne	r4,zero,2fb8 <__swsetup_r+0xc0>
    2f48:	1080008c 	andi	r2,r2,2
    2f4c:	1000291e 	bne	r2,zero,2ff4 <__swsetup_r+0xfc>
    2f50:	80800517 	ldw	r2,20(r16)
    2f54:	80800215 	stw	r2,8(r16)
    2f58:	18001c26 	beq	r3,zero,2fcc <__swsetup_r+0xd4>
    2f5c:	0005883a 	mov	r2,zero
    2f60:	dfc00217 	ldw	ra,8(sp)
    2f64:	dc400117 	ldw	r17,4(sp)
    2f68:	dc000017 	ldw	r16,0(sp)
    2f6c:	dec00304 	addi	sp,sp,12
    2f70:	f800283a 	ret
    2f74:	2080040c 	andi	r2,r4,16
    2f78:	10002e26 	beq	r2,zero,3034 <__swsetup_r+0x13c>
    2f7c:	2080010c 	andi	r2,r4,4
    2f80:	10001e1e 	bne	r2,zero,2ffc <__swsetup_r+0x104>
    2f84:	80c00417 	ldw	r3,16(r16)
    2f88:	20800214 	ori	r2,r4,8
    2f8c:	8080030d 	sth	r2,12(r16)
    2f90:	183feb1e 	bne	r3,zero,2f40 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002f40>
    2f94:	1100a00c 	andi	r4,r2,640
    2f98:	01408004 	movi	r5,512
    2f9c:	217fe826 	beq	r4,r5,2f40 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002f40>
    2fa0:	800b883a 	mov	r5,r16
    2fa4:	8809883a 	mov	r4,r17
    2fa8:	00038e00 	call	38e0 <__smakebuf_r>
    2fac:	8080030b 	ldhu	r2,12(r16)
    2fb0:	80c00417 	ldw	r3,16(r16)
    2fb4:	003fe206 	br	2f40 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002f40>
    2fb8:	80800517 	ldw	r2,20(r16)
    2fbc:	80000215 	stw	zero,8(r16)
    2fc0:	0085c83a 	sub	r2,zero,r2
    2fc4:	80800615 	stw	r2,24(r16)
    2fc8:	183fe41e 	bne	r3,zero,2f5c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002f5c>
    2fcc:	80c0030b 	ldhu	r3,12(r16)
    2fd0:	0005883a 	mov	r2,zero
    2fd4:	1900200c 	andi	r4,r3,128
    2fd8:	203fe126 	beq	r4,zero,2f60 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002f60>
    2fdc:	18c01014 	ori	r3,r3,64
    2fe0:	80c0030d 	sth	r3,12(r16)
    2fe4:	00bfffc4 	movi	r2,-1
    2fe8:	003fdd06 	br	2f60 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002f60>
    2fec:	00014540 	call	1454 <__sinit>
    2ff0:	003fcd06 	br	2f28 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002f28>
    2ff4:	0005883a 	mov	r2,zero
    2ff8:	003fd606 	br	2f54 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002f54>
    2ffc:	81400c17 	ldw	r5,48(r16)
    3000:	28000626 	beq	r5,zero,301c <__swsetup_r+0x124>
    3004:	80801004 	addi	r2,r16,64
    3008:	28800326 	beq	r5,r2,3018 <__swsetup_r+0x120>
    300c:	8809883a 	mov	r4,r17
    3010:	00035700 	call	3570 <_free_r>
    3014:	8100030b 	ldhu	r4,12(r16)
    3018:	80000c15 	stw	zero,48(r16)
    301c:	80c00417 	ldw	r3,16(r16)
    3020:	00bff6c4 	movi	r2,-37
    3024:	1108703a 	and	r4,r2,r4
    3028:	80000115 	stw	zero,4(r16)
    302c:	80c00015 	stw	r3,0(r16)
    3030:	003fd506 	br	2f88 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002f88>
    3034:	00800244 	movi	r2,9
    3038:	88800015 	stw	r2,0(r17)
    303c:	20801014 	ori	r2,r4,64
    3040:	8080030d 	sth	r2,12(r16)
    3044:	00bfffc4 	movi	r2,-1
    3048:	003fc506 	br	2f60 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0002f60>

0000304c <_close_r>:
    304c:	defffd04 	addi	sp,sp,-12
    3050:	dc000015 	stw	r16,0(sp)
    3054:	04000074 	movhi	r16,1
    3058:	dc400115 	stw	r17,4(sp)
    305c:	843f3504 	addi	r16,r16,-812
    3060:	2023883a 	mov	r17,r4
    3064:	2809883a 	mov	r4,r5
    3068:	dfc00215 	stw	ra,8(sp)
    306c:	80000015 	stw	zero,0(r16)
    3070:	0003d9c0 	call	3d9c <close>
    3074:	00ffffc4 	movi	r3,-1
    3078:	10c00526 	beq	r2,r3,3090 <_close_r+0x44>
    307c:	dfc00217 	ldw	ra,8(sp)
    3080:	dc400117 	ldw	r17,4(sp)
    3084:	dc000017 	ldw	r16,0(sp)
    3088:	dec00304 	addi	sp,sp,12
    308c:	f800283a 	ret
    3090:	80c00017 	ldw	r3,0(r16)
    3094:	183ff926 	beq	r3,zero,307c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000307c>
    3098:	88c00015 	stw	r3,0(r17)
    309c:	003ff706 	br	307c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000307c>

000030a0 <_fclose_r>:
    30a0:	28003926 	beq	r5,zero,3188 <_fclose_r+0xe8>
    30a4:	defffc04 	addi	sp,sp,-16
    30a8:	dc400115 	stw	r17,4(sp)
    30ac:	dc000015 	stw	r16,0(sp)
    30b0:	dfc00315 	stw	ra,12(sp)
    30b4:	dc800215 	stw	r18,8(sp)
    30b8:	2023883a 	mov	r17,r4
    30bc:	2821883a 	mov	r16,r5
    30c0:	20000226 	beq	r4,zero,30cc <_fclose_r+0x2c>
    30c4:	20800e17 	ldw	r2,56(r4)
    30c8:	10002726 	beq	r2,zero,3168 <_fclose_r+0xc8>
    30cc:	8080030f 	ldh	r2,12(r16)
    30d0:	1000071e 	bne	r2,zero,30f0 <_fclose_r+0x50>
    30d4:	0005883a 	mov	r2,zero
    30d8:	dfc00317 	ldw	ra,12(sp)
    30dc:	dc800217 	ldw	r18,8(sp)
    30e0:	dc400117 	ldw	r17,4(sp)
    30e4:	dc000017 	ldw	r16,0(sp)
    30e8:	dec00404 	addi	sp,sp,16
    30ec:	f800283a 	ret
    30f0:	800b883a 	mov	r5,r16
    30f4:	8809883a 	mov	r4,r17
    30f8:	00031a40 	call	31a4 <__sflush_r>
    30fc:	1025883a 	mov	r18,r2
    3100:	80800b17 	ldw	r2,44(r16)
    3104:	10000426 	beq	r2,zero,3118 <_fclose_r+0x78>
    3108:	81400717 	ldw	r5,28(r16)
    310c:	8809883a 	mov	r4,r17
    3110:	103ee83a 	callr	r2
    3114:	10001616 	blt	r2,zero,3170 <_fclose_r+0xd0>
    3118:	8080030b 	ldhu	r2,12(r16)
    311c:	1080200c 	andi	r2,r2,128
    3120:	1000151e 	bne	r2,zero,3178 <_fclose_r+0xd8>
    3124:	81400c17 	ldw	r5,48(r16)
    3128:	28000526 	beq	r5,zero,3140 <_fclose_r+0xa0>
    312c:	80801004 	addi	r2,r16,64
    3130:	28800226 	beq	r5,r2,313c <_fclose_r+0x9c>
    3134:	8809883a 	mov	r4,r17
    3138:	00035700 	call	3570 <_free_r>
    313c:	80000c15 	stw	zero,48(r16)
    3140:	81401117 	ldw	r5,68(r16)
    3144:	28000326 	beq	r5,zero,3154 <_fclose_r+0xb4>
    3148:	8809883a 	mov	r4,r17
    314c:	00035700 	call	3570 <_free_r>
    3150:	80001115 	stw	zero,68(r16)
    3154:	00014640 	call	1464 <__sfp_lock_acquire>
    3158:	8000030d 	sth	zero,12(r16)
    315c:	00014680 	call	1468 <__sfp_lock_release>
    3160:	9005883a 	mov	r2,r18
    3164:	003fdc06 	br	30d8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00030d8>
    3168:	00014540 	call	1454 <__sinit>
    316c:	003fd706 	br	30cc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00030cc>
    3170:	04bfffc4 	movi	r18,-1
    3174:	003fe806 	br	3118 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003118>
    3178:	81400417 	ldw	r5,16(r16)
    317c:	8809883a 	mov	r4,r17
    3180:	00035700 	call	3570 <_free_r>
    3184:	003fe706 	br	3124 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003124>
    3188:	0005883a 	mov	r2,zero
    318c:	f800283a 	ret

00003190 <fclose>:
    3190:	00800074 	movhi	r2,1
    3194:	10b7f104 	addi	r2,r2,-8252
    3198:	200b883a 	mov	r5,r4
    319c:	11000017 	ldw	r4,0(r2)
    31a0:	00030a01 	jmpi	30a0 <_fclose_r>

000031a4 <__sflush_r>:
    31a4:	2880030b 	ldhu	r2,12(r5)
    31a8:	defffb04 	addi	sp,sp,-20
    31ac:	dcc00315 	stw	r19,12(sp)
    31b0:	dc400115 	stw	r17,4(sp)
    31b4:	dfc00415 	stw	ra,16(sp)
    31b8:	dc800215 	stw	r18,8(sp)
    31bc:	dc000015 	stw	r16,0(sp)
    31c0:	10c0020c 	andi	r3,r2,8
    31c4:	2823883a 	mov	r17,r5
    31c8:	2027883a 	mov	r19,r4
    31cc:	1800311e 	bne	r3,zero,3294 <__sflush_r+0xf0>
    31d0:	28c00117 	ldw	r3,4(r5)
    31d4:	10820014 	ori	r2,r2,2048
    31d8:	2880030d 	sth	r2,12(r5)
    31dc:	00c04b0e 	bge	zero,r3,330c <__sflush_r+0x168>
    31e0:	8a000a17 	ldw	r8,40(r17)
    31e4:	40002326 	beq	r8,zero,3274 <__sflush_r+0xd0>
    31e8:	9c000017 	ldw	r16,0(r19)
    31ec:	10c4000c 	andi	r3,r2,4096
    31f0:	98000015 	stw	zero,0(r19)
    31f4:	18004826 	beq	r3,zero,3318 <__sflush_r+0x174>
    31f8:	89801417 	ldw	r6,80(r17)
    31fc:	10c0010c 	andi	r3,r2,4
    3200:	18000626 	beq	r3,zero,321c <__sflush_r+0x78>
    3204:	88c00117 	ldw	r3,4(r17)
    3208:	88800c17 	ldw	r2,48(r17)
    320c:	30cdc83a 	sub	r6,r6,r3
    3210:	10000226 	beq	r2,zero,321c <__sflush_r+0x78>
    3214:	88800f17 	ldw	r2,60(r17)
    3218:	308dc83a 	sub	r6,r6,r2
    321c:	89400717 	ldw	r5,28(r17)
    3220:	000f883a 	mov	r7,zero
    3224:	9809883a 	mov	r4,r19
    3228:	403ee83a 	callr	r8
    322c:	00ffffc4 	movi	r3,-1
    3230:	10c04426 	beq	r2,r3,3344 <__sflush_r+0x1a0>
    3234:	88c0030b 	ldhu	r3,12(r17)
    3238:	89000417 	ldw	r4,16(r17)
    323c:	88000115 	stw	zero,4(r17)
    3240:	197dffcc 	andi	r5,r3,63487
    3244:	8940030d 	sth	r5,12(r17)
    3248:	89000015 	stw	r4,0(r17)
    324c:	18c4000c 	andi	r3,r3,4096
    3250:	18002c1e 	bne	r3,zero,3304 <__sflush_r+0x160>
    3254:	89400c17 	ldw	r5,48(r17)
    3258:	9c000015 	stw	r16,0(r19)
    325c:	28000526 	beq	r5,zero,3274 <__sflush_r+0xd0>
    3260:	88801004 	addi	r2,r17,64
    3264:	28800226 	beq	r5,r2,3270 <__sflush_r+0xcc>
    3268:	9809883a 	mov	r4,r19
    326c:	00035700 	call	3570 <_free_r>
    3270:	88000c15 	stw	zero,48(r17)
    3274:	0005883a 	mov	r2,zero
    3278:	dfc00417 	ldw	ra,16(sp)
    327c:	dcc00317 	ldw	r19,12(sp)
    3280:	dc800217 	ldw	r18,8(sp)
    3284:	dc400117 	ldw	r17,4(sp)
    3288:	dc000017 	ldw	r16,0(sp)
    328c:	dec00504 	addi	sp,sp,20
    3290:	f800283a 	ret
    3294:	2c800417 	ldw	r18,16(r5)
    3298:	903ff626 	beq	r18,zero,3274 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003274>
    329c:	2c000017 	ldw	r16,0(r5)
    32a0:	108000cc 	andi	r2,r2,3
    32a4:	2c800015 	stw	r18,0(r5)
    32a8:	84a1c83a 	sub	r16,r16,r18
    32ac:	1000131e 	bne	r2,zero,32fc <__sflush_r+0x158>
    32b0:	28800517 	ldw	r2,20(r5)
    32b4:	88800215 	stw	r2,8(r17)
    32b8:	04000316 	blt	zero,r16,32c8 <__sflush_r+0x124>
    32bc:	003fed06 	br	3274 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003274>
    32c0:	90a5883a 	add	r18,r18,r2
    32c4:	043feb0e 	bge	zero,r16,3274 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003274>
    32c8:	88800917 	ldw	r2,36(r17)
    32cc:	89400717 	ldw	r5,28(r17)
    32d0:	800f883a 	mov	r7,r16
    32d4:	900d883a 	mov	r6,r18
    32d8:	9809883a 	mov	r4,r19
    32dc:	103ee83a 	callr	r2
    32e0:	80a1c83a 	sub	r16,r16,r2
    32e4:	00bff616 	blt	zero,r2,32c0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00032c0>
    32e8:	88c0030b 	ldhu	r3,12(r17)
    32ec:	00bfffc4 	movi	r2,-1
    32f0:	18c01014 	ori	r3,r3,64
    32f4:	88c0030d 	sth	r3,12(r17)
    32f8:	003fdf06 	br	3278 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003278>
    32fc:	0005883a 	mov	r2,zero
    3300:	003fec06 	br	32b4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00032b4>
    3304:	88801415 	stw	r2,80(r17)
    3308:	003fd206 	br	3254 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003254>
    330c:	28c00f17 	ldw	r3,60(r5)
    3310:	00ffb316 	blt	zero,r3,31e0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00031e0>
    3314:	003fd706 	br	3274 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003274>
    3318:	89400717 	ldw	r5,28(r17)
    331c:	000d883a 	mov	r6,zero
    3320:	01c00044 	movi	r7,1
    3324:	9809883a 	mov	r4,r19
    3328:	403ee83a 	callr	r8
    332c:	100d883a 	mov	r6,r2
    3330:	00bfffc4 	movi	r2,-1
    3334:	30801426 	beq	r6,r2,3388 <__sflush_r+0x1e4>
    3338:	8880030b 	ldhu	r2,12(r17)
    333c:	8a000a17 	ldw	r8,40(r17)
    3340:	003fae06 	br	31fc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00031fc>
    3344:	98c00017 	ldw	r3,0(r19)
    3348:	183fba26 	beq	r3,zero,3234 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003234>
    334c:	01000744 	movi	r4,29
    3350:	19000626 	beq	r3,r4,336c <__sflush_r+0x1c8>
    3354:	01000584 	movi	r4,22
    3358:	19000426 	beq	r3,r4,336c <__sflush_r+0x1c8>
    335c:	88c0030b 	ldhu	r3,12(r17)
    3360:	18c01014 	ori	r3,r3,64
    3364:	88c0030d 	sth	r3,12(r17)
    3368:	003fc306 	br	3278 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003278>
    336c:	8880030b 	ldhu	r2,12(r17)
    3370:	88c00417 	ldw	r3,16(r17)
    3374:	88000115 	stw	zero,4(r17)
    3378:	10bdffcc 	andi	r2,r2,63487
    337c:	8880030d 	sth	r2,12(r17)
    3380:	88c00015 	stw	r3,0(r17)
    3384:	003fb306 	br	3254 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003254>
    3388:	98800017 	ldw	r2,0(r19)
    338c:	103fea26 	beq	r2,zero,3338 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003338>
    3390:	00c00744 	movi	r3,29
    3394:	10c00226 	beq	r2,r3,33a0 <__sflush_r+0x1fc>
    3398:	00c00584 	movi	r3,22
    339c:	10c0031e 	bne	r2,r3,33ac <__sflush_r+0x208>
    33a0:	9c000015 	stw	r16,0(r19)
    33a4:	0005883a 	mov	r2,zero
    33a8:	003fb306 	br	3278 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003278>
    33ac:	88c0030b 	ldhu	r3,12(r17)
    33b0:	3005883a 	mov	r2,r6
    33b4:	18c01014 	ori	r3,r3,64
    33b8:	88c0030d 	sth	r3,12(r17)
    33bc:	003fae06 	br	3278 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003278>

000033c0 <_fflush_r>:
    33c0:	defffd04 	addi	sp,sp,-12
    33c4:	dc000115 	stw	r16,4(sp)
    33c8:	dfc00215 	stw	ra,8(sp)
    33cc:	2021883a 	mov	r16,r4
    33d0:	20000226 	beq	r4,zero,33dc <_fflush_r+0x1c>
    33d4:	20800e17 	ldw	r2,56(r4)
    33d8:	10000c26 	beq	r2,zero,340c <_fflush_r+0x4c>
    33dc:	2880030f 	ldh	r2,12(r5)
    33e0:	1000051e 	bne	r2,zero,33f8 <_fflush_r+0x38>
    33e4:	0005883a 	mov	r2,zero
    33e8:	dfc00217 	ldw	ra,8(sp)
    33ec:	dc000117 	ldw	r16,4(sp)
    33f0:	dec00304 	addi	sp,sp,12
    33f4:	f800283a 	ret
    33f8:	8009883a 	mov	r4,r16
    33fc:	dfc00217 	ldw	ra,8(sp)
    3400:	dc000117 	ldw	r16,4(sp)
    3404:	dec00304 	addi	sp,sp,12
    3408:	00031a41 	jmpi	31a4 <__sflush_r>
    340c:	d9400015 	stw	r5,0(sp)
    3410:	00014540 	call	1454 <__sinit>
    3414:	d9400017 	ldw	r5,0(sp)
    3418:	003ff006 	br	33dc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00033dc>

0000341c <fflush>:
    341c:	20000526 	beq	r4,zero,3434 <fflush+0x18>
    3420:	00800074 	movhi	r2,1
    3424:	10b7f104 	addi	r2,r2,-8252
    3428:	200b883a 	mov	r5,r4
    342c:	11000017 	ldw	r4,0(r2)
    3430:	00033c01 	jmpi	33c0 <_fflush_r>
    3434:	00800074 	movhi	r2,1
    3438:	10b7f004 	addi	r2,r2,-8256
    343c:	11000017 	ldw	r4,0(r2)
    3440:	01400034 	movhi	r5,0
    3444:	294cf004 	addi	r5,r5,13248
    3448:	0001a241 	jmpi	1a24 <_fwalk_reent>

0000344c <_malloc_trim_r>:
    344c:	defffb04 	addi	sp,sp,-20
    3450:	dcc00315 	stw	r19,12(sp)
    3454:	04c00074 	movhi	r19,1
    3458:	dc800215 	stw	r18,8(sp)
    345c:	dc400115 	stw	r17,4(sp)
    3460:	dc000015 	stw	r16,0(sp)
    3464:	dfc00415 	stw	ra,16(sp)
    3468:	2821883a 	mov	r16,r5
    346c:	9cf1d704 	addi	r19,r19,-14500
    3470:	2025883a 	mov	r18,r4
    3474:	000445c0 	call	445c <__malloc_lock>
    3478:	98800217 	ldw	r2,8(r19)
    347c:	14400117 	ldw	r17,4(r2)
    3480:	00bfff04 	movi	r2,-4
    3484:	88a2703a 	and	r17,r17,r2
    3488:	8c21c83a 	sub	r16,r17,r16
    348c:	8403fbc4 	addi	r16,r16,4079
    3490:	8020d33a 	srli	r16,r16,12
    3494:	0083ffc4 	movi	r2,4095
    3498:	843fffc4 	addi	r16,r16,-1
    349c:	8020933a 	slli	r16,r16,12
    34a0:	1400060e 	bge	r2,r16,34bc <_malloc_trim_r+0x70>
    34a4:	000b883a 	mov	r5,zero
    34a8:	9009883a 	mov	r4,r18
    34ac:	0002d080 	call	2d08 <_sbrk_r>
    34b0:	98c00217 	ldw	r3,8(r19)
    34b4:	1c47883a 	add	r3,r3,r17
    34b8:	10c00a26 	beq	r2,r3,34e4 <_malloc_trim_r+0x98>
    34bc:	9009883a 	mov	r4,r18
    34c0:	00044800 	call	4480 <__malloc_unlock>
    34c4:	0005883a 	mov	r2,zero
    34c8:	dfc00417 	ldw	ra,16(sp)
    34cc:	dcc00317 	ldw	r19,12(sp)
    34d0:	dc800217 	ldw	r18,8(sp)
    34d4:	dc400117 	ldw	r17,4(sp)
    34d8:	dc000017 	ldw	r16,0(sp)
    34dc:	dec00504 	addi	sp,sp,20
    34e0:	f800283a 	ret
    34e4:	040bc83a 	sub	r5,zero,r16
    34e8:	9009883a 	mov	r4,r18
    34ec:	0002d080 	call	2d08 <_sbrk_r>
    34f0:	00ffffc4 	movi	r3,-1
    34f4:	10c00d26 	beq	r2,r3,352c <_malloc_trim_r+0xe0>
    34f8:	00c00074 	movhi	r3,1
    34fc:	18ff3d04 	addi	r3,r3,-780
    3500:	18800017 	ldw	r2,0(r3)
    3504:	99000217 	ldw	r4,8(r19)
    3508:	8c23c83a 	sub	r17,r17,r16
    350c:	8c400054 	ori	r17,r17,1
    3510:	1421c83a 	sub	r16,r2,r16
    3514:	24400115 	stw	r17,4(r4)
    3518:	9009883a 	mov	r4,r18
    351c:	1c000015 	stw	r16,0(r3)
    3520:	00044800 	call	4480 <__malloc_unlock>
    3524:	00800044 	movi	r2,1
    3528:	003fe706 	br	34c8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00034c8>
    352c:	000b883a 	mov	r5,zero
    3530:	9009883a 	mov	r4,r18
    3534:	0002d080 	call	2d08 <_sbrk_r>
    3538:	99000217 	ldw	r4,8(r19)
    353c:	014003c4 	movi	r5,15
    3540:	1107c83a 	sub	r3,r2,r4
    3544:	28ffdd0e 	bge	r5,r3,34bc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00034bc>
    3548:	01400074 	movhi	r5,1
    354c:	2977f204 	addi	r5,r5,-8248
    3550:	29400017 	ldw	r5,0(r5)
    3554:	18c00054 	ori	r3,r3,1
    3558:	20c00115 	stw	r3,4(r4)
    355c:	00c00074 	movhi	r3,1
    3560:	1145c83a 	sub	r2,r2,r5
    3564:	18ff3d04 	addi	r3,r3,-780
    3568:	18800015 	stw	r2,0(r3)
    356c:	003fd306 	br	34bc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00034bc>

00003570 <_free_r>:
    3570:	28004126 	beq	r5,zero,3678 <_free_r+0x108>
    3574:	defffd04 	addi	sp,sp,-12
    3578:	dc400115 	stw	r17,4(sp)
    357c:	dc000015 	stw	r16,0(sp)
    3580:	2023883a 	mov	r17,r4
    3584:	2821883a 	mov	r16,r5
    3588:	dfc00215 	stw	ra,8(sp)
    358c:	000445c0 	call	445c <__malloc_lock>
    3590:	81ffff17 	ldw	r7,-4(r16)
    3594:	00bfff84 	movi	r2,-2
    3598:	01000074 	movhi	r4,1
    359c:	81bffe04 	addi	r6,r16,-8
    35a0:	3884703a 	and	r2,r7,r2
    35a4:	2131d704 	addi	r4,r4,-14500
    35a8:	308b883a 	add	r5,r6,r2
    35ac:	2a400117 	ldw	r9,4(r5)
    35b0:	22000217 	ldw	r8,8(r4)
    35b4:	00ffff04 	movi	r3,-4
    35b8:	48c6703a 	and	r3,r9,r3
    35bc:	2a005726 	beq	r5,r8,371c <_free_r+0x1ac>
    35c0:	28c00115 	stw	r3,4(r5)
    35c4:	39c0004c 	andi	r7,r7,1
    35c8:	3800091e 	bne	r7,zero,35f0 <_free_r+0x80>
    35cc:	823ffe17 	ldw	r8,-8(r16)
    35d0:	22400204 	addi	r9,r4,8
    35d4:	320dc83a 	sub	r6,r6,r8
    35d8:	31c00217 	ldw	r7,8(r6)
    35dc:	1205883a 	add	r2,r2,r8
    35e0:	3a406526 	beq	r7,r9,3778 <_free_r+0x208>
    35e4:	32000317 	ldw	r8,12(r6)
    35e8:	3a000315 	stw	r8,12(r7)
    35ec:	41c00215 	stw	r7,8(r8)
    35f0:	28cf883a 	add	r7,r5,r3
    35f4:	39c00117 	ldw	r7,4(r7)
    35f8:	39c0004c 	andi	r7,r7,1
    35fc:	38003a26 	beq	r7,zero,36e8 <_free_r+0x178>
    3600:	10c00054 	ori	r3,r2,1
    3604:	30c00115 	stw	r3,4(r6)
    3608:	3087883a 	add	r3,r6,r2
    360c:	18800015 	stw	r2,0(r3)
    3610:	00c07fc4 	movi	r3,511
    3614:	18801936 	bltu	r3,r2,367c <_free_r+0x10c>
    3618:	1004d0fa 	srli	r2,r2,3
    361c:	01c00044 	movi	r7,1
    3620:	21400117 	ldw	r5,4(r4)
    3624:	10c00044 	addi	r3,r2,1
    3628:	18c7883a 	add	r3,r3,r3
    362c:	1005d0ba 	srai	r2,r2,2
    3630:	18c7883a 	add	r3,r3,r3
    3634:	18c7883a 	add	r3,r3,r3
    3638:	1907883a 	add	r3,r3,r4
    363c:	3884983a 	sll	r2,r7,r2
    3640:	19c00017 	ldw	r7,0(r3)
    3644:	1a3ffe04 	addi	r8,r3,-8
    3648:	1144b03a 	or	r2,r2,r5
    364c:	32000315 	stw	r8,12(r6)
    3650:	31c00215 	stw	r7,8(r6)
    3654:	20800115 	stw	r2,4(r4)
    3658:	19800015 	stw	r6,0(r3)
    365c:	39800315 	stw	r6,12(r7)
    3660:	8809883a 	mov	r4,r17
    3664:	dfc00217 	ldw	ra,8(sp)
    3668:	dc400117 	ldw	r17,4(sp)
    366c:	dc000017 	ldw	r16,0(sp)
    3670:	dec00304 	addi	sp,sp,12
    3674:	00044801 	jmpi	4480 <__malloc_unlock>
    3678:	f800283a 	ret
    367c:	100ad27a 	srli	r5,r2,9
    3680:	00c00104 	movi	r3,4
    3684:	19404a36 	bltu	r3,r5,37b0 <_free_r+0x240>
    3688:	100ad1ba 	srli	r5,r2,6
    368c:	28c00e44 	addi	r3,r5,57
    3690:	18c7883a 	add	r3,r3,r3
    3694:	29400e04 	addi	r5,r5,56
    3698:	18c7883a 	add	r3,r3,r3
    369c:	18c7883a 	add	r3,r3,r3
    36a0:	1909883a 	add	r4,r3,r4
    36a4:	20c00017 	ldw	r3,0(r4)
    36a8:	01c00074 	movhi	r7,1
    36ac:	213ffe04 	addi	r4,r4,-8
    36b0:	39f1d704 	addi	r7,r7,-14500
    36b4:	20c04426 	beq	r4,r3,37c8 <_free_r+0x258>
    36b8:	01ffff04 	movi	r7,-4
    36bc:	19400117 	ldw	r5,4(r3)
    36c0:	29ca703a 	and	r5,r5,r7
    36c4:	1140022e 	bgeu	r2,r5,36d0 <_free_r+0x160>
    36c8:	18c00217 	ldw	r3,8(r3)
    36cc:	20fffb1e 	bne	r4,r3,36bc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00036bc>
    36d0:	19000317 	ldw	r4,12(r3)
    36d4:	31000315 	stw	r4,12(r6)
    36d8:	30c00215 	stw	r3,8(r6)
    36dc:	21800215 	stw	r6,8(r4)
    36e0:	19800315 	stw	r6,12(r3)
    36e4:	003fde06 	br	3660 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003660>
    36e8:	29c00217 	ldw	r7,8(r5)
    36ec:	10c5883a 	add	r2,r2,r3
    36f0:	00c00074 	movhi	r3,1
    36f4:	18f1d904 	addi	r3,r3,-14492
    36f8:	38c03b26 	beq	r7,r3,37e8 <_free_r+0x278>
    36fc:	2a000317 	ldw	r8,12(r5)
    3700:	11400054 	ori	r5,r2,1
    3704:	3087883a 	add	r3,r6,r2
    3708:	3a000315 	stw	r8,12(r7)
    370c:	41c00215 	stw	r7,8(r8)
    3710:	31400115 	stw	r5,4(r6)
    3714:	18800015 	stw	r2,0(r3)
    3718:	003fbd06 	br	3610 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003610>
    371c:	39c0004c 	andi	r7,r7,1
    3720:	10c5883a 	add	r2,r2,r3
    3724:	3800071e 	bne	r7,zero,3744 <_free_r+0x1d4>
    3728:	81fffe17 	ldw	r7,-8(r16)
    372c:	31cdc83a 	sub	r6,r6,r7
    3730:	30c00317 	ldw	r3,12(r6)
    3734:	31400217 	ldw	r5,8(r6)
    3738:	11c5883a 	add	r2,r2,r7
    373c:	28c00315 	stw	r3,12(r5)
    3740:	19400215 	stw	r5,8(r3)
    3744:	10c00054 	ori	r3,r2,1
    3748:	30c00115 	stw	r3,4(r6)
    374c:	00c00074 	movhi	r3,1
    3750:	18f7f304 	addi	r3,r3,-8244
    3754:	18c00017 	ldw	r3,0(r3)
    3758:	21800215 	stw	r6,8(r4)
    375c:	10ffc036 	bltu	r2,r3,3660 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003660>
    3760:	00800074 	movhi	r2,1
    3764:	10bf3404 	addi	r2,r2,-816
    3768:	11400017 	ldw	r5,0(r2)
    376c:	8809883a 	mov	r4,r17
    3770:	000344c0 	call	344c <_malloc_trim_r>
    3774:	003fba06 	br	3660 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003660>
    3778:	28c9883a 	add	r4,r5,r3
    377c:	21000117 	ldw	r4,4(r4)
    3780:	2100004c 	andi	r4,r4,1
    3784:	2000391e 	bne	r4,zero,386c <_free_r+0x2fc>
    3788:	29c00217 	ldw	r7,8(r5)
    378c:	29000317 	ldw	r4,12(r5)
    3790:	1885883a 	add	r2,r3,r2
    3794:	10c00054 	ori	r3,r2,1
    3798:	39000315 	stw	r4,12(r7)
    379c:	21c00215 	stw	r7,8(r4)
    37a0:	30c00115 	stw	r3,4(r6)
    37a4:	308d883a 	add	r6,r6,r2
    37a8:	30800015 	stw	r2,0(r6)
    37ac:	003fac06 	br	3660 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003660>
    37b0:	00c00504 	movi	r3,20
    37b4:	19401536 	bltu	r3,r5,380c <_free_r+0x29c>
    37b8:	28c01704 	addi	r3,r5,92
    37bc:	18c7883a 	add	r3,r3,r3
    37c0:	294016c4 	addi	r5,r5,91
    37c4:	003fb406 	br	3698 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003698>
    37c8:	280bd0ba 	srai	r5,r5,2
    37cc:	00c00044 	movi	r3,1
    37d0:	38800117 	ldw	r2,4(r7)
    37d4:	194a983a 	sll	r5,r3,r5
    37d8:	2007883a 	mov	r3,r4
    37dc:	2884b03a 	or	r2,r5,r2
    37e0:	38800115 	stw	r2,4(r7)
    37e4:	003fbb06 	br	36d4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00036d4>
    37e8:	21800515 	stw	r6,20(r4)
    37ec:	21800415 	stw	r6,16(r4)
    37f0:	10c00054 	ori	r3,r2,1
    37f4:	31c00315 	stw	r7,12(r6)
    37f8:	31c00215 	stw	r7,8(r6)
    37fc:	30c00115 	stw	r3,4(r6)
    3800:	308d883a 	add	r6,r6,r2
    3804:	30800015 	stw	r2,0(r6)
    3808:	003f9506 	br	3660 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003660>
    380c:	00c01504 	movi	r3,84
    3810:	19400536 	bltu	r3,r5,3828 <_free_r+0x2b8>
    3814:	100ad33a 	srli	r5,r2,12
    3818:	28c01bc4 	addi	r3,r5,111
    381c:	18c7883a 	add	r3,r3,r3
    3820:	29401b84 	addi	r5,r5,110
    3824:	003f9c06 	br	3698 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003698>
    3828:	00c05504 	movi	r3,340
    382c:	19400536 	bltu	r3,r5,3844 <_free_r+0x2d4>
    3830:	100ad3fa 	srli	r5,r2,15
    3834:	28c01e04 	addi	r3,r5,120
    3838:	18c7883a 	add	r3,r3,r3
    383c:	29401dc4 	addi	r5,r5,119
    3840:	003f9506 	br	3698 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003698>
    3844:	00c15504 	movi	r3,1364
    3848:	19400536 	bltu	r3,r5,3860 <_free_r+0x2f0>
    384c:	100ad4ba 	srli	r5,r2,18
    3850:	28c01f44 	addi	r3,r5,125
    3854:	18c7883a 	add	r3,r3,r3
    3858:	29401f04 	addi	r5,r5,124
    385c:	003f8e06 	br	3698 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003698>
    3860:	00c03f84 	movi	r3,254
    3864:	01401f84 	movi	r5,126
    3868:	003f8b06 	br	3698 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003698>
    386c:	10c00054 	ori	r3,r2,1
    3870:	30c00115 	stw	r3,4(r6)
    3874:	308d883a 	add	r6,r6,r2
    3878:	30800015 	stw	r2,0(r6)
    387c:	003f7806 	br	3660 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003660>

00003880 <_lseek_r>:
    3880:	defffd04 	addi	sp,sp,-12
    3884:	2805883a 	mov	r2,r5
    3888:	dc000015 	stw	r16,0(sp)
    388c:	04000074 	movhi	r16,1
    3890:	dc400115 	stw	r17,4(sp)
    3894:	300b883a 	mov	r5,r6
    3898:	843f3504 	addi	r16,r16,-812
    389c:	2023883a 	mov	r17,r4
    38a0:	380d883a 	mov	r6,r7
    38a4:	1009883a 	mov	r4,r2
    38a8:	dfc00215 	stw	ra,8(sp)
    38ac:	80000015 	stw	zero,0(r16)
    38b0:	000430c0 	call	430c <lseek>
    38b4:	00ffffc4 	movi	r3,-1
    38b8:	10c00526 	beq	r2,r3,38d0 <_lseek_r+0x50>
    38bc:	dfc00217 	ldw	ra,8(sp)
    38c0:	dc400117 	ldw	r17,4(sp)
    38c4:	dc000017 	ldw	r16,0(sp)
    38c8:	dec00304 	addi	sp,sp,12
    38cc:	f800283a 	ret
    38d0:	80c00017 	ldw	r3,0(r16)
    38d4:	183ff926 	beq	r3,zero,38bc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00038bc>
    38d8:	88c00015 	stw	r3,0(r17)
    38dc:	003ff706 	br	38bc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00038bc>

000038e0 <__smakebuf_r>:
    38e0:	2880030b 	ldhu	r2,12(r5)
    38e4:	10c0008c 	andi	r3,r2,2
    38e8:	1800411e 	bne	r3,zero,39f0 <__smakebuf_r+0x110>
    38ec:	deffec04 	addi	sp,sp,-80
    38f0:	dc000f15 	stw	r16,60(sp)
    38f4:	2821883a 	mov	r16,r5
    38f8:	2940038f 	ldh	r5,14(r5)
    38fc:	dc401015 	stw	r17,64(sp)
    3900:	dfc01315 	stw	ra,76(sp)
    3904:	dcc01215 	stw	r19,72(sp)
    3908:	dc801115 	stw	r18,68(sp)
    390c:	2023883a 	mov	r17,r4
    3910:	28001c16 	blt	r5,zero,3984 <__smakebuf_r+0xa4>
    3914:	d80d883a 	mov	r6,sp
    3918:	0003afc0 	call	3afc <_fstat_r>
    391c:	10001816 	blt	r2,zero,3980 <__smakebuf_r+0xa0>
    3920:	d8800117 	ldw	r2,4(sp)
    3924:	00e00014 	movui	r3,32768
    3928:	10bc000c 	andi	r2,r2,61440
    392c:	14c80020 	cmpeqi	r19,r2,8192
    3930:	10c03726 	beq	r2,r3,3a10 <__smakebuf_r+0x130>
    3934:	80c0030b 	ldhu	r3,12(r16)
    3938:	18c20014 	ori	r3,r3,2048
    393c:	80c0030d 	sth	r3,12(r16)
    3940:	00c80004 	movi	r3,8192
    3944:	10c0521e 	bne	r2,r3,3a90 <__smakebuf_r+0x1b0>
    3948:	8140038f 	ldh	r5,14(r16)
    394c:	8809883a 	mov	r4,r17
    3950:	0003b580 	call	3b58 <_isatty_r>
    3954:	10004c26 	beq	r2,zero,3a88 <__smakebuf_r+0x1a8>
    3958:	8080030b 	ldhu	r2,12(r16)
    395c:	80c010c4 	addi	r3,r16,67
    3960:	80c00015 	stw	r3,0(r16)
    3964:	10800054 	ori	r2,r2,1
    3968:	8080030d 	sth	r2,12(r16)
    396c:	00800044 	movi	r2,1
    3970:	80c00415 	stw	r3,16(r16)
    3974:	80800515 	stw	r2,20(r16)
    3978:	04810004 	movi	r18,1024
    397c:	00000706 	br	399c <__smakebuf_r+0xbc>
    3980:	8080030b 	ldhu	r2,12(r16)
    3984:	10c0200c 	andi	r3,r2,128
    3988:	18001f1e 	bne	r3,zero,3a08 <__smakebuf_r+0x128>
    398c:	04810004 	movi	r18,1024
    3990:	10820014 	ori	r2,r2,2048
    3994:	8080030d 	sth	r2,12(r16)
    3998:	0027883a 	mov	r19,zero
    399c:	900b883a 	mov	r5,r18
    39a0:	8809883a 	mov	r4,r17
    39a4:	0001ae80 	call	1ae8 <_malloc_r>
    39a8:	10002c26 	beq	r2,zero,3a5c <__smakebuf_r+0x17c>
    39ac:	80c0030b 	ldhu	r3,12(r16)
    39b0:	01000034 	movhi	r4,0
    39b4:	21044304 	addi	r4,r4,4364
    39b8:	89000f15 	stw	r4,60(r17)
    39bc:	18c02014 	ori	r3,r3,128
    39c0:	80c0030d 	sth	r3,12(r16)
    39c4:	80800015 	stw	r2,0(r16)
    39c8:	80800415 	stw	r2,16(r16)
    39cc:	84800515 	stw	r18,20(r16)
    39d0:	98001a1e 	bne	r19,zero,3a3c <__smakebuf_r+0x15c>
    39d4:	dfc01317 	ldw	ra,76(sp)
    39d8:	dcc01217 	ldw	r19,72(sp)
    39dc:	dc801117 	ldw	r18,68(sp)
    39e0:	dc401017 	ldw	r17,64(sp)
    39e4:	dc000f17 	ldw	r16,60(sp)
    39e8:	dec01404 	addi	sp,sp,80
    39ec:	f800283a 	ret
    39f0:	288010c4 	addi	r2,r5,67
    39f4:	28800015 	stw	r2,0(r5)
    39f8:	28800415 	stw	r2,16(r5)
    39fc:	00800044 	movi	r2,1
    3a00:	28800515 	stw	r2,20(r5)
    3a04:	f800283a 	ret
    3a08:	04801004 	movi	r18,64
    3a0c:	003fe006 	br	3990 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003990>
    3a10:	81000a17 	ldw	r4,40(r16)
    3a14:	00c00034 	movhi	r3,0
    3a18:	18cb8d04 	addi	r3,r3,11828
    3a1c:	20ffc51e 	bne	r4,r3,3934 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003934>
    3a20:	8080030b 	ldhu	r2,12(r16)
    3a24:	04810004 	movi	r18,1024
    3a28:	84801315 	stw	r18,76(r16)
    3a2c:	1484b03a 	or	r2,r2,r18
    3a30:	8080030d 	sth	r2,12(r16)
    3a34:	0027883a 	mov	r19,zero
    3a38:	003fd806 	br	399c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000399c>
    3a3c:	8140038f 	ldh	r5,14(r16)
    3a40:	8809883a 	mov	r4,r17
    3a44:	0003b580 	call	3b58 <_isatty_r>
    3a48:	103fe226 	beq	r2,zero,39d4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00039d4>
    3a4c:	8080030b 	ldhu	r2,12(r16)
    3a50:	10800054 	ori	r2,r2,1
    3a54:	8080030d 	sth	r2,12(r16)
    3a58:	003fde06 	br	39d4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00039d4>
    3a5c:	8080030b 	ldhu	r2,12(r16)
    3a60:	10c0800c 	andi	r3,r2,512
    3a64:	183fdb1e 	bne	r3,zero,39d4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00039d4>
    3a68:	10800094 	ori	r2,r2,2
    3a6c:	80c010c4 	addi	r3,r16,67
    3a70:	8080030d 	sth	r2,12(r16)
    3a74:	00800044 	movi	r2,1
    3a78:	80c00015 	stw	r3,0(r16)
    3a7c:	80c00415 	stw	r3,16(r16)
    3a80:	80800515 	stw	r2,20(r16)
    3a84:	003fd306 	br	39d4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00039d4>
    3a88:	04810004 	movi	r18,1024
    3a8c:	003fc306 	br	399c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000399c>
    3a90:	0027883a 	mov	r19,zero
    3a94:	04810004 	movi	r18,1024
    3a98:	003fc006 	br	399c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000399c>

00003a9c <_read_r>:
    3a9c:	defffd04 	addi	sp,sp,-12
    3aa0:	2805883a 	mov	r2,r5
    3aa4:	dc000015 	stw	r16,0(sp)
    3aa8:	04000074 	movhi	r16,1
    3aac:	dc400115 	stw	r17,4(sp)
    3ab0:	300b883a 	mov	r5,r6
    3ab4:	843f3504 	addi	r16,r16,-812
    3ab8:	2023883a 	mov	r17,r4
    3abc:	380d883a 	mov	r6,r7
    3ac0:	1009883a 	mov	r4,r2
    3ac4:	dfc00215 	stw	ra,8(sp)
    3ac8:	80000015 	stw	zero,0(r16)
    3acc:	00044e00 	call	44e0 <read>
    3ad0:	00ffffc4 	movi	r3,-1
    3ad4:	10c00526 	beq	r2,r3,3aec <_read_r+0x50>
    3ad8:	dfc00217 	ldw	ra,8(sp)
    3adc:	dc400117 	ldw	r17,4(sp)
    3ae0:	dc000017 	ldw	r16,0(sp)
    3ae4:	dec00304 	addi	sp,sp,12
    3ae8:	f800283a 	ret
    3aec:	80c00017 	ldw	r3,0(r16)
    3af0:	183ff926 	beq	r3,zero,3ad8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003ad8>
    3af4:	88c00015 	stw	r3,0(r17)
    3af8:	003ff706 	br	3ad8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003ad8>

00003afc <_fstat_r>:
    3afc:	defffd04 	addi	sp,sp,-12
    3b00:	2805883a 	mov	r2,r5
    3b04:	dc000015 	stw	r16,0(sp)
    3b08:	04000074 	movhi	r16,1
    3b0c:	dc400115 	stw	r17,4(sp)
    3b10:	843f3504 	addi	r16,r16,-812
    3b14:	2023883a 	mov	r17,r4
    3b18:	300b883a 	mov	r5,r6
    3b1c:	1009883a 	mov	r4,r2
    3b20:	dfc00215 	stw	ra,8(sp)
    3b24:	80000015 	stw	zero,0(r16)
    3b28:	0003ed40 	call	3ed4 <fstat>
    3b2c:	00ffffc4 	movi	r3,-1
    3b30:	10c00526 	beq	r2,r3,3b48 <_fstat_r+0x4c>
    3b34:	dfc00217 	ldw	ra,8(sp)
    3b38:	dc400117 	ldw	r17,4(sp)
    3b3c:	dc000017 	ldw	r16,0(sp)
    3b40:	dec00304 	addi	sp,sp,12
    3b44:	f800283a 	ret
    3b48:	80c00017 	ldw	r3,0(r16)
    3b4c:	183ff926 	beq	r3,zero,3b34 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003b34>
    3b50:	88c00015 	stw	r3,0(r17)
    3b54:	003ff706 	br	3b34 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003b34>

00003b58 <_isatty_r>:
    3b58:	defffd04 	addi	sp,sp,-12
    3b5c:	dc000015 	stw	r16,0(sp)
    3b60:	04000074 	movhi	r16,1
    3b64:	dc400115 	stw	r17,4(sp)
    3b68:	843f3504 	addi	r16,r16,-812
    3b6c:	2023883a 	mov	r17,r4
    3b70:	2809883a 	mov	r4,r5
    3b74:	dfc00215 	stw	ra,8(sp)
    3b78:	80000015 	stw	zero,0(r16)
    3b7c:	00041400 	call	4140 <isatty>
    3b80:	00ffffc4 	movi	r3,-1
    3b84:	10c00526 	beq	r2,r3,3b9c <_isatty_r+0x44>
    3b88:	dfc00217 	ldw	ra,8(sp)
    3b8c:	dc400117 	ldw	r17,4(sp)
    3b90:	dc000017 	ldw	r16,0(sp)
    3b94:	dec00304 	addi	sp,sp,12
    3b98:	f800283a 	ret
    3b9c:	80c00017 	ldw	r3,0(r16)
    3ba0:	183ff926 	beq	r3,zero,3b88 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003b88>
    3ba4:	88c00015 	stw	r3,0(r17)
    3ba8:	003ff706 	br	3b88 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003b88>

00003bac <__divsi3>:
    3bac:	20001b16 	blt	r4,zero,3c1c <__divsi3+0x70>
    3bb0:	000f883a 	mov	r7,zero
    3bb4:	28001616 	blt	r5,zero,3c10 <__divsi3+0x64>
    3bb8:	200d883a 	mov	r6,r4
    3bbc:	29001a2e 	bgeu	r5,r4,3c28 <__divsi3+0x7c>
    3bc0:	00800804 	movi	r2,32
    3bc4:	00c00044 	movi	r3,1
    3bc8:	00000106 	br	3bd0 <__divsi3+0x24>
    3bcc:	10000d26 	beq	r2,zero,3c04 <__divsi3+0x58>
    3bd0:	294b883a 	add	r5,r5,r5
    3bd4:	10bfffc4 	addi	r2,r2,-1
    3bd8:	18c7883a 	add	r3,r3,r3
    3bdc:	293ffb36 	bltu	r5,r4,3bcc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003bcc>
    3be0:	0005883a 	mov	r2,zero
    3be4:	18000726 	beq	r3,zero,3c04 <__divsi3+0x58>
    3be8:	0005883a 	mov	r2,zero
    3bec:	31400236 	bltu	r6,r5,3bf8 <__divsi3+0x4c>
    3bf0:	314dc83a 	sub	r6,r6,r5
    3bf4:	10c4b03a 	or	r2,r2,r3
    3bf8:	1806d07a 	srli	r3,r3,1
    3bfc:	280ad07a 	srli	r5,r5,1
    3c00:	183ffa1e 	bne	r3,zero,3bec <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003bec>
    3c04:	38000126 	beq	r7,zero,3c0c <__divsi3+0x60>
    3c08:	0085c83a 	sub	r2,zero,r2
    3c0c:	f800283a 	ret
    3c10:	014bc83a 	sub	r5,zero,r5
    3c14:	39c0005c 	xori	r7,r7,1
    3c18:	003fe706 	br	3bb8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003bb8>
    3c1c:	0109c83a 	sub	r4,zero,r4
    3c20:	01c00044 	movi	r7,1
    3c24:	003fe306 	br	3bb4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003bb4>
    3c28:	00c00044 	movi	r3,1
    3c2c:	003fee06 	br	3be8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003be8>

00003c30 <__modsi3>:
    3c30:	20001716 	blt	r4,zero,3c90 <__modsi3+0x60>
    3c34:	000f883a 	mov	r7,zero
    3c38:	2005883a 	mov	r2,r4
    3c3c:	28001216 	blt	r5,zero,3c88 <__modsi3+0x58>
    3c40:	2900162e 	bgeu	r5,r4,3c9c <__modsi3+0x6c>
    3c44:	01800804 	movi	r6,32
    3c48:	00c00044 	movi	r3,1
    3c4c:	00000106 	br	3c54 <__modsi3+0x24>
    3c50:	30000a26 	beq	r6,zero,3c7c <__modsi3+0x4c>
    3c54:	294b883a 	add	r5,r5,r5
    3c58:	31bfffc4 	addi	r6,r6,-1
    3c5c:	18c7883a 	add	r3,r3,r3
    3c60:	293ffb36 	bltu	r5,r4,3c50 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003c50>
    3c64:	18000526 	beq	r3,zero,3c7c <__modsi3+0x4c>
    3c68:	1806d07a 	srli	r3,r3,1
    3c6c:	11400136 	bltu	r2,r5,3c74 <__modsi3+0x44>
    3c70:	1145c83a 	sub	r2,r2,r5
    3c74:	280ad07a 	srli	r5,r5,1
    3c78:	183ffb1e 	bne	r3,zero,3c68 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003c68>
    3c7c:	38000126 	beq	r7,zero,3c84 <__modsi3+0x54>
    3c80:	0085c83a 	sub	r2,zero,r2
    3c84:	f800283a 	ret
    3c88:	014bc83a 	sub	r5,zero,r5
    3c8c:	003fec06 	br	3c40 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003c40>
    3c90:	0109c83a 	sub	r4,zero,r4
    3c94:	01c00044 	movi	r7,1
    3c98:	003fe706 	br	3c38 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003c38>
    3c9c:	00c00044 	movi	r3,1
    3ca0:	003ff106 	br	3c68 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003c68>

00003ca4 <__udivsi3>:
    3ca4:	200d883a 	mov	r6,r4
    3ca8:	2900152e 	bgeu	r5,r4,3d00 <__udivsi3+0x5c>
    3cac:	28001416 	blt	r5,zero,3d00 <__udivsi3+0x5c>
    3cb0:	00800804 	movi	r2,32
    3cb4:	00c00044 	movi	r3,1
    3cb8:	00000206 	br	3cc4 <__udivsi3+0x20>
    3cbc:	10000e26 	beq	r2,zero,3cf8 <__udivsi3+0x54>
    3cc0:	28000516 	blt	r5,zero,3cd8 <__udivsi3+0x34>
    3cc4:	294b883a 	add	r5,r5,r5
    3cc8:	10bfffc4 	addi	r2,r2,-1
    3ccc:	18c7883a 	add	r3,r3,r3
    3cd0:	293ffa36 	bltu	r5,r4,3cbc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003cbc>
    3cd4:	18000826 	beq	r3,zero,3cf8 <__udivsi3+0x54>
    3cd8:	0005883a 	mov	r2,zero
    3cdc:	31400236 	bltu	r6,r5,3ce8 <__udivsi3+0x44>
    3ce0:	314dc83a 	sub	r6,r6,r5
    3ce4:	10c4b03a 	or	r2,r2,r3
    3ce8:	1806d07a 	srli	r3,r3,1
    3cec:	280ad07a 	srli	r5,r5,1
    3cf0:	183ffa1e 	bne	r3,zero,3cdc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003cdc>
    3cf4:	f800283a 	ret
    3cf8:	0005883a 	mov	r2,zero
    3cfc:	f800283a 	ret
    3d00:	00c00044 	movi	r3,1
    3d04:	003ff406 	br	3cd8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003cd8>

00003d08 <__umodsi3>:
    3d08:	2005883a 	mov	r2,r4
    3d0c:	2900122e 	bgeu	r5,r4,3d58 <__umodsi3+0x50>
    3d10:	28001116 	blt	r5,zero,3d58 <__umodsi3+0x50>
    3d14:	01800804 	movi	r6,32
    3d18:	00c00044 	movi	r3,1
    3d1c:	00000206 	br	3d28 <__umodsi3+0x20>
    3d20:	30000c26 	beq	r6,zero,3d54 <__umodsi3+0x4c>
    3d24:	28000516 	blt	r5,zero,3d3c <__umodsi3+0x34>
    3d28:	294b883a 	add	r5,r5,r5
    3d2c:	31bfffc4 	addi	r6,r6,-1
    3d30:	18c7883a 	add	r3,r3,r3
    3d34:	293ffa36 	bltu	r5,r4,3d20 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003d20>
    3d38:	18000626 	beq	r3,zero,3d54 <__umodsi3+0x4c>
    3d3c:	1806d07a 	srli	r3,r3,1
    3d40:	11400136 	bltu	r2,r5,3d48 <__umodsi3+0x40>
    3d44:	1145c83a 	sub	r2,r2,r5
    3d48:	280ad07a 	srli	r5,r5,1
    3d4c:	183ffb1e 	bne	r3,zero,3d3c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003d3c>
    3d50:	f800283a 	ret
    3d54:	f800283a 	ret
    3d58:	00c00044 	movi	r3,1
    3d5c:	003ff706 	br	3d3c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0003d3c>

00003d60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3d60:	defffe04 	addi	sp,sp,-8
    3d64:	dfc00115 	stw	ra,4(sp)
    3d68:	df000015 	stw	fp,0(sp)
    3d6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3d70:	d0a01117 	ldw	r2,-32700(gp)
    3d74:	10000326 	beq	r2,zero,3d84 <alt_get_errno+0x24>
    3d78:	d0a01117 	ldw	r2,-32700(gp)
    3d7c:	103ee83a 	callr	r2
    3d80:	00000106 	br	3d88 <alt_get_errno+0x28>
    3d84:	d0a74d04 	addi	r2,gp,-25292
}
    3d88:	e037883a 	mov	sp,fp
    3d8c:	dfc00117 	ldw	ra,4(sp)
    3d90:	df000017 	ldw	fp,0(sp)
    3d94:	dec00204 	addi	sp,sp,8
    3d98:	f800283a 	ret

00003d9c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    3d9c:	defffb04 	addi	sp,sp,-20
    3da0:	dfc00415 	stw	ra,16(sp)
    3da4:	df000315 	stw	fp,12(sp)
    3da8:	df000304 	addi	fp,sp,12
    3dac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    3db0:	e0bfff17 	ldw	r2,-4(fp)
    3db4:	10000616 	blt	r2,zero,3dd0 <close+0x34>
    3db8:	e0bfff17 	ldw	r2,-4(fp)
    3dbc:	10c00324 	muli	r3,r2,12
    3dc0:	00800074 	movhi	r2,1
    3dc4:	10b2e304 	addi	r2,r2,-13428
    3dc8:	1885883a 	add	r2,r3,r2
    3dcc:	00000106 	br	3dd4 <close+0x38>
    3dd0:	0005883a 	mov	r2,zero
    3dd4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    3dd8:	e0bffd17 	ldw	r2,-12(fp)
    3ddc:	10001926 	beq	r2,zero,3e44 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    3de0:	e0bffd17 	ldw	r2,-12(fp)
    3de4:	10800017 	ldw	r2,0(r2)
    3de8:	10800417 	ldw	r2,16(r2)
    3dec:	10000626 	beq	r2,zero,3e08 <close+0x6c>
    3df0:	e0bffd17 	ldw	r2,-12(fp)
    3df4:	10800017 	ldw	r2,0(r2)
    3df8:	10800417 	ldw	r2,16(r2)
    3dfc:	e13ffd17 	ldw	r4,-12(fp)
    3e00:	103ee83a 	callr	r2
    3e04:	00000106 	br	3e0c <close+0x70>
    3e08:	0005883a 	mov	r2,zero
    3e0c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3e10:	e13fff17 	ldw	r4,-4(fp)
    3e14:	00045dc0 	call	45dc <alt_release_fd>
    if (rval < 0)
    3e18:	e0bffe17 	ldw	r2,-8(fp)
    3e1c:	1000070e 	bge	r2,zero,3e3c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    3e20:	0003d600 	call	3d60 <alt_get_errno>
    3e24:	1007883a 	mov	r3,r2
    3e28:	e0bffe17 	ldw	r2,-8(fp)
    3e2c:	0085c83a 	sub	r2,zero,r2
    3e30:	18800015 	stw	r2,0(r3)
      return -1;
    3e34:	00bfffc4 	movi	r2,-1
    3e38:	00000706 	br	3e58 <close+0xbc>
    }
    return 0;
    3e3c:	0005883a 	mov	r2,zero
    3e40:	00000506 	br	3e58 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3e44:	0003d600 	call	3d60 <alt_get_errno>
    3e48:	1007883a 	mov	r3,r2
    3e4c:	00801444 	movi	r2,81
    3e50:	18800015 	stw	r2,0(r3)
    return -1;
    3e54:	00bfffc4 	movi	r2,-1
  }
}
    3e58:	e037883a 	mov	sp,fp
    3e5c:	dfc00117 	ldw	ra,4(sp)
    3e60:	df000017 	ldw	fp,0(sp)
    3e64:	dec00204 	addi	sp,sp,8
    3e68:	f800283a 	ret

00003e6c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3e6c:	defffc04 	addi	sp,sp,-16
    3e70:	df000315 	stw	fp,12(sp)
    3e74:	df000304 	addi	fp,sp,12
    3e78:	e13ffd15 	stw	r4,-12(fp)
    3e7c:	e17ffe15 	stw	r5,-8(fp)
    3e80:	e1bfff15 	stw	r6,-4(fp)
  return len;
    3e84:	e0bfff17 	ldw	r2,-4(fp)
}
    3e88:	e037883a 	mov	sp,fp
    3e8c:	df000017 	ldw	fp,0(sp)
    3e90:	dec00104 	addi	sp,sp,4
    3e94:	f800283a 	ret

00003e98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3e98:	defffe04 	addi	sp,sp,-8
    3e9c:	dfc00115 	stw	ra,4(sp)
    3ea0:	df000015 	stw	fp,0(sp)
    3ea4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3ea8:	d0a01117 	ldw	r2,-32700(gp)
    3eac:	10000326 	beq	r2,zero,3ebc <alt_get_errno+0x24>
    3eb0:	d0a01117 	ldw	r2,-32700(gp)
    3eb4:	103ee83a 	callr	r2
    3eb8:	00000106 	br	3ec0 <alt_get_errno+0x28>
    3ebc:	d0a74d04 	addi	r2,gp,-25292
}
    3ec0:	e037883a 	mov	sp,fp
    3ec4:	dfc00117 	ldw	ra,4(sp)
    3ec8:	df000017 	ldw	fp,0(sp)
    3ecc:	dec00204 	addi	sp,sp,8
    3ed0:	f800283a 	ret

00003ed4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    3ed4:	defffb04 	addi	sp,sp,-20
    3ed8:	dfc00415 	stw	ra,16(sp)
    3edc:	df000315 	stw	fp,12(sp)
    3ee0:	df000304 	addi	fp,sp,12
    3ee4:	e13ffe15 	stw	r4,-8(fp)
    3ee8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3eec:	e0bffe17 	ldw	r2,-8(fp)
    3ef0:	10000616 	blt	r2,zero,3f0c <fstat+0x38>
    3ef4:	e0bffe17 	ldw	r2,-8(fp)
    3ef8:	10c00324 	muli	r3,r2,12
    3efc:	00800074 	movhi	r2,1
    3f00:	10b2e304 	addi	r2,r2,-13428
    3f04:	1885883a 	add	r2,r3,r2
    3f08:	00000106 	br	3f10 <fstat+0x3c>
    3f0c:	0005883a 	mov	r2,zero
    3f10:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    3f14:	e0bffd17 	ldw	r2,-12(fp)
    3f18:	10001026 	beq	r2,zero,3f5c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    3f1c:	e0bffd17 	ldw	r2,-12(fp)
    3f20:	10800017 	ldw	r2,0(r2)
    3f24:	10800817 	ldw	r2,32(r2)
    3f28:	10000726 	beq	r2,zero,3f48 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    3f2c:	e0bffd17 	ldw	r2,-12(fp)
    3f30:	10800017 	ldw	r2,0(r2)
    3f34:	10800817 	ldw	r2,32(r2)
    3f38:	e17fff17 	ldw	r5,-4(fp)
    3f3c:	e13ffd17 	ldw	r4,-12(fp)
    3f40:	103ee83a 	callr	r2
    3f44:	00000a06 	br	3f70 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3f48:	e0bfff17 	ldw	r2,-4(fp)
    3f4c:	00c80004 	movi	r3,8192
    3f50:	10c00115 	stw	r3,4(r2)
      return 0;
    3f54:	0005883a 	mov	r2,zero
    3f58:	00000506 	br	3f70 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3f5c:	0003e980 	call	3e98 <alt_get_errno>
    3f60:	1007883a 	mov	r3,r2
    3f64:	00801444 	movi	r2,81
    3f68:	18800015 	stw	r2,0(r3)
    return -1;
    3f6c:	00bfffc4 	movi	r2,-1
  }
}
    3f70:	e037883a 	mov	sp,fp
    3f74:	dfc00117 	ldw	ra,4(sp)
    3f78:	df000017 	ldw	fp,0(sp)
    3f7c:	dec00204 	addi	sp,sp,8
    3f80:	f800283a 	ret

00003f84 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    3f84:	defff004 	addi	sp,sp,-64
    3f88:	df000f15 	stw	fp,60(sp)
    3f8c:	df000f04 	addi	fp,sp,60
    3f90:	e13ffd15 	stw	r4,-12(fp)
    3f94:	e17ffe15 	stw	r5,-8(fp)
    3f98:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    3f9c:	00bffa84 	movi	r2,-22
    3fa0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    3fa4:	e0bffd17 	ldw	r2,-12(fp)
    3fa8:	10800828 	cmpgeui	r2,r2,32
    3fac:	1000501e 	bne	r2,zero,40f0 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3fb0:	0005303a 	rdctl	r2,status
    3fb4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3fb8:	e0fff617 	ldw	r3,-40(fp)
    3fbc:	00bfff84 	movi	r2,-2
    3fc0:	1884703a 	and	r2,r3,r2
    3fc4:	1001703a 	wrctl	status,r2
  
  return context;
    3fc8:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    3fcc:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    3fd0:	008011b4 	movhi	r2,70
    3fd4:	10818a04 	addi	r2,r2,1576
    3fd8:	e0fffd17 	ldw	r3,-12(fp)
    3fdc:	180690fa 	slli	r3,r3,3
    3fe0:	10c5883a 	add	r2,r2,r3
    3fe4:	e0ffff17 	ldw	r3,-4(fp)
    3fe8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    3fec:	008011b4 	movhi	r2,70
    3ff0:	10818a04 	addi	r2,r2,1576
    3ff4:	e0fffd17 	ldw	r3,-12(fp)
    3ff8:	180690fa 	slli	r3,r3,3
    3ffc:	10c5883a 	add	r2,r2,r3
    4000:	10800104 	addi	r2,r2,4
    4004:	e0fffe17 	ldw	r3,-8(fp)
    4008:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    400c:	e0bfff17 	ldw	r2,-4(fp)
    4010:	10001926 	beq	r2,zero,4078 <alt_irq_register+0xf4>
    4014:	e0bffd17 	ldw	r2,-12(fp)
    4018:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    401c:	0005303a 	rdctl	r2,status
    4020:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4024:	e0fff717 	ldw	r3,-36(fp)
    4028:	00bfff84 	movi	r2,-2
    402c:	1884703a 	and	r2,r3,r2
    4030:	1001703a 	wrctl	status,r2
  
  return context;
    4034:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    4038:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    403c:	00c00044 	movi	r3,1
    4040:	e0bff217 	ldw	r2,-56(fp)
    4044:	1884983a 	sll	r2,r3,r2
    4048:	1007883a 	mov	r3,r2
    404c:	d0a74e17 	ldw	r2,-25288(gp)
    4050:	1884b03a 	or	r2,r3,r2
    4054:	d0a74e15 	stw	r2,-25288(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4058:	d0a74e17 	ldw	r2,-25288(gp)
    405c:	100170fa 	wrctl	ienable,r2
    4060:	e0bff817 	ldw	r2,-32(fp)
    4064:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4068:	e0bff917 	ldw	r2,-28(fp)
    406c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4070:	0005883a 	mov	r2,zero
    4074:	00001906 	br	40dc <alt_irq_register+0x158>
    4078:	e0bffd17 	ldw	r2,-12(fp)
    407c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4080:	0005303a 	rdctl	r2,status
    4084:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4088:	e0fffa17 	ldw	r3,-24(fp)
    408c:	00bfff84 	movi	r2,-2
    4090:	1884703a 	and	r2,r3,r2
    4094:	1001703a 	wrctl	status,r2
  
  return context;
    4098:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    409c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    40a0:	00c00044 	movi	r3,1
    40a4:	e0bff417 	ldw	r2,-48(fp)
    40a8:	1884983a 	sll	r2,r3,r2
    40ac:	0084303a 	nor	r2,zero,r2
    40b0:	1007883a 	mov	r3,r2
    40b4:	d0a74e17 	ldw	r2,-25288(gp)
    40b8:	1884703a 	and	r2,r3,r2
    40bc:	d0a74e15 	stw	r2,-25288(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    40c0:	d0a74e17 	ldw	r2,-25288(gp)
    40c4:	100170fa 	wrctl	ienable,r2
    40c8:	e0bffb17 	ldw	r2,-20(fp)
    40cc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    40d0:	e0bffc17 	ldw	r2,-16(fp)
    40d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    40d8:	0005883a 	mov	r2,zero
    40dc:	e0bff115 	stw	r2,-60(fp)
    40e0:	e0bff317 	ldw	r2,-52(fp)
    40e4:	e0bff515 	stw	r2,-44(fp)
    40e8:	e0bff517 	ldw	r2,-44(fp)
    40ec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    40f0:	e0bff117 	ldw	r2,-60(fp)
}
    40f4:	e037883a 	mov	sp,fp
    40f8:	df000017 	ldw	fp,0(sp)
    40fc:	dec00104 	addi	sp,sp,4
    4100:	f800283a 	ret

00004104 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4104:	defffe04 	addi	sp,sp,-8
    4108:	dfc00115 	stw	ra,4(sp)
    410c:	df000015 	stw	fp,0(sp)
    4110:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4114:	d0a01117 	ldw	r2,-32700(gp)
    4118:	10000326 	beq	r2,zero,4128 <alt_get_errno+0x24>
    411c:	d0a01117 	ldw	r2,-32700(gp)
    4120:	103ee83a 	callr	r2
    4124:	00000106 	br	412c <alt_get_errno+0x28>
    4128:	d0a74d04 	addi	r2,gp,-25292
}
    412c:	e037883a 	mov	sp,fp
    4130:	dfc00117 	ldw	ra,4(sp)
    4134:	df000017 	ldw	fp,0(sp)
    4138:	dec00204 	addi	sp,sp,8
    413c:	f800283a 	ret

00004140 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    4140:	deffed04 	addi	sp,sp,-76
    4144:	dfc01215 	stw	ra,72(sp)
    4148:	df001115 	stw	fp,68(sp)
    414c:	df001104 	addi	fp,sp,68
    4150:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4154:	e0bfff17 	ldw	r2,-4(fp)
    4158:	10000616 	blt	r2,zero,4174 <isatty+0x34>
    415c:	e0bfff17 	ldw	r2,-4(fp)
    4160:	10c00324 	muli	r3,r2,12
    4164:	00800074 	movhi	r2,1
    4168:	10b2e304 	addi	r2,r2,-13428
    416c:	1885883a 	add	r2,r3,r2
    4170:	00000106 	br	4178 <isatty+0x38>
    4174:	0005883a 	mov	r2,zero
    4178:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    417c:	e0bfef17 	ldw	r2,-68(fp)
    4180:	10000e26 	beq	r2,zero,41bc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    4184:	e0bfef17 	ldw	r2,-68(fp)
    4188:	10800017 	ldw	r2,0(r2)
    418c:	10800817 	ldw	r2,32(r2)
    4190:	1000021e 	bne	r2,zero,419c <isatty+0x5c>
    {
      return 1;
    4194:	00800044 	movi	r2,1
    4198:	00000d06 	br	41d0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    419c:	e0bff004 	addi	r2,fp,-64
    41a0:	100b883a 	mov	r5,r2
    41a4:	e13fff17 	ldw	r4,-4(fp)
    41a8:	0003ed40 	call	3ed4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    41ac:	e0bff117 	ldw	r2,-60(fp)
    41b0:	10880020 	cmpeqi	r2,r2,8192
    41b4:	10803fcc 	andi	r2,r2,255
    41b8:	00000506 	br	41d0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    41bc:	00041040 	call	4104 <alt_get_errno>
    41c0:	1007883a 	mov	r3,r2
    41c4:	00801444 	movi	r2,81
    41c8:	18800015 	stw	r2,0(r3)
    return 0;
    41cc:	0005883a 	mov	r2,zero
  }
}
    41d0:	e037883a 	mov	sp,fp
    41d4:	dfc00117 	ldw	ra,4(sp)
    41d8:	df000017 	ldw	fp,0(sp)
    41dc:	dec00204 	addi	sp,sp,8
    41e0:	f800283a 	ret

000041e4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    41e4:	defffc04 	addi	sp,sp,-16
    41e8:	df000315 	stw	fp,12(sp)
    41ec:	df000304 	addi	fp,sp,12
    41f0:	e13ffd15 	stw	r4,-12(fp)
    41f4:	e17ffe15 	stw	r5,-8(fp)
    41f8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    41fc:	e0fffe17 	ldw	r3,-8(fp)
    4200:	e0bffd17 	ldw	r2,-12(fp)
    4204:	18800c26 	beq	r3,r2,4238 <alt_load_section+0x54>
  {
    while( to != end )
    4208:	00000806 	br	422c <alt_load_section+0x48>
    {
      *to++ = *from++;
    420c:	e0bffe17 	ldw	r2,-8(fp)
    4210:	10c00104 	addi	r3,r2,4
    4214:	e0fffe15 	stw	r3,-8(fp)
    4218:	e0fffd17 	ldw	r3,-12(fp)
    421c:	19000104 	addi	r4,r3,4
    4220:	e13ffd15 	stw	r4,-12(fp)
    4224:	18c00017 	ldw	r3,0(r3)
    4228:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    422c:	e0fffe17 	ldw	r3,-8(fp)
    4230:	e0bfff17 	ldw	r2,-4(fp)
    4234:	18bff51e 	bne	r3,r2,420c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000420c>
    {
      *to++ = *from++;
    }
  }
}
    4238:	0001883a 	nop
    423c:	e037883a 	mov	sp,fp
    4240:	df000017 	ldw	fp,0(sp)
    4244:	dec00104 	addi	sp,sp,4
    4248:	f800283a 	ret

0000424c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    424c:	defffe04 	addi	sp,sp,-8
    4250:	dfc00115 	stw	ra,4(sp)
    4254:	df000015 	stw	fp,0(sp)
    4258:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    425c:	01800074 	movhi	r6,1
    4260:	31b7fe04 	addi	r6,r6,-8200
    4264:	01400074 	movhi	r5,1
    4268:	2970ce04 	addi	r5,r5,-15560
    426c:	01000074 	movhi	r4,1
    4270:	2137fe04 	addi	r4,r4,-8200
    4274:	00041e40 	call	41e4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4278:	01800034 	movhi	r6,0
    427c:	31809204 	addi	r6,r6,584
    4280:	01400034 	movhi	r5,0
    4284:	29400804 	addi	r5,r5,32
    4288:	01000034 	movhi	r4,0
    428c:	21000804 	addi	r4,r4,32
    4290:	00041e40 	call	41e4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4294:	01800074 	movhi	r6,1
    4298:	31b0ce04 	addi	r6,r6,-15560
    429c:	01400034 	movhi	r5,0
    42a0:	295d4904 	addi	r5,r5,29988
    42a4:	01000034 	movhi	r4,0
    42a8:	211d4904 	addi	r4,r4,29988
    42ac:	00041e40 	call	41e4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    42b0:	00066d80 	call	66d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    42b4:	00069280 	call	6928 <alt_icache_flush_all>
}
    42b8:	0001883a 	nop
    42bc:	e037883a 	mov	sp,fp
    42c0:	dfc00117 	ldw	ra,4(sp)
    42c4:	df000017 	ldw	fp,0(sp)
    42c8:	dec00204 	addi	sp,sp,8
    42cc:	f800283a 	ret

000042d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    42d0:	defffe04 	addi	sp,sp,-8
    42d4:	dfc00115 	stw	ra,4(sp)
    42d8:	df000015 	stw	fp,0(sp)
    42dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    42e0:	d0a01117 	ldw	r2,-32700(gp)
    42e4:	10000326 	beq	r2,zero,42f4 <alt_get_errno+0x24>
    42e8:	d0a01117 	ldw	r2,-32700(gp)
    42ec:	103ee83a 	callr	r2
    42f0:	00000106 	br	42f8 <alt_get_errno+0x28>
    42f4:	d0a74d04 	addi	r2,gp,-25292
}
    42f8:	e037883a 	mov	sp,fp
    42fc:	dfc00117 	ldw	ra,4(sp)
    4300:	df000017 	ldw	fp,0(sp)
    4304:	dec00204 	addi	sp,sp,8
    4308:	f800283a 	ret

0000430c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    430c:	defff904 	addi	sp,sp,-28
    4310:	dfc00615 	stw	ra,24(sp)
    4314:	df000515 	stw	fp,20(sp)
    4318:	df000504 	addi	fp,sp,20
    431c:	e13ffd15 	stw	r4,-12(fp)
    4320:	e17ffe15 	stw	r5,-8(fp)
    4324:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    4328:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    432c:	e0bffd17 	ldw	r2,-12(fp)
    4330:	10000616 	blt	r2,zero,434c <lseek+0x40>
    4334:	e0bffd17 	ldw	r2,-12(fp)
    4338:	10c00324 	muli	r3,r2,12
    433c:	00800074 	movhi	r2,1
    4340:	10b2e304 	addi	r2,r2,-13428
    4344:	1885883a 	add	r2,r3,r2
    4348:	00000106 	br	4350 <lseek+0x44>
    434c:	0005883a 	mov	r2,zero
    4350:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    4354:	e0bffc17 	ldw	r2,-16(fp)
    4358:	10001026 	beq	r2,zero,439c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    435c:	e0bffc17 	ldw	r2,-16(fp)
    4360:	10800017 	ldw	r2,0(r2)
    4364:	10800717 	ldw	r2,28(r2)
    4368:	10000926 	beq	r2,zero,4390 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    436c:	e0bffc17 	ldw	r2,-16(fp)
    4370:	10800017 	ldw	r2,0(r2)
    4374:	10800717 	ldw	r2,28(r2)
    4378:	e1bfff17 	ldw	r6,-4(fp)
    437c:	e17ffe17 	ldw	r5,-8(fp)
    4380:	e13ffc17 	ldw	r4,-16(fp)
    4384:	103ee83a 	callr	r2
    4388:	e0bffb15 	stw	r2,-20(fp)
    438c:	00000506 	br	43a4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    4390:	00bfde84 	movi	r2,-134
    4394:	e0bffb15 	stw	r2,-20(fp)
    4398:	00000206 	br	43a4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    439c:	00bfebc4 	movi	r2,-81
    43a0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    43a4:	e0bffb17 	ldw	r2,-20(fp)
    43a8:	1000070e 	bge	r2,zero,43c8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    43ac:	00042d00 	call	42d0 <alt_get_errno>
    43b0:	1007883a 	mov	r3,r2
    43b4:	e0bffb17 	ldw	r2,-20(fp)
    43b8:	0085c83a 	sub	r2,zero,r2
    43bc:	18800015 	stw	r2,0(r3)
    rc = -1;
    43c0:	00bfffc4 	movi	r2,-1
    43c4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    43c8:	e0bffb17 	ldw	r2,-20(fp)
}
    43cc:	e037883a 	mov	sp,fp
    43d0:	dfc00117 	ldw	ra,4(sp)
    43d4:	df000017 	ldw	fp,0(sp)
    43d8:	dec00204 	addi	sp,sp,8
    43dc:	f800283a 	ret

000043e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    43e0:	defffd04 	addi	sp,sp,-12
    43e4:	dfc00215 	stw	ra,8(sp)
    43e8:	df000115 	stw	fp,4(sp)
    43ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    43f0:	0009883a 	mov	r4,zero
    43f4:	00048580 	call	4858 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    43f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    43fc:	00048900 	call	4890 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    4400:	01800074 	movhi	r6,1
    4404:	31b08c04 	addi	r6,r6,-15824
    4408:	01400074 	movhi	r5,1
    440c:	29708c04 	addi	r5,r5,-15824
    4410:	01000074 	movhi	r4,1
    4414:	21308c04 	addi	r4,r4,-15824
    4418:	0006a200 	call	6a20 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    441c:	00067d80 	call	67d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    4420:	01000034 	movhi	r4,0
    4424:	211a0e04 	addi	r4,r4,26680
    4428:	00071900 	call	7190 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    442c:	d0a74f17 	ldw	r2,-25284(gp)
    4430:	d0e75017 	ldw	r3,-25280(gp)
    4434:	d1275117 	ldw	r4,-25276(gp)
    4438:	200d883a 	mov	r6,r4
    443c:	180b883a 	mov	r5,r3
    4440:	1009883a 	mov	r4,r2
    4444:	0000f7c0 	call	f7c <main>
    4448:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    444c:	01000044 	movi	r4,1
    4450:	0003d9c0 	call	3d9c <close>
  exit (result);
    4454:	e13fff17 	ldw	r4,-4(fp)
    4458:	00071a40 	call	71a4 <exit>

0000445c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    445c:	defffe04 	addi	sp,sp,-8
    4460:	df000115 	stw	fp,4(sp)
    4464:	df000104 	addi	fp,sp,4
    4468:	e13fff15 	stw	r4,-4(fp)
}
    446c:	0001883a 	nop
    4470:	e037883a 	mov	sp,fp
    4474:	df000017 	ldw	fp,0(sp)
    4478:	dec00104 	addi	sp,sp,4
    447c:	f800283a 	ret

00004480 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    4480:	defffe04 	addi	sp,sp,-8
    4484:	df000115 	stw	fp,4(sp)
    4488:	df000104 	addi	fp,sp,4
    448c:	e13fff15 	stw	r4,-4(fp)
}
    4490:	0001883a 	nop
    4494:	e037883a 	mov	sp,fp
    4498:	df000017 	ldw	fp,0(sp)
    449c:	dec00104 	addi	sp,sp,4
    44a0:	f800283a 	ret

000044a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    44a4:	defffe04 	addi	sp,sp,-8
    44a8:	dfc00115 	stw	ra,4(sp)
    44ac:	df000015 	stw	fp,0(sp)
    44b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    44b4:	d0a01117 	ldw	r2,-32700(gp)
    44b8:	10000326 	beq	r2,zero,44c8 <alt_get_errno+0x24>
    44bc:	d0a01117 	ldw	r2,-32700(gp)
    44c0:	103ee83a 	callr	r2
    44c4:	00000106 	br	44cc <alt_get_errno+0x28>
    44c8:	d0a74d04 	addi	r2,gp,-25292
}
    44cc:	e037883a 	mov	sp,fp
    44d0:	dfc00117 	ldw	ra,4(sp)
    44d4:	df000017 	ldw	fp,0(sp)
    44d8:	dec00204 	addi	sp,sp,8
    44dc:	f800283a 	ret

000044e0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    44e0:	defff904 	addi	sp,sp,-28
    44e4:	dfc00615 	stw	ra,24(sp)
    44e8:	df000515 	stw	fp,20(sp)
    44ec:	df000504 	addi	fp,sp,20
    44f0:	e13ffd15 	stw	r4,-12(fp)
    44f4:	e17ffe15 	stw	r5,-8(fp)
    44f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    44fc:	e0bffd17 	ldw	r2,-12(fp)
    4500:	10000616 	blt	r2,zero,451c <read+0x3c>
    4504:	e0bffd17 	ldw	r2,-12(fp)
    4508:	10c00324 	muli	r3,r2,12
    450c:	00800074 	movhi	r2,1
    4510:	10b2e304 	addi	r2,r2,-13428
    4514:	1885883a 	add	r2,r3,r2
    4518:	00000106 	br	4520 <read+0x40>
    451c:	0005883a 	mov	r2,zero
    4520:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    4524:	e0bffb17 	ldw	r2,-20(fp)
    4528:	10002226 	beq	r2,zero,45b4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    452c:	e0bffb17 	ldw	r2,-20(fp)
    4530:	10800217 	ldw	r2,8(r2)
    4534:	108000cc 	andi	r2,r2,3
    4538:	10800060 	cmpeqi	r2,r2,1
    453c:	1000181e 	bne	r2,zero,45a0 <read+0xc0>
        (fd->dev->read))
    4540:	e0bffb17 	ldw	r2,-20(fp)
    4544:	10800017 	ldw	r2,0(r2)
    4548:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    454c:	10001426 	beq	r2,zero,45a0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    4550:	e0bffb17 	ldw	r2,-20(fp)
    4554:	10800017 	ldw	r2,0(r2)
    4558:	10800517 	ldw	r2,20(r2)
    455c:	e0ffff17 	ldw	r3,-4(fp)
    4560:	180d883a 	mov	r6,r3
    4564:	e17ffe17 	ldw	r5,-8(fp)
    4568:	e13ffb17 	ldw	r4,-20(fp)
    456c:	103ee83a 	callr	r2
    4570:	e0bffc15 	stw	r2,-16(fp)
    4574:	e0bffc17 	ldw	r2,-16(fp)
    4578:	1000070e 	bge	r2,zero,4598 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    457c:	00044a40 	call	44a4 <alt_get_errno>
    4580:	1007883a 	mov	r3,r2
    4584:	e0bffc17 	ldw	r2,-16(fp)
    4588:	0085c83a 	sub	r2,zero,r2
    458c:	18800015 	stw	r2,0(r3)
          return -1;
    4590:	00bfffc4 	movi	r2,-1
    4594:	00000c06 	br	45c8 <read+0xe8>
        }
        return rval;
    4598:	e0bffc17 	ldw	r2,-16(fp)
    459c:	00000a06 	br	45c8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    45a0:	00044a40 	call	44a4 <alt_get_errno>
    45a4:	1007883a 	mov	r3,r2
    45a8:	00800344 	movi	r2,13
    45ac:	18800015 	stw	r2,0(r3)
    45b0:	00000406 	br	45c4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    45b4:	00044a40 	call	44a4 <alt_get_errno>
    45b8:	1007883a 	mov	r3,r2
    45bc:	00801444 	movi	r2,81
    45c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    45c4:	00bfffc4 	movi	r2,-1
}
    45c8:	e037883a 	mov	sp,fp
    45cc:	dfc00117 	ldw	ra,4(sp)
    45d0:	df000017 	ldw	fp,0(sp)
    45d4:	dec00204 	addi	sp,sp,8
    45d8:	f800283a 	ret

000045dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    45dc:	defffe04 	addi	sp,sp,-8
    45e0:	df000115 	stw	fp,4(sp)
    45e4:	df000104 	addi	fp,sp,4
    45e8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    45ec:	e0bfff17 	ldw	r2,-4(fp)
    45f0:	108000d0 	cmplti	r2,r2,3
    45f4:	10000d1e 	bne	r2,zero,462c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    45f8:	00800074 	movhi	r2,1
    45fc:	10b2e304 	addi	r2,r2,-13428
    4600:	e0ffff17 	ldw	r3,-4(fp)
    4604:	18c00324 	muli	r3,r3,12
    4608:	10c5883a 	add	r2,r2,r3
    460c:	10800204 	addi	r2,r2,8
    4610:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    4614:	00800074 	movhi	r2,1
    4618:	10b2e304 	addi	r2,r2,-13428
    461c:	e0ffff17 	ldw	r3,-4(fp)
    4620:	18c00324 	muli	r3,r3,12
    4624:	10c5883a 	add	r2,r2,r3
    4628:	10000015 	stw	zero,0(r2)
  }
}
    462c:	0001883a 	nop
    4630:	e037883a 	mov	sp,fp
    4634:	df000017 	ldw	fp,0(sp)
    4638:	dec00104 	addi	sp,sp,4
    463c:	f800283a 	ret

00004640 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    4640:	defff904 	addi	sp,sp,-28
    4644:	df000615 	stw	fp,24(sp)
    4648:	df000604 	addi	fp,sp,24
    464c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4650:	0005303a 	rdctl	r2,status
    4654:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4658:	e0fffe17 	ldw	r3,-8(fp)
    465c:	00bfff84 	movi	r2,-2
    4660:	1884703a 	and	r2,r3,r2
    4664:	1001703a 	wrctl	status,r2
  
  return context;
    4668:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    466c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    4670:	d0a01317 	ldw	r2,-32692(gp)
    4674:	10c000c4 	addi	r3,r2,3
    4678:	00bfff04 	movi	r2,-4
    467c:	1884703a 	and	r2,r3,r2
    4680:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    4684:	d0e01317 	ldw	r3,-32692(gp)
    4688:	e0bfff17 	ldw	r2,-4(fp)
    468c:	1887883a 	add	r3,r3,r2
    4690:	00808034 	movhi	r2,512
    4694:	10800004 	addi	r2,r2,0
    4698:	10c0062e 	bgeu	r2,r3,46b4 <sbrk+0x74>
    469c:	e0bffb17 	ldw	r2,-20(fp)
    46a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    46a4:	e0bffa17 	ldw	r2,-24(fp)
    46a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    46ac:	00bfffc4 	movi	r2,-1
    46b0:	00000b06 	br	46e0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    46b4:	d0a01317 	ldw	r2,-32692(gp)
    46b8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    46bc:	d0e01317 	ldw	r3,-32692(gp)
    46c0:	e0bfff17 	ldw	r2,-4(fp)
    46c4:	1885883a 	add	r2,r3,r2
    46c8:	d0a01315 	stw	r2,-32692(gp)
    46cc:	e0bffb17 	ldw	r2,-20(fp)
    46d0:	e0bffc15 	stw	r2,-16(fp)
    46d4:	e0bffc17 	ldw	r2,-16(fp)
    46d8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    46dc:	e0bffd17 	ldw	r2,-12(fp)
} 
    46e0:	e037883a 	mov	sp,fp
    46e4:	df000017 	ldw	fp,0(sp)
    46e8:	dec00104 	addi	sp,sp,4
    46ec:	f800283a 	ret

000046f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    46f0:	defffe04 	addi	sp,sp,-8
    46f4:	dfc00115 	stw	ra,4(sp)
    46f8:	df000015 	stw	fp,0(sp)
    46fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4700:	d0a01117 	ldw	r2,-32700(gp)
    4704:	10000326 	beq	r2,zero,4714 <alt_get_errno+0x24>
    4708:	d0a01117 	ldw	r2,-32700(gp)
    470c:	103ee83a 	callr	r2
    4710:	00000106 	br	4718 <alt_get_errno+0x28>
    4714:	d0a74d04 	addi	r2,gp,-25292
}
    4718:	e037883a 	mov	sp,fp
    471c:	dfc00117 	ldw	ra,4(sp)
    4720:	df000017 	ldw	fp,0(sp)
    4724:	dec00204 	addi	sp,sp,8
    4728:	f800283a 	ret

0000472c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    472c:	defff904 	addi	sp,sp,-28
    4730:	dfc00615 	stw	ra,24(sp)
    4734:	df000515 	stw	fp,20(sp)
    4738:	df000504 	addi	fp,sp,20
    473c:	e13ffd15 	stw	r4,-12(fp)
    4740:	e17ffe15 	stw	r5,-8(fp)
    4744:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4748:	e0bffd17 	ldw	r2,-12(fp)
    474c:	10000616 	blt	r2,zero,4768 <write+0x3c>
    4750:	e0bffd17 	ldw	r2,-12(fp)
    4754:	10c00324 	muli	r3,r2,12
    4758:	00800074 	movhi	r2,1
    475c:	10b2e304 	addi	r2,r2,-13428
    4760:	1885883a 	add	r2,r3,r2
    4764:	00000106 	br	476c <write+0x40>
    4768:	0005883a 	mov	r2,zero
    476c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    4770:	e0bffb17 	ldw	r2,-20(fp)
    4774:	10002126 	beq	r2,zero,47fc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    4778:	e0bffb17 	ldw	r2,-20(fp)
    477c:	10800217 	ldw	r2,8(r2)
    4780:	108000cc 	andi	r2,r2,3
    4784:	10001826 	beq	r2,zero,47e8 <write+0xbc>
    4788:	e0bffb17 	ldw	r2,-20(fp)
    478c:	10800017 	ldw	r2,0(r2)
    4790:	10800617 	ldw	r2,24(r2)
    4794:	10001426 	beq	r2,zero,47e8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    4798:	e0bffb17 	ldw	r2,-20(fp)
    479c:	10800017 	ldw	r2,0(r2)
    47a0:	10800617 	ldw	r2,24(r2)
    47a4:	e0ffff17 	ldw	r3,-4(fp)
    47a8:	180d883a 	mov	r6,r3
    47ac:	e17ffe17 	ldw	r5,-8(fp)
    47b0:	e13ffb17 	ldw	r4,-20(fp)
    47b4:	103ee83a 	callr	r2
    47b8:	e0bffc15 	stw	r2,-16(fp)
    47bc:	e0bffc17 	ldw	r2,-16(fp)
    47c0:	1000070e 	bge	r2,zero,47e0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    47c4:	00046f00 	call	46f0 <alt_get_errno>
    47c8:	1007883a 	mov	r3,r2
    47cc:	e0bffc17 	ldw	r2,-16(fp)
    47d0:	0085c83a 	sub	r2,zero,r2
    47d4:	18800015 	stw	r2,0(r3)
        return -1;
    47d8:	00bfffc4 	movi	r2,-1
    47dc:	00000c06 	br	4810 <write+0xe4>
      }
      return rval;
    47e0:	e0bffc17 	ldw	r2,-16(fp)
    47e4:	00000a06 	br	4810 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    47e8:	00046f00 	call	46f0 <alt_get_errno>
    47ec:	1007883a 	mov	r3,r2
    47f0:	00800344 	movi	r2,13
    47f4:	18800015 	stw	r2,0(r3)
    47f8:	00000406 	br	480c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    47fc:	00046f00 	call	46f0 <alt_get_errno>
    4800:	1007883a 	mov	r3,r2
    4804:	00801444 	movi	r2,81
    4808:	18800015 	stw	r2,0(r3)
  }
  return -1;
    480c:	00bfffc4 	movi	r2,-1
}
    4810:	e037883a 	mov	sp,fp
    4814:	dfc00117 	ldw	ra,4(sp)
    4818:	df000017 	ldw	fp,0(sp)
    481c:	dec00204 	addi	sp,sp,8
    4820:	f800283a 	ret

00004824 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    4824:	defffd04 	addi	sp,sp,-12
    4828:	dfc00215 	stw	ra,8(sp)
    482c:	df000115 	stw	fp,4(sp)
    4830:	df000104 	addi	fp,sp,4
    4834:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4838:	d1600e04 	addi	r5,gp,-32712
    483c:	e13fff17 	ldw	r4,-4(fp)
    4840:	00067340 	call	6734 <alt_dev_llist_insert>
}
    4844:	e037883a 	mov	sp,fp
    4848:	dfc00117 	ldw	ra,4(sp)
    484c:	df000017 	ldw	fp,0(sp)
    4850:	dec00204 	addi	sp,sp,8
    4854:	f800283a 	ret

00004858 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4858:	defffd04 	addi	sp,sp,-12
    485c:	dfc00215 	stw	ra,8(sp)
    4860:	df000115 	stw	fp,4(sp)
    4864:	df000104 	addi	fp,sp,4
    4868:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    486c:	0006e940 	call	6e94 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4870:	00800044 	movi	r2,1
    4874:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4878:	0001883a 	nop
    487c:	e037883a 	mov	sp,fp
    4880:	dfc00117 	ldw	ra,4(sp)
    4884:	df000017 	ldw	fp,0(sp)
    4888:	dec00204 	addi	sp,sp,8
    488c:	f800283a 	ret

00004890 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4890:	defffc04 	addi	sp,sp,-16
    4894:	dfc00315 	stw	ra,12(sp)
    4898:	df000215 	stw	fp,8(sp)
    489c:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    48a0:	01c00204 	movi	r7,8
    48a4:	000d883a 	mov	r6,zero
    48a8:	000b883a 	mov	r5,zero
    48ac:	013fc834 	movhi	r4,65312
    48b0:	21080004 	addi	r4,r4,8192
    48b4:	0005afc0 	call	5afc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    48b8:	01800204 	movi	r6,8
    48bc:	000b883a 	mov	r5,zero
    48c0:	01000074 	movhi	r4,1
    48c4:	21334d04 	addi	r4,r4,-13004
    48c8:	00051840 	call	5184 <altera_avalon_jtag_uart_init>
    48cc:	01000074 	movhi	r4,1
    48d0:	21334304 	addi	r4,r4,-13044
    48d4:	00048240 	call	4824 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    48d8:	0001883a 	nop
    ALTERA_UP_AVALON_ADC_INIT ( ADC, ADC);
    48dc:	01000074 	movhi	r4,1
    48e0:	21375b04 	addi	r4,r4,-8852
    48e4:	00048240 	call	4824 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    48e8:	01000074 	movhi	r4,1
    48ec:	21376604 	addi	r4,r4,-8808
    48f0:	00048240 	call	4824 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    48f4:	01000074 	movhi	r4,1
    48f8:	21377204 	addi	r4,r4,-8760
    48fc:	00048240 	call	4824 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    4900:	01000074 	movhi	r4,1
    4904:	21377e04 	addi	r4,r4,-8712
    4908:	00048240 	call	4824 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    490c:	01000074 	movhi	r4,1
    4910:	21378904 	addi	r4,r4,-8668
    4914:	00060240 	call	6024 <alt_up_ps2_init>
    4918:	01000074 	movhi	r4,1
    491c:	21378904 	addi	r4,r4,-8668
    4920:	00048240 	call	4824 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    4924:	01000074 	movhi	r4,1
    4928:	21379704 	addi	r4,r4,-8612
    492c:	00060240 	call	6024 <alt_up_ps2_init>
    4930:	01000074 	movhi	r4,1
    4934:	21379704 	addi	r4,r4,-8612
    4938:	00048240 	call	4824 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
    493c:	00800074 	movhi	r2,1
    4940:	10b7a504 	addi	r2,r2,-8556
    4944:	10800a17 	ldw	r2,40(r2)
    4948:	10800017 	ldw	r2,0(r2)
    494c:	1007883a 	mov	r3,r2
    4950:	00800074 	movhi	r2,1
    4954:	10b7a504 	addi	r2,r2,-8556
    4958:	10c00b15 	stw	r3,44(r2)
    495c:	00800074 	movhi	r2,1
    4960:	10b7a504 	addi	r2,r2,-8556
    4964:	10800a17 	ldw	r2,40(r2)
    4968:	10800104 	addi	r2,r2,4
    496c:	10800017 	ldw	r2,0(r2)
    4970:	1007883a 	mov	r3,r2
    4974:	00800074 	movhi	r2,1
    4978:	10b7a504 	addi	r2,r2,-8556
    497c:	10c00c15 	stw	r3,48(r2)
    4980:	00800074 	movhi	r2,1
    4984:	10b7a504 	addi	r2,r2,-8556
    4988:	10800a17 	ldw	r2,40(r2)
    498c:	10800204 	addi	r2,r2,8
    4990:	10800017 	ldw	r2,0(r2)
    4994:	10ffffcc 	andi	r3,r2,65535
    4998:	00800074 	movhi	r2,1
    499c:	10b7a504 	addi	r2,r2,-8556
    49a0:	10c01115 	stw	r3,68(r2)
    49a4:	00800074 	movhi	r2,1
    49a8:	10b7a504 	addi	r2,r2,-8556
    49ac:	10800a17 	ldw	r2,40(r2)
    49b0:	10800204 	addi	r2,r2,8
    49b4:	10800017 	ldw	r2,0(r2)
    49b8:	1006d43a 	srli	r3,r2,16
    49bc:	00800074 	movhi	r2,1
    49c0:	10b7a504 	addi	r2,r2,-8556
    49c4:	10c01215 	stw	r3,72(r2)
    49c8:	00800074 	movhi	r2,1
    49cc:	10b7a504 	addi	r2,r2,-8556
    49d0:	10800a17 	ldw	r2,40(r2)
    49d4:	10800304 	addi	r2,r2,12
    49d8:	10800017 	ldw	r2,0(r2)
    49dc:	1005d07a 	srai	r2,r2,1
    49e0:	10c0004c 	andi	r3,r2,1
    49e4:	00800074 	movhi	r2,1
    49e8:	10b7a504 	addi	r2,r2,-8556
    49ec:	10c00d15 	stw	r3,52(r2)
    49f0:	00800074 	movhi	r2,1
    49f4:	10b7a504 	addi	r2,r2,-8556
    49f8:	10800a17 	ldw	r2,40(r2)
    49fc:	10800304 	addi	r2,r2,12
    4a00:	10800017 	ldw	r2,0(r2)
    4a04:	1005d23a 	srai	r2,r2,8
    4a08:	10c003cc 	andi	r3,r2,15
    4a0c:	00800074 	movhi	r2,1
    4a10:	10b7a504 	addi	r2,r2,-8556
    4a14:	10c00e15 	stw	r3,56(r2)
    4a18:	00800074 	movhi	r2,1
    4a1c:	10b7a504 	addi	r2,r2,-8556
    4a20:	10800a17 	ldw	r2,40(r2)
    4a24:	10800304 	addi	r2,r2,12
    4a28:	10800017 	ldw	r2,0(r2)
    4a2c:	1005d1ba 	srai	r2,r2,6
    4a30:	10c000cc 	andi	r3,r2,3
    4a34:	00800074 	movhi	r2,1
    4a38:	10b7a504 	addi	r2,r2,-8556
    4a3c:	10c00f15 	stw	r3,60(r2)
    4a40:	00800074 	movhi	r2,1
    4a44:	10b7a504 	addi	r2,r2,-8556
    4a48:	10800e17 	ldw	r2,56(r2)
    4a4c:	1007883a 	mov	r3,r2
    4a50:	00800074 	movhi	r2,1
    4a54:	10b7a504 	addi	r2,r2,-8556
    4a58:	10800f17 	ldw	r2,60(r2)
    4a5c:	1885383a 	mul	r2,r3,r2
    4a60:	e0bffe05 	stb	r2,-8(fp)
    4a64:	e0bffe03 	ldbu	r2,-8(fp)
    4a68:	10800268 	cmpgeui	r2,r2,9
    4a6c:	1000051e 	bne	r2,zero,4a84 <alt_sys_init+0x1f4>
    4a70:	00800074 	movhi	r2,1
    4a74:	10b7a504 	addi	r2,r2,-8556
    4a78:	00c00044 	movi	r3,1
    4a7c:	10c01015 	stw	r3,64(r2)
    4a80:	00000c06 	br	4ab4 <alt_sys_init+0x224>
    4a84:	e0bffe03 	ldbu	r2,-8(fp)
    4a88:	10800468 	cmpgeui	r2,r2,17
    4a8c:	1000051e 	bne	r2,zero,4aa4 <alt_sys_init+0x214>
    4a90:	00800074 	movhi	r2,1
    4a94:	10b7a504 	addi	r2,r2,-8556
    4a98:	00c00084 	movi	r3,2
    4a9c:	10c01015 	stw	r3,64(r2)
    4aa0:	00000406 	br	4ab4 <alt_sys_init+0x224>
    4aa4:	00800074 	movhi	r2,1
    4aa8:	10b7a504 	addi	r2,r2,-8556
    4aac:	00c00104 	movi	r3,4
    4ab0:	10c01015 	stw	r3,64(r2)
    4ab4:	00800074 	movhi	r2,1
    4ab8:	10b7a504 	addi	r2,r2,-8556
    4abc:	10800a17 	ldw	r2,40(r2)
    4ac0:	10800304 	addi	r2,r2,12
    4ac4:	10800017 	ldw	r2,0(r2)
    4ac8:	1005d43a 	srai	r2,r2,16
    4acc:	e0bffe45 	stb	r2,-7(fp)
    4ad0:	00800074 	movhi	r2,1
    4ad4:	10b7a504 	addi	r2,r2,-8556
    4ad8:	10800a17 	ldw	r2,40(r2)
    4adc:	10800304 	addi	r2,r2,12
    4ae0:	10800017 	ldw	r2,0(r2)
    4ae4:	1004d63a 	srli	r2,r2,24
    4ae8:	e0bffe85 	stb	r2,-6(fp)
    4aec:	00800074 	movhi	r2,1
    4af0:	10b7a504 	addi	r2,r2,-8556
    4af4:	10801017 	ldw	r2,64(r2)
    4af8:	10800058 	cmpnei	r2,r2,1
    4afc:	1000041e 	bne	r2,zero,4b10 <alt_sys_init+0x280>
    4b00:	00800074 	movhi	r2,1
    4b04:	10b7a504 	addi	r2,r2,-8556
    4b08:	10001315 	stw	zero,76(r2)
    4b0c:	00000e06 	br	4b48 <alt_sys_init+0x2b8>
    4b10:	00800074 	movhi	r2,1
    4b14:	10b7a504 	addi	r2,r2,-8556
    4b18:	10801017 	ldw	r2,64(r2)
    4b1c:	10800098 	cmpnei	r2,r2,2
    4b20:	1000051e 	bne	r2,zero,4b38 <alt_sys_init+0x2a8>
    4b24:	00800074 	movhi	r2,1
    4b28:	10b7a504 	addi	r2,r2,-8556
    4b2c:	00c00044 	movi	r3,1
    4b30:	10c01315 	stw	r3,76(r2)
    4b34:	00000406 	br	4b48 <alt_sys_init+0x2b8>
    4b38:	00800074 	movhi	r2,1
    4b3c:	10b7a504 	addi	r2,r2,-8556
    4b40:	00c00084 	movi	r3,2
    4b44:	10c01315 	stw	r3,76(r2)
    4b48:	e0bffe43 	ldbu	r2,-7(fp)
    4b4c:	00c00804 	movi	r3,32
    4b50:	1885c83a 	sub	r2,r3,r2
    4b54:	00ffffc4 	movi	r3,-1
    4b58:	1886d83a 	srl	r3,r3,r2
    4b5c:	00800074 	movhi	r2,1
    4b60:	10b7a504 	addi	r2,r2,-8556
    4b64:	10c01415 	stw	r3,80(r2)
    4b68:	e0fffe43 	ldbu	r3,-7(fp)
    4b6c:	00800074 	movhi	r2,1
    4b70:	10b7a504 	addi	r2,r2,-8556
    4b74:	10801317 	ldw	r2,76(r2)
    4b78:	1887883a 	add	r3,r3,r2
    4b7c:	00800074 	movhi	r2,1
    4b80:	10b7a504 	addi	r2,r2,-8556
    4b84:	10c01515 	stw	r3,84(r2)
    4b88:	e0bffe83 	ldbu	r2,-6(fp)
    4b8c:	00c00804 	movi	r3,32
    4b90:	1885c83a 	sub	r2,r3,r2
    4b94:	00ffffc4 	movi	r3,-1
    4b98:	1886d83a 	srl	r3,r3,r2
    4b9c:	00800074 	movhi	r2,1
    4ba0:	10b7a504 	addi	r2,r2,-8556
    4ba4:	10c01615 	stw	r3,88(r2)
    4ba8:	01000074 	movhi	r4,1
    4bac:	2137a504 	addi	r4,r4,-8556
    4bb0:	00048240 	call	4824 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
    4bb4:	00800074 	movhi	r2,1
    4bb8:	10b7bc04 	addi	r2,r2,-8464
    4bbc:	10800a17 	ldw	r2,40(r2)
    4bc0:	10800017 	ldw	r2,0(r2)
    4bc4:	1007883a 	mov	r3,r2
    4bc8:	00800074 	movhi	r2,1
    4bcc:	10b7bc04 	addi	r2,r2,-8464
    4bd0:	10c00b15 	stw	r3,44(r2)
    4bd4:	00800074 	movhi	r2,1
    4bd8:	10b7bc04 	addi	r2,r2,-8464
    4bdc:	10800a17 	ldw	r2,40(r2)
    4be0:	10800104 	addi	r2,r2,4
    4be4:	10800017 	ldw	r2,0(r2)
    4be8:	1007883a 	mov	r3,r2
    4bec:	00800074 	movhi	r2,1
    4bf0:	10b7bc04 	addi	r2,r2,-8464
    4bf4:	10c00c15 	stw	r3,48(r2)
    4bf8:	00800074 	movhi	r2,1
    4bfc:	10b7bc04 	addi	r2,r2,-8464
    4c00:	10800a17 	ldw	r2,40(r2)
    4c04:	10800204 	addi	r2,r2,8
    4c08:	10800017 	ldw	r2,0(r2)
    4c0c:	10ffffcc 	andi	r3,r2,65535
    4c10:	00800074 	movhi	r2,1
    4c14:	10b7bc04 	addi	r2,r2,-8464
    4c18:	10c01115 	stw	r3,68(r2)
    4c1c:	00800074 	movhi	r2,1
    4c20:	10b7bc04 	addi	r2,r2,-8464
    4c24:	10800a17 	ldw	r2,40(r2)
    4c28:	10800204 	addi	r2,r2,8
    4c2c:	10800017 	ldw	r2,0(r2)
    4c30:	1006d43a 	srli	r3,r2,16
    4c34:	00800074 	movhi	r2,1
    4c38:	10b7bc04 	addi	r2,r2,-8464
    4c3c:	10c01215 	stw	r3,72(r2)
    4c40:	00800074 	movhi	r2,1
    4c44:	10b7bc04 	addi	r2,r2,-8464
    4c48:	10800a17 	ldw	r2,40(r2)
    4c4c:	10800304 	addi	r2,r2,12
    4c50:	10800017 	ldw	r2,0(r2)
    4c54:	1005d07a 	srai	r2,r2,1
    4c58:	10c0004c 	andi	r3,r2,1
    4c5c:	00800074 	movhi	r2,1
    4c60:	10b7bc04 	addi	r2,r2,-8464
    4c64:	10c00d15 	stw	r3,52(r2)
    4c68:	00800074 	movhi	r2,1
    4c6c:	10b7bc04 	addi	r2,r2,-8464
    4c70:	10800a17 	ldw	r2,40(r2)
    4c74:	10800304 	addi	r2,r2,12
    4c78:	10800017 	ldw	r2,0(r2)
    4c7c:	1005d23a 	srai	r2,r2,8
    4c80:	10c003cc 	andi	r3,r2,15
    4c84:	00800074 	movhi	r2,1
    4c88:	10b7bc04 	addi	r2,r2,-8464
    4c8c:	10c00e15 	stw	r3,56(r2)
    4c90:	00800074 	movhi	r2,1
    4c94:	10b7bc04 	addi	r2,r2,-8464
    4c98:	10800a17 	ldw	r2,40(r2)
    4c9c:	10800304 	addi	r2,r2,12
    4ca0:	10800017 	ldw	r2,0(r2)
    4ca4:	1005d1ba 	srai	r2,r2,6
    4ca8:	10c000cc 	andi	r3,r2,3
    4cac:	00800074 	movhi	r2,1
    4cb0:	10b7bc04 	addi	r2,r2,-8464
    4cb4:	10c00f15 	stw	r3,60(r2)
    4cb8:	00800074 	movhi	r2,1
    4cbc:	10b7bc04 	addi	r2,r2,-8464
    4cc0:	10800e17 	ldw	r2,56(r2)
    4cc4:	1007883a 	mov	r3,r2
    4cc8:	00800074 	movhi	r2,1
    4ccc:	10b7bc04 	addi	r2,r2,-8464
    4cd0:	10800f17 	ldw	r2,60(r2)
    4cd4:	1885383a 	mul	r2,r3,r2
    4cd8:	e0bffec5 	stb	r2,-5(fp)
    4cdc:	e0bffec3 	ldbu	r2,-5(fp)
    4ce0:	10800268 	cmpgeui	r2,r2,9
    4ce4:	1000051e 	bne	r2,zero,4cfc <alt_sys_init+0x46c>
    4ce8:	00800074 	movhi	r2,1
    4cec:	10b7bc04 	addi	r2,r2,-8464
    4cf0:	00c00044 	movi	r3,1
    4cf4:	10c01015 	stw	r3,64(r2)
    4cf8:	00000c06 	br	4d2c <alt_sys_init+0x49c>
    4cfc:	e0bffec3 	ldbu	r2,-5(fp)
    4d00:	10800468 	cmpgeui	r2,r2,17
    4d04:	1000051e 	bne	r2,zero,4d1c <alt_sys_init+0x48c>
    4d08:	00800074 	movhi	r2,1
    4d0c:	10b7bc04 	addi	r2,r2,-8464
    4d10:	00c00084 	movi	r3,2
    4d14:	10c01015 	stw	r3,64(r2)
    4d18:	00000406 	br	4d2c <alt_sys_init+0x49c>
    4d1c:	00800074 	movhi	r2,1
    4d20:	10b7bc04 	addi	r2,r2,-8464
    4d24:	00c00104 	movi	r3,4
    4d28:	10c01015 	stw	r3,64(r2)
    4d2c:	00800074 	movhi	r2,1
    4d30:	10b7bc04 	addi	r2,r2,-8464
    4d34:	10800a17 	ldw	r2,40(r2)
    4d38:	10800304 	addi	r2,r2,12
    4d3c:	10800017 	ldw	r2,0(r2)
    4d40:	1005d43a 	srai	r2,r2,16
    4d44:	e0bfff05 	stb	r2,-4(fp)
    4d48:	00800074 	movhi	r2,1
    4d4c:	10b7bc04 	addi	r2,r2,-8464
    4d50:	10800a17 	ldw	r2,40(r2)
    4d54:	10800304 	addi	r2,r2,12
    4d58:	10800017 	ldw	r2,0(r2)
    4d5c:	1004d63a 	srli	r2,r2,24
    4d60:	e0bfff45 	stb	r2,-3(fp)
    4d64:	00800074 	movhi	r2,1
    4d68:	10b7bc04 	addi	r2,r2,-8464
    4d6c:	10801017 	ldw	r2,64(r2)
    4d70:	10800058 	cmpnei	r2,r2,1
    4d74:	1000041e 	bne	r2,zero,4d88 <alt_sys_init+0x4f8>
    4d78:	00800074 	movhi	r2,1
    4d7c:	10b7bc04 	addi	r2,r2,-8464
    4d80:	10001315 	stw	zero,76(r2)
    4d84:	00000e06 	br	4dc0 <alt_sys_init+0x530>
    4d88:	00800074 	movhi	r2,1
    4d8c:	10b7bc04 	addi	r2,r2,-8464
    4d90:	10801017 	ldw	r2,64(r2)
    4d94:	10800098 	cmpnei	r2,r2,2
    4d98:	1000051e 	bne	r2,zero,4db0 <alt_sys_init+0x520>
    4d9c:	00800074 	movhi	r2,1
    4da0:	10b7bc04 	addi	r2,r2,-8464
    4da4:	00c00044 	movi	r3,1
    4da8:	10c01315 	stw	r3,76(r2)
    4dac:	00000406 	br	4dc0 <alt_sys_init+0x530>
    4db0:	00800074 	movhi	r2,1
    4db4:	10b7bc04 	addi	r2,r2,-8464
    4db8:	00c00084 	movi	r3,2
    4dbc:	10c01315 	stw	r3,76(r2)
    4dc0:	e0bfff03 	ldbu	r2,-4(fp)
    4dc4:	00c00804 	movi	r3,32
    4dc8:	1885c83a 	sub	r2,r3,r2
    4dcc:	00ffffc4 	movi	r3,-1
    4dd0:	1886d83a 	srl	r3,r3,r2
    4dd4:	00800074 	movhi	r2,1
    4dd8:	10b7bc04 	addi	r2,r2,-8464
    4ddc:	10c01415 	stw	r3,80(r2)
    4de0:	e0ffff03 	ldbu	r3,-4(fp)
    4de4:	00800074 	movhi	r2,1
    4de8:	10b7bc04 	addi	r2,r2,-8464
    4dec:	10801317 	ldw	r2,76(r2)
    4df0:	1887883a 	add	r3,r3,r2
    4df4:	00800074 	movhi	r2,1
    4df8:	10b7bc04 	addi	r2,r2,-8464
    4dfc:	10c01515 	stw	r3,84(r2)
    4e00:	e0bfff43 	ldbu	r2,-3(fp)
    4e04:	00c00804 	movi	r3,32
    4e08:	1885c83a 	sub	r2,r3,r2
    4e0c:	00ffffc4 	movi	r3,-1
    4e10:	1886d83a 	srl	r3,r3,r2
    4e14:	00800074 	movhi	r2,1
    4e18:	10b7bc04 	addi	r2,r2,-8464
    4e1c:	10c01615 	stw	r3,88(r2)
    4e20:	01000074 	movhi	r4,1
    4e24:	2137bc04 	addi	r4,r4,-8464
    4e28:	00048240 	call	4824 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    4e2c:	00800074 	movhi	r2,1
    4e30:	10b7d304 	addi	r2,r2,-8372
    4e34:	10800a17 	ldw	r2,40(r2)
    4e38:	10800017 	ldw	r2,0(r2)
    4e3c:	1007883a 	mov	r3,r2
    4e40:	00800074 	movhi	r2,1
    4e44:	10b7d304 	addi	r2,r2,-8372
    4e48:	10c00b15 	stw	r3,44(r2)
    4e4c:	00800074 	movhi	r2,1
    4e50:	10b7d304 	addi	r2,r2,-8372
    4e54:	10800a17 	ldw	r2,40(r2)
    4e58:	10800104 	addi	r2,r2,4
    4e5c:	10800017 	ldw	r2,0(r2)
    4e60:	1007883a 	mov	r3,r2
    4e64:	00800074 	movhi	r2,1
    4e68:	10b7d304 	addi	r2,r2,-8372
    4e6c:	10c00c15 	stw	r3,48(r2)
    4e70:	00800074 	movhi	r2,1
    4e74:	10b7d304 	addi	r2,r2,-8372
    4e78:	10800a17 	ldw	r2,40(r2)
    4e7c:	10800204 	addi	r2,r2,8
    4e80:	10800017 	ldw	r2,0(r2)
    4e84:	10ffffcc 	andi	r3,r2,65535
    4e88:	00800074 	movhi	r2,1
    4e8c:	10b7d304 	addi	r2,r2,-8372
    4e90:	10c00f15 	stw	r3,60(r2)
    4e94:	00800074 	movhi	r2,1
    4e98:	10b7d304 	addi	r2,r2,-8372
    4e9c:	10800a17 	ldw	r2,40(r2)
    4ea0:	10800204 	addi	r2,r2,8
    4ea4:	10800017 	ldw	r2,0(r2)
    4ea8:	1006d43a 	srli	r3,r2,16
    4eac:	00800074 	movhi	r2,1
    4eb0:	10b7d304 	addi	r2,r2,-8372
    4eb4:	10c01015 	stw	r3,64(r2)
    4eb8:	00800074 	movhi	r2,1
    4ebc:	10b7d304 	addi	r2,r2,-8372
    4ec0:	10800a17 	ldw	r2,40(r2)
    4ec4:	10800304 	addi	r2,r2,12
    4ec8:	10800017 	ldw	r2,0(r2)
    4ecc:	1005d07a 	srai	r2,r2,1
    4ed0:	10c0004c 	andi	r3,r2,1
    4ed4:	00800074 	movhi	r2,1
    4ed8:	10b7d304 	addi	r2,r2,-8372
    4edc:	10c00d15 	stw	r3,52(r2)
    4ee0:	00800074 	movhi	r2,1
    4ee4:	10b7d304 	addi	r2,r2,-8372
    4ee8:	10800a17 	ldw	r2,40(r2)
    4eec:	10800304 	addi	r2,r2,12
    4ef0:	10800017 	ldw	r2,0(r2)
    4ef4:	1005d13a 	srai	r2,r2,4
    4ef8:	10c003cc 	andi	r3,r2,15
    4efc:	00800074 	movhi	r2,1
    4f00:	10b7d304 	addi	r2,r2,-8372
    4f04:	10c00e15 	stw	r3,56(r2)
    4f08:	00800074 	movhi	r2,1
    4f0c:	10b7d304 	addi	r2,r2,-8372
    4f10:	10800a17 	ldw	r2,40(r2)
    4f14:	10800304 	addi	r2,r2,12
    4f18:	10800017 	ldw	r2,0(r2)
    4f1c:	1005d43a 	srai	r2,r2,16
    4f20:	e0bfff85 	stb	r2,-2(fp)
    4f24:	00800074 	movhi	r2,1
    4f28:	10b7d304 	addi	r2,r2,-8372
    4f2c:	10800a17 	ldw	r2,40(r2)
    4f30:	10800304 	addi	r2,r2,12
    4f34:	10800017 	ldw	r2,0(r2)
    4f38:	1004d63a 	srli	r2,r2,24
    4f3c:	e0bfffc5 	stb	r2,-1(fp)
    4f40:	00800074 	movhi	r2,1
    4f44:	10b7d304 	addi	r2,r2,-8372
    4f48:	10800e17 	ldw	r2,56(r2)
    4f4c:	10800058 	cmpnei	r2,r2,1
    4f50:	1000041e 	bne	r2,zero,4f64 <alt_sys_init+0x6d4>
    4f54:	00800074 	movhi	r2,1
    4f58:	10b7d304 	addi	r2,r2,-8372
    4f5c:	10001115 	stw	zero,68(r2)
    4f60:	00000e06 	br	4f9c <alt_sys_init+0x70c>
    4f64:	00800074 	movhi	r2,1
    4f68:	10b7d304 	addi	r2,r2,-8372
    4f6c:	10800e17 	ldw	r2,56(r2)
    4f70:	10800098 	cmpnei	r2,r2,2
    4f74:	1000051e 	bne	r2,zero,4f8c <alt_sys_init+0x6fc>
    4f78:	00800074 	movhi	r2,1
    4f7c:	10b7d304 	addi	r2,r2,-8372
    4f80:	00c00044 	movi	r3,1
    4f84:	10c01115 	stw	r3,68(r2)
    4f88:	00000406 	br	4f9c <alt_sys_init+0x70c>
    4f8c:	00800074 	movhi	r2,1
    4f90:	10b7d304 	addi	r2,r2,-8372
    4f94:	00c00084 	movi	r3,2
    4f98:	10c01115 	stw	r3,68(r2)
    4f9c:	e0bfff83 	ldbu	r2,-2(fp)
    4fa0:	00c00804 	movi	r3,32
    4fa4:	1885c83a 	sub	r2,r3,r2
    4fa8:	00ffffc4 	movi	r3,-1
    4fac:	1886d83a 	srl	r3,r3,r2
    4fb0:	00800074 	movhi	r2,1
    4fb4:	10b7d304 	addi	r2,r2,-8372
    4fb8:	10c01215 	stw	r3,72(r2)
    4fbc:	e0ffff83 	ldbu	r3,-2(fp)
    4fc0:	00800074 	movhi	r2,1
    4fc4:	10b7d304 	addi	r2,r2,-8372
    4fc8:	10801117 	ldw	r2,68(r2)
    4fcc:	1887883a 	add	r3,r3,r2
    4fd0:	00800074 	movhi	r2,1
    4fd4:	10b7d304 	addi	r2,r2,-8372
    4fd8:	10c01315 	stw	r3,76(r2)
    4fdc:	e0bfffc3 	ldbu	r2,-1(fp)
    4fe0:	00c00804 	movi	r3,32
    4fe4:	1885c83a 	sub	r2,r3,r2
    4fe8:	00ffffc4 	movi	r3,-1
    4fec:	1886d83a 	srl	r3,r3,r2
    4ff0:	00800074 	movhi	r2,1
    4ff4:	10b7d304 	addi	r2,r2,-8372
    4ff8:	10c01415 	stw	r3,80(r2)
    4ffc:	01000074 	movhi	r4,1
    5000:	2137d304 	addi	r4,r4,-8372
    5004:	00048240 	call	4824 <alt_dev_reg>
}
    5008:	0001883a 	nop
    500c:	e037883a 	mov	sp,fp
    5010:	dfc00117 	ldw	ra,4(sp)
    5014:	df000017 	ldw	fp,0(sp)
    5018:	dec00204 	addi	sp,sp,8
    501c:	f800283a 	ret

00005020 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    5020:	defffa04 	addi	sp,sp,-24
    5024:	dfc00515 	stw	ra,20(sp)
    5028:	df000415 	stw	fp,16(sp)
    502c:	df000404 	addi	fp,sp,16
    5030:	e13ffd15 	stw	r4,-12(fp)
    5034:	e17ffe15 	stw	r5,-8(fp)
    5038:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    503c:	e0bffd17 	ldw	r2,-12(fp)
    5040:	10800017 	ldw	r2,0(r2)
    5044:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    5048:	e0bffc17 	ldw	r2,-16(fp)
    504c:	10c00a04 	addi	r3,r2,40
    5050:	e0bffd17 	ldw	r2,-12(fp)
    5054:	10800217 	ldw	r2,8(r2)
    5058:	100f883a 	mov	r7,r2
    505c:	e1bfff17 	ldw	r6,-4(fp)
    5060:	e17ffe17 	ldw	r5,-8(fp)
    5064:	1809883a 	mov	r4,r3
    5068:	00056400 	call	5640 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    506c:	e037883a 	mov	sp,fp
    5070:	dfc00117 	ldw	ra,4(sp)
    5074:	df000017 	ldw	fp,0(sp)
    5078:	dec00204 	addi	sp,sp,8
    507c:	f800283a 	ret

00005080 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    5080:	defffa04 	addi	sp,sp,-24
    5084:	dfc00515 	stw	ra,20(sp)
    5088:	df000415 	stw	fp,16(sp)
    508c:	df000404 	addi	fp,sp,16
    5090:	e13ffd15 	stw	r4,-12(fp)
    5094:	e17ffe15 	stw	r5,-8(fp)
    5098:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    509c:	e0bffd17 	ldw	r2,-12(fp)
    50a0:	10800017 	ldw	r2,0(r2)
    50a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    50a8:	e0bffc17 	ldw	r2,-16(fp)
    50ac:	10c00a04 	addi	r3,r2,40
    50b0:	e0bffd17 	ldw	r2,-12(fp)
    50b4:	10800217 	ldw	r2,8(r2)
    50b8:	100f883a 	mov	r7,r2
    50bc:	e1bfff17 	ldw	r6,-4(fp)
    50c0:	e17ffe17 	ldw	r5,-8(fp)
    50c4:	1809883a 	mov	r4,r3
    50c8:	000585c0 	call	585c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    50cc:	e037883a 	mov	sp,fp
    50d0:	dfc00117 	ldw	ra,4(sp)
    50d4:	df000017 	ldw	fp,0(sp)
    50d8:	dec00204 	addi	sp,sp,8
    50dc:	f800283a 	ret

000050e0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    50e0:	defffc04 	addi	sp,sp,-16
    50e4:	dfc00315 	stw	ra,12(sp)
    50e8:	df000215 	stw	fp,8(sp)
    50ec:	df000204 	addi	fp,sp,8
    50f0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    50f4:	e0bfff17 	ldw	r2,-4(fp)
    50f8:	10800017 	ldw	r2,0(r2)
    50fc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    5100:	e0bffe17 	ldw	r2,-8(fp)
    5104:	10c00a04 	addi	r3,r2,40
    5108:	e0bfff17 	ldw	r2,-4(fp)
    510c:	10800217 	ldw	r2,8(r2)
    5110:	100b883a 	mov	r5,r2
    5114:	1809883a 	mov	r4,r3
    5118:	00054e80 	call	54e8 <altera_avalon_jtag_uart_close>
}
    511c:	e037883a 	mov	sp,fp
    5120:	dfc00117 	ldw	ra,4(sp)
    5124:	df000017 	ldw	fp,0(sp)
    5128:	dec00204 	addi	sp,sp,8
    512c:	f800283a 	ret

00005130 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    5130:	defffa04 	addi	sp,sp,-24
    5134:	dfc00515 	stw	ra,20(sp)
    5138:	df000415 	stw	fp,16(sp)
    513c:	df000404 	addi	fp,sp,16
    5140:	e13ffd15 	stw	r4,-12(fp)
    5144:	e17ffe15 	stw	r5,-8(fp)
    5148:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    514c:	e0bffd17 	ldw	r2,-12(fp)
    5150:	10800017 	ldw	r2,0(r2)
    5154:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    5158:	e0bffc17 	ldw	r2,-16(fp)
    515c:	10800a04 	addi	r2,r2,40
    5160:	e1bfff17 	ldw	r6,-4(fp)
    5164:	e17ffe17 	ldw	r5,-8(fp)
    5168:	1009883a 	mov	r4,r2
    516c:	00055500 	call	5550 <altera_avalon_jtag_uart_ioctl>
}
    5170:	e037883a 	mov	sp,fp
    5174:	dfc00117 	ldw	ra,4(sp)
    5178:	df000017 	ldw	fp,0(sp)
    517c:	dec00204 	addi	sp,sp,8
    5180:	f800283a 	ret

00005184 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    5184:	defffb04 	addi	sp,sp,-20
    5188:	dfc00415 	stw	ra,16(sp)
    518c:	df000315 	stw	fp,12(sp)
    5190:	df000304 	addi	fp,sp,12
    5194:	e13ffd15 	stw	r4,-12(fp)
    5198:	e17ffe15 	stw	r5,-8(fp)
    519c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    51a0:	e0bffd17 	ldw	r2,-12(fp)
    51a4:	00c00044 	movi	r3,1
    51a8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    51ac:	e0bffd17 	ldw	r2,-12(fp)
    51b0:	10800017 	ldw	r2,0(r2)
    51b4:	10800104 	addi	r2,r2,4
    51b8:	1007883a 	mov	r3,r2
    51bc:	e0bffd17 	ldw	r2,-12(fp)
    51c0:	10800817 	ldw	r2,32(r2)
    51c4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    51c8:	e0bfff17 	ldw	r2,-4(fp)
    51cc:	01800034 	movhi	r6,0
    51d0:	31948e04 	addi	r6,r6,21048
    51d4:	e17ffd17 	ldw	r5,-12(fp)
    51d8:	1009883a 	mov	r4,r2
    51dc:	0003f840 	call	3f84 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    51e0:	e0bffd17 	ldw	r2,-12(fp)
    51e4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    51e8:	e0bffd17 	ldw	r2,-12(fp)
    51ec:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    51f0:	d0e75217 	ldw	r3,-25272(gp)
    51f4:	e1fffd17 	ldw	r7,-12(fp)
    51f8:	01800034 	movhi	r6,0
    51fc:	31951204 	addi	r6,r6,21576
    5200:	180b883a 	mov	r5,r3
    5204:	1009883a 	mov	r4,r2
    5208:	00065ac0 	call	65ac <alt_alarm_start>
    520c:	1000040e 	bge	r2,zero,5220 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    5210:	e0fffd17 	ldw	r3,-12(fp)
    5214:	00a00034 	movhi	r2,32768
    5218:	10bfffc4 	addi	r2,r2,-1
    521c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    5220:	0001883a 	nop
    5224:	e037883a 	mov	sp,fp
    5228:	dfc00117 	ldw	ra,4(sp)
    522c:	df000017 	ldw	fp,0(sp)
    5230:	dec00204 	addi	sp,sp,8
    5234:	f800283a 	ret

00005238 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    5238:	defff704 	addi	sp,sp,-36
    523c:	df000815 	stw	fp,32(sp)
    5240:	df000804 	addi	fp,sp,32
    5244:	e13ffe15 	stw	r4,-8(fp)
    5248:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    524c:	e0bffe17 	ldw	r2,-8(fp)
    5250:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
    5254:	e0bffa17 	ldw	r2,-24(fp)
    5258:	10800017 	ldw	r2,0(r2)
    525c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    5260:	e0bffb17 	ldw	r2,-20(fp)
    5264:	10800104 	addi	r2,r2,4
    5268:	10800037 	ldwio	r2,0(r2)
    526c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    5270:	e0bffc17 	ldw	r2,-16(fp)
    5274:	1080c00c 	andi	r2,r2,768
    5278:	10006d26 	beq	r2,zero,5430 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    527c:	e0bffc17 	ldw	r2,-16(fp)
    5280:	1080400c 	andi	r2,r2,256
    5284:	10003526 	beq	r2,zero,535c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    5288:	00800074 	movhi	r2,1
    528c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5290:	e0bffa17 	ldw	r2,-24(fp)
    5294:	10800a17 	ldw	r2,40(r2)
    5298:	10800044 	addi	r2,r2,1
    529c:	1081ffcc 	andi	r2,r2,2047
    52a0:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
    52a4:	e0bffa17 	ldw	r2,-24(fp)
    52a8:	10c00b17 	ldw	r3,44(r2)
    52ac:	e0bffd17 	ldw	r2,-12(fp)
    52b0:	18801526 	beq	r3,r2,5308 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    52b4:	e0bffb17 	ldw	r2,-20(fp)
    52b8:	10800037 	ldwio	r2,0(r2)
    52bc:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    52c0:	e0bff817 	ldw	r2,-32(fp)
    52c4:	10a0000c 	andi	r2,r2,32768
    52c8:	10001126 	beq	r2,zero,5310 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    52cc:	e0bffa17 	ldw	r2,-24(fp)
    52d0:	10800a17 	ldw	r2,40(r2)
    52d4:	e0fff817 	ldw	r3,-32(fp)
    52d8:	1809883a 	mov	r4,r3
    52dc:	e0fffa17 	ldw	r3,-24(fp)
    52e0:	1885883a 	add	r2,r3,r2
    52e4:	10800e04 	addi	r2,r2,56
    52e8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    52ec:	e0bffa17 	ldw	r2,-24(fp)
    52f0:	10800a17 	ldw	r2,40(r2)
    52f4:	10800044 	addi	r2,r2,1
    52f8:	10c1ffcc 	andi	r3,r2,2047
    52fc:	e0bffa17 	ldw	r2,-24(fp)
    5300:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    5304:	003fe206 	br	5290 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005290>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    5308:	0001883a 	nop
    530c:	00000106 	br	5314 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    5310:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    5314:	e0bff817 	ldw	r2,-32(fp)
    5318:	10bfffec 	andhi	r2,r2,65535
    531c:	10000f26 	beq	r2,zero,535c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    5320:	e0bffa17 	ldw	r2,-24(fp)
    5324:	10c00817 	ldw	r3,32(r2)
    5328:	00bfff84 	movi	r2,-2
    532c:	1886703a 	and	r3,r3,r2
    5330:	e0bffa17 	ldw	r2,-24(fp)
    5334:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    5338:	e0bffb17 	ldw	r2,-20(fp)
    533c:	10800104 	addi	r2,r2,4
    5340:	1007883a 	mov	r3,r2
    5344:	e0bffa17 	ldw	r2,-24(fp)
    5348:	10800817 	ldw	r2,32(r2)
    534c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    5350:	e0bffb17 	ldw	r2,-20(fp)
    5354:	10800104 	addi	r2,r2,4
    5358:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    535c:	e0bffc17 	ldw	r2,-16(fp)
    5360:	1080800c 	andi	r2,r2,512
    5364:	103fbe26 	beq	r2,zero,5260 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005260>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    5368:	e0bffc17 	ldw	r2,-16(fp)
    536c:	1004d43a 	srli	r2,r2,16
    5370:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    5374:	00001406 	br	53c8 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    5378:	e0bffb17 	ldw	r2,-20(fp)
    537c:	e0fffa17 	ldw	r3,-24(fp)
    5380:	18c00d17 	ldw	r3,52(r3)
    5384:	e13ffa17 	ldw	r4,-24(fp)
    5388:	20c7883a 	add	r3,r4,r3
    538c:	18c20e04 	addi	r3,r3,2104
    5390:	18c00003 	ldbu	r3,0(r3)
    5394:	18c03fcc 	andi	r3,r3,255
    5398:	18c0201c 	xori	r3,r3,128
    539c:	18ffe004 	addi	r3,r3,-128
    53a0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    53a4:	e0bffa17 	ldw	r2,-24(fp)
    53a8:	10800d17 	ldw	r2,52(r2)
    53ac:	10800044 	addi	r2,r2,1
    53b0:	10c1ffcc 	andi	r3,r2,2047
    53b4:	e0bffa17 	ldw	r2,-24(fp)
    53b8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    53bc:	e0bff917 	ldw	r2,-28(fp)
    53c0:	10bfffc4 	addi	r2,r2,-1
    53c4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    53c8:	e0bff917 	ldw	r2,-28(fp)
    53cc:	10000526 	beq	r2,zero,53e4 <altera_avalon_jtag_uart_irq+0x1ac>
    53d0:	e0bffa17 	ldw	r2,-24(fp)
    53d4:	10c00d17 	ldw	r3,52(r2)
    53d8:	e0bffa17 	ldw	r2,-24(fp)
    53dc:	10800c17 	ldw	r2,48(r2)
    53e0:	18bfe51e 	bne	r3,r2,5378 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005378>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    53e4:	e0bff917 	ldw	r2,-28(fp)
    53e8:	103f9d26 	beq	r2,zero,5260 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005260>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    53ec:	e0bffa17 	ldw	r2,-24(fp)
    53f0:	10c00817 	ldw	r3,32(r2)
    53f4:	00bfff44 	movi	r2,-3
    53f8:	1886703a 	and	r3,r3,r2
    53fc:	e0bffa17 	ldw	r2,-24(fp)
    5400:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    5404:	e0bffa17 	ldw	r2,-24(fp)
    5408:	10800017 	ldw	r2,0(r2)
    540c:	10800104 	addi	r2,r2,4
    5410:	1007883a 	mov	r3,r2
    5414:	e0bffa17 	ldw	r2,-24(fp)
    5418:	10800817 	ldw	r2,32(r2)
    541c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    5420:	e0bffb17 	ldw	r2,-20(fp)
    5424:	10800104 	addi	r2,r2,4
    5428:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    542c:	003f8c06 	br	5260 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005260>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    5430:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    5434:	0001883a 	nop
    5438:	e037883a 	mov	sp,fp
    543c:	df000017 	ldw	fp,0(sp)
    5440:	dec00104 	addi	sp,sp,4
    5444:	f800283a 	ret

00005448 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    5448:	defff804 	addi	sp,sp,-32
    544c:	df000715 	stw	fp,28(sp)
    5450:	df000704 	addi	fp,sp,28
    5454:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    5458:	e0bffb17 	ldw	r2,-20(fp)
    545c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    5460:	e0bff917 	ldw	r2,-28(fp)
    5464:	10800017 	ldw	r2,0(r2)
    5468:	10800104 	addi	r2,r2,4
    546c:	10800037 	ldwio	r2,0(r2)
    5470:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    5474:	e0bffa17 	ldw	r2,-24(fp)
    5478:	1081000c 	andi	r2,r2,1024
    547c:	10000b26 	beq	r2,zero,54ac <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    5480:	e0bff917 	ldw	r2,-28(fp)
    5484:	10800017 	ldw	r2,0(r2)
    5488:	10800104 	addi	r2,r2,4
    548c:	1007883a 	mov	r3,r2
    5490:	e0bff917 	ldw	r2,-28(fp)
    5494:	10800817 	ldw	r2,32(r2)
    5498:	10810014 	ori	r2,r2,1024
    549c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    54a0:	e0bff917 	ldw	r2,-28(fp)
    54a4:	10000915 	stw	zero,36(r2)
    54a8:	00000a06 	br	54d4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    54ac:	e0bff917 	ldw	r2,-28(fp)
    54b0:	10c00917 	ldw	r3,36(r2)
    54b4:	00a00034 	movhi	r2,32768
    54b8:	10bfff04 	addi	r2,r2,-4
    54bc:	10c00536 	bltu	r2,r3,54d4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    54c0:	e0bff917 	ldw	r2,-28(fp)
    54c4:	10800917 	ldw	r2,36(r2)
    54c8:	10c00044 	addi	r3,r2,1
    54cc:	e0bff917 	ldw	r2,-28(fp)
    54d0:	10c00915 	stw	r3,36(r2)
    54d4:	d0a75217 	ldw	r2,-25272(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    54d8:	e037883a 	mov	sp,fp
    54dc:	df000017 	ldw	fp,0(sp)
    54e0:	dec00104 	addi	sp,sp,4
    54e4:	f800283a 	ret

000054e8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    54e8:	defffd04 	addi	sp,sp,-12
    54ec:	df000215 	stw	fp,8(sp)
    54f0:	df000204 	addi	fp,sp,8
    54f4:	e13ffe15 	stw	r4,-8(fp)
    54f8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    54fc:	00000506 	br	5514 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    5500:	e0bfff17 	ldw	r2,-4(fp)
    5504:	1090000c 	andi	r2,r2,16384
    5508:	10000226 	beq	r2,zero,5514 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    550c:	00bffd44 	movi	r2,-11
    5510:	00000b06 	br	5540 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    5514:	e0bffe17 	ldw	r2,-8(fp)
    5518:	10c00d17 	ldw	r3,52(r2)
    551c:	e0bffe17 	ldw	r2,-8(fp)
    5520:	10800c17 	ldw	r2,48(r2)
    5524:	18800526 	beq	r3,r2,553c <altera_avalon_jtag_uart_close+0x54>
    5528:	e0bffe17 	ldw	r2,-8(fp)
    552c:	10c00917 	ldw	r3,36(r2)
    5530:	e0bffe17 	ldw	r2,-8(fp)
    5534:	10800117 	ldw	r2,4(r2)
    5538:	18bff136 	bltu	r3,r2,5500 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005500>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    553c:	0005883a 	mov	r2,zero
}
    5540:	e037883a 	mov	sp,fp
    5544:	df000017 	ldw	fp,0(sp)
    5548:	dec00104 	addi	sp,sp,4
    554c:	f800283a 	ret

00005550 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    5550:	defffa04 	addi	sp,sp,-24
    5554:	df000515 	stw	fp,20(sp)
    5558:	df000504 	addi	fp,sp,20
    555c:	e13ffd15 	stw	r4,-12(fp)
    5560:	e17ffe15 	stw	r5,-8(fp)
    5564:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    5568:	00bff9c4 	movi	r2,-25
    556c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    5570:	e0bffe17 	ldw	r2,-8(fp)
    5574:	10da8060 	cmpeqi	r3,r2,27137
    5578:	1800031e 	bne	r3,zero,5588 <altera_avalon_jtag_uart_ioctl+0x38>
    557c:	109a80a0 	cmpeqi	r2,r2,27138
    5580:	1000181e 	bne	r2,zero,55e4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    5584:	00002906 	br	562c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    5588:	e0bffd17 	ldw	r2,-12(fp)
    558c:	10c00117 	ldw	r3,4(r2)
    5590:	00a00034 	movhi	r2,32768
    5594:	10bfffc4 	addi	r2,r2,-1
    5598:	18802126 	beq	r3,r2,5620 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    559c:	e0bfff17 	ldw	r2,-4(fp)
    55a0:	10800017 	ldw	r2,0(r2)
    55a4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    55a8:	e0bffc17 	ldw	r2,-16(fp)
    55ac:	10800090 	cmplti	r2,r2,2
    55b0:	1000061e 	bne	r2,zero,55cc <altera_avalon_jtag_uart_ioctl+0x7c>
    55b4:	e0fffc17 	ldw	r3,-16(fp)
    55b8:	00a00034 	movhi	r2,32768
    55bc:	10bfffc4 	addi	r2,r2,-1
    55c0:	18800226 	beq	r3,r2,55cc <altera_avalon_jtag_uart_ioctl+0x7c>
    55c4:	e0bffc17 	ldw	r2,-16(fp)
    55c8:	00000206 	br	55d4 <altera_avalon_jtag_uart_ioctl+0x84>
    55cc:	00a00034 	movhi	r2,32768
    55d0:	10bfff84 	addi	r2,r2,-2
    55d4:	e0fffd17 	ldw	r3,-12(fp)
    55d8:	18800115 	stw	r2,4(r3)
      rc = 0;
    55dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    55e0:	00000f06 	br	5620 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    55e4:	e0bffd17 	ldw	r2,-12(fp)
    55e8:	10c00117 	ldw	r3,4(r2)
    55ec:	00a00034 	movhi	r2,32768
    55f0:	10bfffc4 	addi	r2,r2,-1
    55f4:	18800c26 	beq	r3,r2,5628 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    55f8:	e0bffd17 	ldw	r2,-12(fp)
    55fc:	10c00917 	ldw	r3,36(r2)
    5600:	e0bffd17 	ldw	r2,-12(fp)
    5604:	10800117 	ldw	r2,4(r2)
    5608:	1885803a 	cmpltu	r2,r3,r2
    560c:	10c03fcc 	andi	r3,r2,255
    5610:	e0bfff17 	ldw	r2,-4(fp)
    5614:	10c00015 	stw	r3,0(r2)
      rc = 0;
    5618:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    561c:	00000206 	br	5628 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    5620:	0001883a 	nop
    5624:	00000106 	br	562c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    5628:	0001883a 	nop

  default:
    break;
  }

  return rc;
    562c:	e0bffb17 	ldw	r2,-20(fp)
}
    5630:	e037883a 	mov	sp,fp
    5634:	df000017 	ldw	fp,0(sp)
    5638:	dec00104 	addi	sp,sp,4
    563c:	f800283a 	ret

00005640 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    5640:	defff304 	addi	sp,sp,-52
    5644:	dfc00c15 	stw	ra,48(sp)
    5648:	df000b15 	stw	fp,44(sp)
    564c:	df000b04 	addi	fp,sp,44
    5650:	e13ffc15 	stw	r4,-16(fp)
    5654:	e17ffd15 	stw	r5,-12(fp)
    5658:	e1bffe15 	stw	r6,-8(fp)
    565c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    5660:	e0bffd17 	ldw	r2,-12(fp)
    5664:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    5668:	00004706 	br	5788 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    566c:	e0bffc17 	ldw	r2,-16(fp)
    5670:	10800a17 	ldw	r2,40(r2)
    5674:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    5678:	e0bffc17 	ldw	r2,-16(fp)
    567c:	10800b17 	ldw	r2,44(r2)
    5680:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    5684:	e0fff717 	ldw	r3,-36(fp)
    5688:	e0bff817 	ldw	r2,-32(fp)
    568c:	18800536 	bltu	r3,r2,56a4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    5690:	e0fff717 	ldw	r3,-36(fp)
    5694:	e0bff817 	ldw	r2,-32(fp)
    5698:	1885c83a 	sub	r2,r3,r2
    569c:	e0bff615 	stw	r2,-40(fp)
    56a0:	00000406 	br	56b4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    56a4:	00c20004 	movi	r3,2048
    56a8:	e0bff817 	ldw	r2,-32(fp)
    56ac:	1885c83a 	sub	r2,r3,r2
    56b0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    56b4:	e0bff617 	ldw	r2,-40(fp)
    56b8:	10001e26 	beq	r2,zero,5734 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    56bc:	e0fffe17 	ldw	r3,-8(fp)
    56c0:	e0bff617 	ldw	r2,-40(fp)
    56c4:	1880022e 	bgeu	r3,r2,56d0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    56c8:	e0bffe17 	ldw	r2,-8(fp)
    56cc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    56d0:	e0bffc17 	ldw	r2,-16(fp)
    56d4:	10c00e04 	addi	r3,r2,56
    56d8:	e0bff817 	ldw	r2,-32(fp)
    56dc:	1885883a 	add	r2,r3,r2
    56e0:	e1bff617 	ldw	r6,-40(fp)
    56e4:	100b883a 	mov	r5,r2
    56e8:	e13ff517 	ldw	r4,-44(fp)
    56ec:	00023d80 	call	23d8 <memcpy>
      ptr   += n;
    56f0:	e0fff517 	ldw	r3,-44(fp)
    56f4:	e0bff617 	ldw	r2,-40(fp)
    56f8:	1885883a 	add	r2,r3,r2
    56fc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    5700:	e0fffe17 	ldw	r3,-8(fp)
    5704:	e0bff617 	ldw	r2,-40(fp)
    5708:	1885c83a 	sub	r2,r3,r2
    570c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5710:	e0fff817 	ldw	r3,-32(fp)
    5714:	e0bff617 	ldw	r2,-40(fp)
    5718:	1885883a 	add	r2,r3,r2
    571c:	10c1ffcc 	andi	r3,r2,2047
    5720:	e0bffc17 	ldw	r2,-16(fp)
    5724:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    5728:	e0bffe17 	ldw	r2,-8(fp)
    572c:	00bfcf16 	blt	zero,r2,566c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000566c>
    5730:	00000106 	br	5738 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    5734:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    5738:	e0fff517 	ldw	r3,-44(fp)
    573c:	e0bffd17 	ldw	r2,-12(fp)
    5740:	1880141e 	bne	r3,r2,5794 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    5744:	e0bfff17 	ldw	r2,-4(fp)
    5748:	1090000c 	andi	r2,r2,16384
    574c:	1000131e 	bne	r2,zero,579c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    5750:	0001883a 	nop
    5754:	e0bffc17 	ldw	r2,-16(fp)
    5758:	10c00a17 	ldw	r3,40(r2)
    575c:	e0bff717 	ldw	r2,-36(fp)
    5760:	1880051e 	bne	r3,r2,5778 <altera_avalon_jtag_uart_read+0x138>
    5764:	e0bffc17 	ldw	r2,-16(fp)
    5768:	10c00917 	ldw	r3,36(r2)
    576c:	e0bffc17 	ldw	r2,-16(fp)
    5770:	10800117 	ldw	r2,4(r2)
    5774:	18bff736 	bltu	r3,r2,5754 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005754>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    5778:	e0bffc17 	ldw	r2,-16(fp)
    577c:	10c00a17 	ldw	r3,40(r2)
    5780:	e0bff717 	ldw	r2,-36(fp)
    5784:	18800726 	beq	r3,r2,57a4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    5788:	e0bffe17 	ldw	r2,-8(fp)
    578c:	00bfb716 	blt	zero,r2,566c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000566c>
    5790:	00000506 	br	57a8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    5794:	0001883a 	nop
    5798:	00000306 	br	57a8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    579c:	0001883a 	nop
    57a0:	00000106 	br	57a8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    57a4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    57a8:	e0fff517 	ldw	r3,-44(fp)
    57ac:	e0bffd17 	ldw	r2,-12(fp)
    57b0:	18801826 	beq	r3,r2,5814 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    57b4:	0005303a 	rdctl	r2,status
    57b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    57bc:	e0fffb17 	ldw	r3,-20(fp)
    57c0:	00bfff84 	movi	r2,-2
    57c4:	1884703a 	and	r2,r3,r2
    57c8:	1001703a 	wrctl	status,r2
  
  return context;
    57cc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    57d0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    57d4:	e0bffc17 	ldw	r2,-16(fp)
    57d8:	10800817 	ldw	r2,32(r2)
    57dc:	10c00054 	ori	r3,r2,1
    57e0:	e0bffc17 	ldw	r2,-16(fp)
    57e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    57e8:	e0bffc17 	ldw	r2,-16(fp)
    57ec:	10800017 	ldw	r2,0(r2)
    57f0:	10800104 	addi	r2,r2,4
    57f4:	1007883a 	mov	r3,r2
    57f8:	e0bffc17 	ldw	r2,-16(fp)
    57fc:	10800817 	ldw	r2,32(r2)
    5800:	18800035 	stwio	r2,0(r3)
    5804:	e0bffa17 	ldw	r2,-24(fp)
    5808:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    580c:	e0bff917 	ldw	r2,-28(fp)
    5810:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    5814:	e0fff517 	ldw	r3,-44(fp)
    5818:	e0bffd17 	ldw	r2,-12(fp)
    581c:	18800426 	beq	r3,r2,5830 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    5820:	e0fff517 	ldw	r3,-44(fp)
    5824:	e0bffd17 	ldw	r2,-12(fp)
    5828:	1885c83a 	sub	r2,r3,r2
    582c:	00000606 	br	5848 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    5830:	e0bfff17 	ldw	r2,-4(fp)
    5834:	1090000c 	andi	r2,r2,16384
    5838:	10000226 	beq	r2,zero,5844 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    583c:	00bffd44 	movi	r2,-11
    5840:	00000106 	br	5848 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    5844:	00bffec4 	movi	r2,-5
}
    5848:	e037883a 	mov	sp,fp
    584c:	dfc00117 	ldw	ra,4(sp)
    5850:	df000017 	ldw	fp,0(sp)
    5854:	dec00204 	addi	sp,sp,8
    5858:	f800283a 	ret

0000585c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    585c:	defff304 	addi	sp,sp,-52
    5860:	dfc00c15 	stw	ra,48(sp)
    5864:	df000b15 	stw	fp,44(sp)
    5868:	df000b04 	addi	fp,sp,44
    586c:	e13ffc15 	stw	r4,-16(fp)
    5870:	e17ffd15 	stw	r5,-12(fp)
    5874:	e1bffe15 	stw	r6,-8(fp)
    5878:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    587c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    5880:	e0bffd17 	ldw	r2,-12(fp)
    5884:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    5888:	00003706 	br	5968 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    588c:	e0bffc17 	ldw	r2,-16(fp)
    5890:	10800c17 	ldw	r2,48(r2)
    5894:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    5898:	e0bffc17 	ldw	r2,-16(fp)
    589c:	10800d17 	ldw	r2,52(r2)
    58a0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    58a4:	e0fff917 	ldw	r3,-28(fp)
    58a8:	e0bff517 	ldw	r2,-44(fp)
    58ac:	1880062e 	bgeu	r3,r2,58c8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    58b0:	e0fff517 	ldw	r3,-44(fp)
    58b4:	e0bff917 	ldw	r2,-28(fp)
    58b8:	1885c83a 	sub	r2,r3,r2
    58bc:	10bfffc4 	addi	r2,r2,-1
    58c0:	e0bff615 	stw	r2,-40(fp)
    58c4:	00000b06 	br	58f4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    58c8:	e0bff517 	ldw	r2,-44(fp)
    58cc:	10000526 	beq	r2,zero,58e4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    58d0:	00c20004 	movi	r3,2048
    58d4:	e0bff917 	ldw	r2,-28(fp)
    58d8:	1885c83a 	sub	r2,r3,r2
    58dc:	e0bff615 	stw	r2,-40(fp)
    58e0:	00000406 	br	58f4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    58e4:	00c1ffc4 	movi	r3,2047
    58e8:	e0bff917 	ldw	r2,-28(fp)
    58ec:	1885c83a 	sub	r2,r3,r2
    58f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    58f4:	e0bff617 	ldw	r2,-40(fp)
    58f8:	10001e26 	beq	r2,zero,5974 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    58fc:	e0fffe17 	ldw	r3,-8(fp)
    5900:	e0bff617 	ldw	r2,-40(fp)
    5904:	1880022e 	bgeu	r3,r2,5910 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    5908:	e0bffe17 	ldw	r2,-8(fp)
    590c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    5910:	e0bffc17 	ldw	r2,-16(fp)
    5914:	10c20e04 	addi	r3,r2,2104
    5918:	e0bff917 	ldw	r2,-28(fp)
    591c:	1885883a 	add	r2,r3,r2
    5920:	e1bff617 	ldw	r6,-40(fp)
    5924:	e17ffd17 	ldw	r5,-12(fp)
    5928:	1009883a 	mov	r4,r2
    592c:	00023d80 	call	23d8 <memcpy>
      ptr   += n;
    5930:	e0fffd17 	ldw	r3,-12(fp)
    5934:	e0bff617 	ldw	r2,-40(fp)
    5938:	1885883a 	add	r2,r3,r2
    593c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    5940:	e0fffe17 	ldw	r3,-8(fp)
    5944:	e0bff617 	ldw	r2,-40(fp)
    5948:	1885c83a 	sub	r2,r3,r2
    594c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5950:	e0fff917 	ldw	r3,-28(fp)
    5954:	e0bff617 	ldw	r2,-40(fp)
    5958:	1885883a 	add	r2,r3,r2
    595c:	10c1ffcc 	andi	r3,r2,2047
    5960:	e0bffc17 	ldw	r2,-16(fp)
    5964:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    5968:	e0bffe17 	ldw	r2,-8(fp)
    596c:	00bfc716 	blt	zero,r2,588c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000588c>
    5970:	00000106 	br	5978 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    5974:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5978:	0005303a 	rdctl	r2,status
    597c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5980:	e0fffb17 	ldw	r3,-20(fp)
    5984:	00bfff84 	movi	r2,-2
    5988:	1884703a 	and	r2,r3,r2
    598c:	1001703a 	wrctl	status,r2
  
  return context;
    5990:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    5994:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    5998:	e0bffc17 	ldw	r2,-16(fp)
    599c:	10800817 	ldw	r2,32(r2)
    59a0:	10c00094 	ori	r3,r2,2
    59a4:	e0bffc17 	ldw	r2,-16(fp)
    59a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    59ac:	e0bffc17 	ldw	r2,-16(fp)
    59b0:	10800017 	ldw	r2,0(r2)
    59b4:	10800104 	addi	r2,r2,4
    59b8:	1007883a 	mov	r3,r2
    59bc:	e0bffc17 	ldw	r2,-16(fp)
    59c0:	10800817 	ldw	r2,32(r2)
    59c4:	18800035 	stwio	r2,0(r3)
    59c8:	e0bffa17 	ldw	r2,-24(fp)
    59cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    59d0:	e0bff817 	ldw	r2,-32(fp)
    59d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    59d8:	e0bffe17 	ldw	r2,-8(fp)
    59dc:	0080100e 	bge	zero,r2,5a20 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    59e0:	e0bfff17 	ldw	r2,-4(fp)
    59e4:	1090000c 	andi	r2,r2,16384
    59e8:	1000101e 	bne	r2,zero,5a2c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    59ec:	0001883a 	nop
    59f0:	e0bffc17 	ldw	r2,-16(fp)
    59f4:	10c00d17 	ldw	r3,52(r2)
    59f8:	e0bff517 	ldw	r2,-44(fp)
    59fc:	1880051e 	bne	r3,r2,5a14 <altera_avalon_jtag_uart_write+0x1b8>
    5a00:	e0bffc17 	ldw	r2,-16(fp)
    5a04:	10c00917 	ldw	r3,36(r2)
    5a08:	e0bffc17 	ldw	r2,-16(fp)
    5a0c:	10800117 	ldw	r2,4(r2)
    5a10:	18bff736 	bltu	r3,r2,59f0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00059f0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    5a14:	e0bffc17 	ldw	r2,-16(fp)
    5a18:	10800917 	ldw	r2,36(r2)
    5a1c:	1000051e 	bne	r2,zero,5a34 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    5a20:	e0bffe17 	ldw	r2,-8(fp)
    5a24:	00bfd016 	blt	zero,r2,5968 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005968>
    5a28:	00000306 	br	5a38 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    5a2c:	0001883a 	nop
    5a30:	00000106 	br	5a38 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    5a34:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    5a38:	e0fffd17 	ldw	r3,-12(fp)
    5a3c:	e0bff717 	ldw	r2,-36(fp)
    5a40:	18800426 	beq	r3,r2,5a54 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    5a44:	e0fffd17 	ldw	r3,-12(fp)
    5a48:	e0bff717 	ldw	r2,-36(fp)
    5a4c:	1885c83a 	sub	r2,r3,r2
    5a50:	00000606 	br	5a6c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    5a54:	e0bfff17 	ldw	r2,-4(fp)
    5a58:	1090000c 	andi	r2,r2,16384
    5a5c:	10000226 	beq	r2,zero,5a68 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    5a60:	00bffd44 	movi	r2,-11
    5a64:	00000106 	br	5a6c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    5a68:	00bffec4 	movi	r2,-5
}
    5a6c:	e037883a 	mov	sp,fp
    5a70:	dfc00117 	ldw	ra,4(sp)
    5a74:	df000017 	ldw	fp,0(sp)
    5a78:	dec00204 	addi	sp,sp,8
    5a7c:	f800283a 	ret

00005a80 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    5a80:	defff904 	addi	sp,sp,-28
    5a84:	dfc00615 	stw	ra,24(sp)
    5a88:	df000515 	stw	fp,20(sp)
    5a8c:	df000504 	addi	fp,sp,20
    5a90:	e13ffe15 	stw	r4,-8(fp)
    5a94:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    5a98:	0007883a 	mov	r3,zero
    5a9c:	e0bffe17 	ldw	r2,-8(fp)
    5aa0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    5aa4:	e0bffe17 	ldw	r2,-8(fp)
    5aa8:	10800104 	addi	r2,r2,4
    5aac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5ab0:	0005303a 	rdctl	r2,status
    5ab4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5ab8:	e0fffc17 	ldw	r3,-16(fp)
    5abc:	00bfff84 	movi	r2,-2
    5ac0:	1884703a 	and	r2,r3,r2
    5ac4:	1001703a 	wrctl	status,r2
  
  return context;
    5ac8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    5acc:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    5ad0:	0006d8c0 	call	6d8c <alt_tick>
    5ad4:	e0bffb17 	ldw	r2,-20(fp)
    5ad8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5adc:	e0bffd17 	ldw	r2,-12(fp)
    5ae0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    5ae4:	0001883a 	nop
    5ae8:	e037883a 	mov	sp,fp
    5aec:	dfc00117 	ldw	ra,4(sp)
    5af0:	df000017 	ldw	fp,0(sp)
    5af4:	dec00204 	addi	sp,sp,8
    5af8:	f800283a 	ret

00005afc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    5afc:	defff904 	addi	sp,sp,-28
    5b00:	dfc00615 	stw	ra,24(sp)
    5b04:	df000515 	stw	fp,20(sp)
    5b08:	df000504 	addi	fp,sp,20
    5b0c:	e13ffc15 	stw	r4,-16(fp)
    5b10:	e17ffd15 	stw	r5,-12(fp)
    5b14:	e1bffe15 	stw	r6,-8(fp)
    5b18:	e1ffff15 	stw	r7,-4(fp)
    5b1c:	e0bfff17 	ldw	r2,-4(fp)
    5b20:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    5b24:	d0a75217 	ldw	r2,-25272(gp)
    5b28:	1000021e 	bne	r2,zero,5b34 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    5b2c:	e0bffb17 	ldw	r2,-20(fp)
    5b30:	d0a75215 	stw	r2,-25272(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    5b34:	e0bffc17 	ldw	r2,-16(fp)
    5b38:	10800104 	addi	r2,r2,4
    5b3c:	00c001c4 	movi	r3,7
    5b40:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    5b44:	01800034 	movhi	r6,0
    5b48:	3196a004 	addi	r6,r6,23168
    5b4c:	e17ffc17 	ldw	r5,-16(fp)
    5b50:	e13ffe17 	ldw	r4,-8(fp)
    5b54:	0003f840 	call	3f84 <alt_irq_register>
#endif  
}
    5b58:	0001883a 	nop
    5b5c:	e037883a 	mov	sp,fp
    5b60:	dfc00117 	ldw	ra,4(sp)
    5b64:	df000017 	ldw	fp,0(sp)
    5b68:	dec00204 	addi	sp,sp,8
    5b6c:	f800283a 	ret

00005b70 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    5b70:	defffd04 	addi	sp,sp,-12
    5b74:	df000215 	stw	fp,8(sp)
    5b78:	df000204 	addi	fp,sp,8
    5b7c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    5b80:	e0bfff17 	ldw	r2,-4(fp)
    5b84:	10800a17 	ldw	r2,40(r2)
    5b88:	10800104 	addi	r2,r2,4
    5b8c:	10800037 	ldwio	r2,0(r2)
    5b90:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    5b94:	e0bffe17 	ldw	r2,-8(fp)
    5b98:	10800054 	ori	r2,r2,1
    5b9c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    5ba0:	e0bfff17 	ldw	r2,-4(fp)
    5ba4:	10800a17 	ldw	r2,40(r2)
    5ba8:	10800104 	addi	r2,r2,4
    5bac:	1007883a 	mov	r3,r2
    5bb0:	e0bffe17 	ldw	r2,-8(fp)
    5bb4:	18800035 	stwio	r2,0(r3)
}
    5bb8:	0001883a 	nop
    5bbc:	e037883a 	mov	sp,fp
    5bc0:	df000017 	ldw	fp,0(sp)
    5bc4:	dec00104 	addi	sp,sp,4
    5bc8:	f800283a 	ret

00005bcc <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    5bcc:	defffd04 	addi	sp,sp,-12
    5bd0:	df000215 	stw	fp,8(sp)
    5bd4:	df000204 	addi	fp,sp,8
    5bd8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    5bdc:	e0bfff17 	ldw	r2,-4(fp)
    5be0:	10800a17 	ldw	r2,40(r2)
    5be4:	10800104 	addi	r2,r2,4
    5be8:	10800037 	ldwio	r2,0(r2)
    5bec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    5bf0:	e0fffe17 	ldw	r3,-8(fp)
    5bf4:	00bfff84 	movi	r2,-2
    5bf8:	1884703a 	and	r2,r3,r2
    5bfc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    5c00:	e0bfff17 	ldw	r2,-4(fp)
    5c04:	10800a17 	ldw	r2,40(r2)
    5c08:	10800104 	addi	r2,r2,4
    5c0c:	1007883a 	mov	r3,r2
    5c10:	e0bffe17 	ldw	r2,-8(fp)
    5c14:	18800035 	stwio	r2,0(r3)
}
    5c18:	0001883a 	nop
    5c1c:	e037883a 	mov	sp,fp
    5c20:	df000017 	ldw	fp,0(sp)
    5c24:	dec00104 	addi	sp,sp,4
    5c28:	f800283a 	ret

00005c2c <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    5c2c:	defffd04 	addi	sp,sp,-12
    5c30:	df000215 	stw	fp,8(sp)
    5c34:	df000204 	addi	fp,sp,8
    5c38:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    5c3c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    5c40:	e0bfff17 	ldw	r2,-4(fp)
    5c44:	10800a17 	ldw	r2,40(r2)
    5c48:	10800084 	addi	r2,r2,2
    5c4c:	1080002b 	ldhuio	r2,0(r2)
    5c50:	10bfffcc 	andi	r2,r2,65535
    5c54:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    5c58:	e0bffe0b 	ldhu	r2,-8(fp)
}
    5c5c:	e037883a 	mov	sp,fp
    5c60:	df000017 	ldw	fp,0(sp)
    5c64:	dec00104 	addi	sp,sp,4
    5c68:	f800283a 	ret

00005c6c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    5c6c:	defffd04 	addi	sp,sp,-12
    5c70:	df000215 	stw	fp,8(sp)
    5c74:	df000204 	addi	fp,sp,8
    5c78:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    5c7c:	e0bfff17 	ldw	r2,-4(fp)
    5c80:	10800a17 	ldw	r2,40(r2)
    5c84:	10800104 	addi	r2,r2,4
    5c88:	10800037 	ldwio	r2,0(r2)
    5c8c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    5c90:	e0bffe17 	ldw	r2,-8(fp)
    5c94:	1004d43a 	srli	r2,r2,16
}
    5c98:	e037883a 	mov	sp,fp
    5c9c:	df000017 	ldw	fp,0(sp)
    5ca0:	dec00104 	addi	sp,sp,4
    5ca4:	f800283a 	ret

00005ca8 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    5ca8:	defffd04 	addi	sp,sp,-12
    5cac:	df000215 	stw	fp,8(sp)
    5cb0:	df000204 	addi	fp,sp,8
    5cb4:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    5cb8:	e0bfff17 	ldw	r2,-4(fp)
    5cbc:	1080800c 	andi	r2,r2,512
    5cc0:	1004d27a 	srli	r2,r2,9
    5cc4:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    5cc8:	e0bffe17 	ldw	r2,-8(fp)
    5ccc:	10000226 	beq	r2,zero,5cd8 <alt_up_irda_check_parity+0x30>
    5cd0:	00bfffc4 	movi	r2,-1
    5cd4:	00000106 	br	5cdc <alt_up_irda_check_parity+0x34>
    5cd8:	0005883a 	mov	r2,zero
}
    5cdc:	e037883a 	mov	sp,fp
    5ce0:	df000017 	ldw	fp,0(sp)
    5ce4:	dec00104 	addi	sp,sp,4
    5ce8:	f800283a 	ret

00005cec <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    5cec:	defffd04 	addi	sp,sp,-12
    5cf0:	df000215 	stw	fp,8(sp)
    5cf4:	df000204 	addi	fp,sp,8
    5cf8:	e13ffe15 	stw	r4,-8(fp)
    5cfc:	2805883a 	mov	r2,r5
    5d00:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    5d04:	e0bffe17 	ldw	r2,-8(fp)
    5d08:	10800a17 	ldw	r2,40(r2)
    5d0c:	1007883a 	mov	r3,r2
    5d10:	e0bfff03 	ldbu	r2,-4(fp)
    5d14:	18800035 	stwio	r2,0(r3)
	return 0;
    5d18:	0005883a 	mov	r2,zero
}
    5d1c:	e037883a 	mov	sp,fp
    5d20:	df000017 	ldw	fp,0(sp)
    5d24:	dec00104 	addi	sp,sp,4
    5d28:	f800283a 	ret

00005d2c <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    5d2c:	defffa04 	addi	sp,sp,-24
    5d30:	dfc00515 	stw	ra,20(sp)
    5d34:	df000415 	stw	fp,16(sp)
    5d38:	df000404 	addi	fp,sp,16
    5d3c:	e13ffd15 	stw	r4,-12(fp)
    5d40:	e17ffe15 	stw	r5,-8(fp)
    5d44:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    5d48:	e0bffd17 	ldw	r2,-12(fp)
    5d4c:	10800a17 	ldw	r2,40(r2)
    5d50:	10800037 	ldwio	r2,0(r2)
    5d54:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    5d58:	e0bffc17 	ldw	r2,-16(fp)
    5d5c:	1007883a 	mov	r3,r2
    5d60:	e0bffe17 	ldw	r2,-8(fp)
    5d64:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    5d68:	e13ffc17 	ldw	r4,-16(fp)
    5d6c:	0005ca80 	call	5ca8 <alt_up_irda_check_parity>
    5d70:	1007883a 	mov	r3,r2
    5d74:	e0bfff17 	ldw	r2,-4(fp)
    5d78:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    5d7c:	e0bffc17 	ldw	r2,-16(fp)
    5d80:	10a0000c 	andi	r2,r2,32768
    5d84:	1004d3fa 	srli	r2,r2,15
    5d88:	10bfffc4 	addi	r2,r2,-1
}
    5d8c:	e037883a 	mov	sp,fp
    5d90:	dfc00117 	ldw	ra,4(sp)
    5d94:	df000017 	ldw	fp,0(sp)
    5d98:	dec00204 	addi	sp,sp,8
    5d9c:	f800283a 	ret

00005da0 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    5da0:	defff804 	addi	sp,sp,-32
    5da4:	dfc00715 	stw	ra,28(sp)
    5da8:	df000615 	stw	fp,24(sp)
    5dac:	df000604 	addi	fp,sp,24
    5db0:	e13ffd15 	stw	r4,-12(fp)
    5db4:	e17ffe15 	stw	r5,-8(fp)
    5db8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    5dbc:	e0bffd17 	ldw	r2,-12(fp)
    5dc0:	10800017 	ldw	r2,0(r2)
    5dc4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    5dc8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    5dcc:	00000c06 	br	5e00 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    5dd0:	e0bffe17 	ldw	r2,-8(fp)
    5dd4:	10c00044 	addi	r3,r2,1
    5dd8:	e0fffe15 	stw	r3,-8(fp)
    5ddc:	e0fffc04 	addi	r3,fp,-16
    5de0:	180d883a 	mov	r6,r3
    5de4:	100b883a 	mov	r5,r2
    5de8:	e13ffb17 	ldw	r4,-20(fp)
    5dec:	0005d2c0 	call	5d2c <alt_up_irda_read_data>
    5df0:	1000081e 	bne	r2,zero,5e14 <alt_up_irda_read_fd+0x74>
			count++;
    5df4:	e0bffa17 	ldw	r2,-24(fp)
    5df8:	10800044 	addi	r2,r2,1
    5dfc:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    5e00:	e0bfff17 	ldw	r2,-4(fp)
    5e04:	10ffffc4 	addi	r3,r2,-1
    5e08:	e0ffff15 	stw	r3,-4(fp)
    5e0c:	103ff01e 	bne	r2,zero,5dd0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005dd0>
    5e10:	00000106 	br	5e18 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    5e14:	0001883a 	nop
	}
	return count;
    5e18:	e0bffa17 	ldw	r2,-24(fp)
}
    5e1c:	e037883a 	mov	sp,fp
    5e20:	dfc00117 	ldw	ra,4(sp)
    5e24:	df000017 	ldw	fp,0(sp)
    5e28:	dec00204 	addi	sp,sp,8
    5e2c:	f800283a 	ret

00005e30 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    5e30:	defff904 	addi	sp,sp,-28
    5e34:	dfc00615 	stw	ra,24(sp)
    5e38:	df000515 	stw	fp,20(sp)
    5e3c:	df000504 	addi	fp,sp,20
    5e40:	e13ffd15 	stw	r4,-12(fp)
    5e44:	e17ffe15 	stw	r5,-8(fp)
    5e48:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    5e4c:	e0bffd17 	ldw	r2,-12(fp)
    5e50:	10800017 	ldw	r2,0(r2)
    5e54:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    5e58:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    5e5c:	00000c06 	br	5e90 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    5e60:	e0bffe17 	ldw	r2,-8(fp)
    5e64:	10c00044 	addi	r3,r2,1
    5e68:	e0fffe15 	stw	r3,-8(fp)
    5e6c:	10800003 	ldbu	r2,0(r2)
    5e70:	10803fcc 	andi	r2,r2,255
    5e74:	100b883a 	mov	r5,r2
    5e78:	e13ffc17 	ldw	r4,-16(fp)
    5e7c:	0005cec0 	call	5cec <alt_up_irda_write_data>
    5e80:	1000081e 	bne	r2,zero,5ea4 <alt_up_irda_write_fd+0x74>
			count++;
    5e84:	e0bffb17 	ldw	r2,-20(fp)
    5e88:	10800044 	addi	r2,r2,1
    5e8c:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    5e90:	e0bfff17 	ldw	r2,-4(fp)
    5e94:	10ffffc4 	addi	r3,r2,-1
    5e98:	e0ffff15 	stw	r3,-4(fp)
    5e9c:	103ff01e 	bne	r2,zero,5e60 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0005e60>
    5ea0:	00000106 	br	5ea8 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
    5ea4:	0001883a 	nop
	}
	return count;
    5ea8:	e0bffb17 	ldw	r2,-20(fp)
}
    5eac:	e037883a 	mov	sp,fp
    5eb0:	dfc00117 	ldw	ra,4(sp)
    5eb4:	df000017 	ldw	fp,0(sp)
    5eb8:	dec00204 	addi	sp,sp,8
    5ebc:	f800283a 	ret

00005ec0 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    5ec0:	defffc04 	addi	sp,sp,-16
    5ec4:	dfc00315 	stw	ra,12(sp)
    5ec8:	df000215 	stw	fp,8(sp)
    5ecc:	df000204 	addi	fp,sp,8
    5ed0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    5ed4:	d1600e04 	addi	r5,gp,-32712
    5ed8:	e13fff17 	ldw	r4,-4(fp)
    5edc:	00068980 	call	6898 <alt_find_dev>
    5ee0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    5ee4:	e0bffe17 	ldw	r2,-8(fp)
}
    5ee8:	e037883a 	mov	sp,fp
    5eec:	dfc00117 	ldw	ra,4(sp)
    5ef0:	df000017 	ldw	fp,0(sp)
    5ef4:	dec00204 	addi	sp,sp,8
    5ef8:	f800283a 	ret

00005efc <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    5efc:	defffd04 	addi	sp,sp,-12
    5f00:	df000215 	stw	fp,8(sp)
    5f04:	df000204 	addi	fp,sp,8
    5f08:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    5f0c:	e0bfff17 	ldw	r2,-4(fp)
    5f10:	1080400c 	andi	r2,r2,256
    5f14:	1004d23a 	srli	r2,r2,8
    5f18:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    5f1c:	e0bffe03 	ldbu	r2,-8(fp)
}
    5f20:	e037883a 	mov	sp,fp
    5f24:	df000017 	ldw	fp,0(sp)
    5f28:	dec00104 	addi	sp,sp,4
    5f2c:	f800283a 	ret

00005f30 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    5f30:	defffd04 	addi	sp,sp,-12
    5f34:	df000215 	stw	fp,8(sp)
    5f38:	df000204 	addi	fp,sp,8
    5f3c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    5f40:	e0bfff17 	ldw	r2,-4(fp)
    5f44:	1080004c 	andi	r2,r2,1
    5f48:	e0bffe05 	stb	r2,-8(fp)
	return re;
    5f4c:	e0bffe03 	ldbu	r2,-8(fp)
}
    5f50:	e037883a 	mov	sp,fp
    5f54:	df000017 	ldw	fp,0(sp)
    5f58:	dec00104 	addi	sp,sp,4
    5f5c:	f800283a 	ret

00005f60 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    5f60:	defffd04 	addi	sp,sp,-12
    5f64:	df000215 	stw	fp,8(sp)
    5f68:	df000204 	addi	fp,sp,8
    5f6c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    5f70:	e0bfff17 	ldw	r2,-4(fp)
    5f74:	1081000c 	andi	r2,r2,1024
    5f78:	1004d2ba 	srli	r2,r2,10
    5f7c:	e0bffe05 	stb	r2,-8(fp)
	return re;
    5f80:	e0bffe03 	ldbu	r2,-8(fp)
}
    5f84:	e037883a 	mov	sp,fp
    5f88:	df000017 	ldw	fp,0(sp)
    5f8c:	dec00104 	addi	sp,sp,4
    5f90:	f800283a 	ret

00005f94 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    5f94:	defffd04 	addi	sp,sp,-12
    5f98:	df000215 	stw	fp,8(sp)
    5f9c:	df000204 	addi	fp,sp,8
    5fa0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    5fa4:	e0bfff17 	ldw	r2,-4(fp)
    5fa8:	1004d43a 	srli	r2,r2,16
    5fac:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    5fb0:	e0bffe0b 	ldhu	r2,-8(fp)
}
    5fb4:	e037883a 	mov	sp,fp
    5fb8:	df000017 	ldw	fp,0(sp)
    5fbc:	dec00104 	addi	sp,sp,4
    5fc0:	f800283a 	ret

00005fc4 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    5fc4:	defffd04 	addi	sp,sp,-12
    5fc8:	df000215 	stw	fp,8(sp)
    5fcc:	df000204 	addi	fp,sp,8
    5fd0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    5fd4:	e0bfff17 	ldw	r2,-4(fp)
    5fd8:	10a0000c 	andi	r2,r2,32768
    5fdc:	1004d3fa 	srli	r2,r2,15
    5fe0:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    5fe4:	e0bffe03 	ldbu	r2,-8(fp)
}
    5fe8:	e037883a 	mov	sp,fp
    5fec:	df000017 	ldw	fp,0(sp)
    5ff0:	dec00104 	addi	sp,sp,4
    5ff4:	f800283a 	ret

00005ff8 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    5ff8:	defffd04 	addi	sp,sp,-12
    5ffc:	df000215 	stw	fp,8(sp)
    6000:	df000204 	addi	fp,sp,8
    6004:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    6008:	e0bfff17 	ldw	r2,-4(fp)
    600c:	e0bffe05 	stb	r2,-8(fp)
	return data;
    6010:	e0bffe03 	ldbu	r2,-8(fp)
}
    6014:	e037883a 	mov	sp,fp
    6018:	df000017 	ldw	fp,0(sp)
    601c:	dec00104 	addi	sp,sp,4
    6020:	f800283a 	ret

00006024 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    6024:	defffb04 	addi	sp,sp,-20
    6028:	dfc00415 	stw	ra,16(sp)
    602c:	df000315 	stw	fp,12(sp)
    6030:	df000304 	addi	fp,sp,12
    6034:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    6038:	01403fc4 	movi	r5,255
    603c:	e13fff17 	ldw	r4,-4(fp)
    6040:	00062840 	call	6284 <alt_up_ps2_write_data_byte_with_ack>
    6044:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    6048:	e0bffd17 	ldw	r2,-12(fp)
    604c:	1000211e 	bne	r2,zero,60d4 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    6050:	e0bffe04 	addi	r2,fp,-8
    6054:	100b883a 	mov	r5,r2
    6058:	e13fff17 	ldw	r4,-4(fp)
    605c:	00062e80 	call	62e8 <alt_up_ps2_read_data_byte_timeout>
    6060:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    6064:	e0bffd17 	ldw	r2,-12(fp)
    6068:	10001a1e 	bne	r2,zero,60d4 <alt_up_ps2_init+0xb0>
    606c:	e0bffe03 	ldbu	r2,-8(fp)
    6070:	10803fcc 	andi	r2,r2,255
    6074:	10802a98 	cmpnei	r2,r2,170
    6078:	1000161e 	bne	r2,zero,60d4 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    607c:	e0bffe04 	addi	r2,fp,-8
    6080:	100b883a 	mov	r5,r2
    6084:	e13fff17 	ldw	r4,-4(fp)
    6088:	00062e80 	call	62e8 <alt_up_ps2_read_data_byte_timeout>
    608c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    6090:	e0bffd17 	ldw	r2,-12(fp)
    6094:	10bfe318 	cmpnei	r2,r2,-116
    6098:	1000041e 	bne	r2,zero,60ac <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    609c:	e0bfff17 	ldw	r2,-4(fp)
    60a0:	00c00044 	movi	r3,1
    60a4:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
    60a8:	00000a06 	br	60d4 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
    60ac:	e0bffd17 	ldw	r2,-12(fp)
    60b0:	1000081e 	bne	r2,zero,60d4 <alt_up_ps2_init+0xb0>
    60b4:	e0bffe03 	ldbu	r2,-8(fp)
    60b8:	10803fcc 	andi	r2,r2,255
    60bc:	1000051e 	bne	r2,zero,60d4 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    60c0:	e0bfff17 	ldw	r2,-4(fp)
    60c4:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    60c8:	01403d04 	movi	r5,244
    60cc:	e13fff17 	ldw	r4,-4(fp)
    60d0:	00061a80 	call	61a8 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    60d4:	0001883a 	nop
    60d8:	e037883a 	mov	sp,fp
    60dc:	dfc00117 	ldw	ra,4(sp)
    60e0:	df000017 	ldw	fp,0(sp)
    60e4:	dec00204 	addi	sp,sp,8
    60e8:	f800283a 	ret

000060ec <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    60ec:	defffd04 	addi	sp,sp,-12
    60f0:	df000215 	stw	fp,8(sp)
    60f4:	df000204 	addi	fp,sp,8
    60f8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    60fc:	e0bfff17 	ldw	r2,-4(fp)
    6100:	10800a17 	ldw	r2,40(r2)
    6104:	10800104 	addi	r2,r2,4
    6108:	10800037 	ldwio	r2,0(r2)
    610c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    6110:	e0bffe17 	ldw	r2,-8(fp)
    6114:	10800054 	ori	r2,r2,1
    6118:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    611c:	e0bfff17 	ldw	r2,-4(fp)
    6120:	10800a17 	ldw	r2,40(r2)
    6124:	10800104 	addi	r2,r2,4
    6128:	1007883a 	mov	r3,r2
    612c:	e0bffe17 	ldw	r2,-8(fp)
    6130:	18800035 	stwio	r2,0(r3)
}
    6134:	0001883a 	nop
    6138:	e037883a 	mov	sp,fp
    613c:	df000017 	ldw	fp,0(sp)
    6140:	dec00104 	addi	sp,sp,4
    6144:	f800283a 	ret

00006148 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    6148:	defffd04 	addi	sp,sp,-12
    614c:	df000215 	stw	fp,8(sp)
    6150:	df000204 	addi	fp,sp,8
    6154:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    6158:	e0bfff17 	ldw	r2,-4(fp)
    615c:	10800a17 	ldw	r2,40(r2)
    6160:	10800104 	addi	r2,r2,4
    6164:	10800037 	ldwio	r2,0(r2)
    6168:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    616c:	e0fffe17 	ldw	r3,-8(fp)
    6170:	00bfff84 	movi	r2,-2
    6174:	1884703a 	and	r2,r3,r2
    6178:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    617c:	e0bfff17 	ldw	r2,-4(fp)
    6180:	10800a17 	ldw	r2,40(r2)
    6184:	10800104 	addi	r2,r2,4
    6188:	1007883a 	mov	r3,r2
    618c:	e0bffe17 	ldw	r2,-8(fp)
    6190:	18800035 	stwio	r2,0(r3)
}
    6194:	0001883a 	nop
    6198:	e037883a 	mov	sp,fp
    619c:	df000017 	ldw	fp,0(sp)
    61a0:	dec00104 	addi	sp,sp,4
    61a4:	f800283a 	ret

000061a8 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    61a8:	defffb04 	addi	sp,sp,-20
    61ac:	dfc00415 	stw	ra,16(sp)
    61b0:	df000315 	stw	fp,12(sp)
    61b4:	df000304 	addi	fp,sp,12
    61b8:	e13ffe15 	stw	r4,-8(fp)
    61bc:	2805883a 	mov	r2,r5
    61c0:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    61c4:	e0bffe17 	ldw	r2,-8(fp)
    61c8:	10800a17 	ldw	r2,40(r2)
    61cc:	1007883a 	mov	r3,r2
    61d0:	e0bfff03 	ldbu	r2,-4(fp)
    61d4:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    61d8:	e0bffe17 	ldw	r2,-8(fp)
    61dc:	10800a17 	ldw	r2,40(r2)
    61e0:	10800104 	addi	r2,r2,4
    61e4:	10800037 	ldwio	r2,0(r2)
    61e8:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    61ec:	e13ffd17 	ldw	r4,-12(fp)
    61f0:	0005f600 	call	5f60 <read_CE_bit>
    61f4:	10803fcc 	andi	r2,r2,255
    61f8:	10000226 	beq	r2,zero,6204 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    61fc:	00bffec4 	movi	r2,-5
    6200:	00000106 	br	6208 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    6204:	0005883a 	mov	r2,zero
}
    6208:	e037883a 	mov	sp,fp
    620c:	dfc00117 	ldw	ra,4(sp)
    6210:	df000017 	ldw	fp,0(sp)
    6214:	dec00204 	addi	sp,sp,8
    6218:	f800283a 	ret

0000621c <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    621c:	defffc04 	addi	sp,sp,-16
    6220:	dfc00315 	stw	ra,12(sp)
    6224:	df000215 	stw	fp,8(sp)
    6228:	df000204 	addi	fp,sp,8
    622c:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    6230:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    6234:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    6238:	e0bffe44 	addi	r2,fp,-7
    623c:	100b883a 	mov	r5,r2
    6240:	e13fff17 	ldw	r4,-4(fp)
    6244:	00062e80 	call	62e8 <alt_up_ps2_read_data_byte_timeout>
    6248:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    624c:	e0bffe03 	ldbu	r2,-8(fp)
    6250:	1000061e 	bne	r2,zero,626c <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    6254:	e0bffe43 	ldbu	r2,-7(fp)
    6258:	10803fcc 	andi	r2,r2,255
    625c:	10803e98 	cmpnei	r2,r2,250
    6260:	103ff51e 	bne	r2,zero,6238 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006238>
				return 0;
    6264:	0005883a 	mov	r2,zero
    6268:	00000106 	br	6270 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
    626c:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    6270:	e037883a 	mov	sp,fp
    6274:	dfc00117 	ldw	ra,4(sp)
    6278:	df000017 	ldw	fp,0(sp)
    627c:	dec00204 	addi	sp,sp,8
    6280:	f800283a 	ret

00006284 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    6284:	defffa04 	addi	sp,sp,-24
    6288:	dfc00515 	stw	ra,20(sp)
    628c:	df000415 	stw	fp,16(sp)
    6290:	df000404 	addi	fp,sp,16
    6294:	e13ffe15 	stw	r4,-8(fp)
    6298:	2805883a 	mov	r2,r5
    629c:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    62a0:	e0bfff03 	ldbu	r2,-4(fp)
    62a4:	100b883a 	mov	r5,r2
    62a8:	e13ffe17 	ldw	r4,-8(fp)
    62ac:	00061a80 	call	61a8 <alt_up_ps2_write_data_byte>
    62b0:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    62b4:	e0bffc17 	ldw	r2,-16(fp)
    62b8:	10000226 	beq	r2,zero,62c4 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    62bc:	e0bffc17 	ldw	r2,-16(fp)
    62c0:	00000406 	br	62d4 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    62c4:	e13ffe17 	ldw	r4,-8(fp)
    62c8:	000621c0 	call	621c <alt_up_ps2_wait_for_ack>
    62cc:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    62d0:	e0bffd17 	ldw	r2,-12(fp)
}
    62d4:	e037883a 	mov	sp,fp
    62d8:	dfc00117 	ldw	ra,4(sp)
    62dc:	df000017 	ldw	fp,0(sp)
    62e0:	dec00204 	addi	sp,sp,8
    62e4:	f800283a 	ret

000062e8 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    62e8:	defffa04 	addi	sp,sp,-24
    62ec:	dfc00515 	stw	ra,20(sp)
    62f0:	df000415 	stw	fp,16(sp)
    62f4:	df000404 	addi	fp,sp,16
    62f8:	e13ffe15 	stw	r4,-8(fp)
    62fc:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    6300:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    6304:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    6308:	e0bffc17 	ldw	r2,-16(fp)
    630c:	10800044 	addi	r2,r2,1
    6310:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    6314:	e0bffe17 	ldw	r2,-8(fp)
    6318:	10800a17 	ldw	r2,40(r2)
    631c:	10800037 	ldwio	r2,0(r2)
    6320:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    6324:	e13ffd17 	ldw	r4,-12(fp)
    6328:	0005fc40 	call	5fc4 <read_data_valid>
    632c:	10803fcc 	andi	r2,r2,255
    6330:	10000726 	beq	r2,zero,6350 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    6334:	e13ffd17 	ldw	r4,-12(fp)
    6338:	0005ff80 	call	5ff8 <read_data_byte>
    633c:	1007883a 	mov	r3,r2
    6340:	e0bfff17 	ldw	r2,-4(fp)
    6344:	10c00005 	stb	r3,0(r2)
			return 0;
    6348:	0005883a 	mov	r2,zero
    634c:	00000806 	br	6370 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    6350:	e0bffe17 	ldw	r2,-8(fp)
    6354:	10800c17 	ldw	r2,48(r2)
    6358:	103feb26 	beq	r2,zero,6308 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006308>
    635c:	e0bffe17 	ldw	r2,-8(fp)
    6360:	10c00c17 	ldw	r3,48(r2)
    6364:	e0bffc17 	ldw	r2,-16(fp)
    6368:	18bfe72e 	bgeu	r3,r2,6308 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006308>
		{
			return -ETIMEDOUT;
    636c:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    6370:	e037883a 	mov	sp,fp
    6374:	dfc00117 	ldw	ra,4(sp)
    6378:	df000017 	ldw	fp,0(sp)
    637c:	dec00204 	addi	sp,sp,8
    6380:	f800283a 	ret

00006384 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    6384:	defffb04 	addi	sp,sp,-20
    6388:	dfc00415 	stw	ra,16(sp)
    638c:	df000315 	stw	fp,12(sp)
    6390:	df000304 	addi	fp,sp,12
    6394:	e13ffe15 	stw	r4,-8(fp)
    6398:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    639c:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    63a0:	e0bffe17 	ldw	r2,-8(fp)
    63a4:	10800a17 	ldw	r2,40(r2)
    63a8:	10800037 	ldwio	r2,0(r2)
    63ac:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    63b0:	e13ffd17 	ldw	r4,-12(fp)
    63b4:	0005fc40 	call	5fc4 <read_data_valid>
    63b8:	10803fcc 	andi	r2,r2,255
    63bc:	10000726 	beq	r2,zero,63dc <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    63c0:	e13ffd17 	ldw	r4,-12(fp)
    63c4:	0005ff80 	call	5ff8 <read_data_byte>
    63c8:	1007883a 	mov	r3,r2
    63cc:	e0bfff17 	ldw	r2,-4(fp)
    63d0:	10c00005 	stb	r3,0(r2)
		return 0;
    63d4:	0005883a 	mov	r2,zero
    63d8:	00000106 	br	63e0 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    63dc:	00bfffc4 	movi	r2,-1
}
    63e0:	e037883a 	mov	sp,fp
    63e4:	dfc00117 	ldw	ra,4(sp)
    63e8:	df000017 	ldw	fp,0(sp)
    63ec:	dec00204 	addi	sp,sp,8
    63f0:	f800283a 	ret

000063f4 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    63f4:	defffb04 	addi	sp,sp,-20
    63f8:	dfc00415 	stw	ra,16(sp)
    63fc:	df000315 	stw	fp,12(sp)
    6400:	df000304 	addi	fp,sp,12
    6404:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    6408:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    640c:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    6410:	e0bfff17 	ldw	r2,-4(fp)
    6414:	10800a17 	ldw	r2,40(r2)
    6418:	10800037 	ldwio	r2,0(r2)
    641c:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    6420:	e13ffe17 	ldw	r4,-8(fp)
    6424:	0005f940 	call	5f94 <read_num_bytes_available>
    6428:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    642c:	e0bffd0b 	ldhu	r2,-12(fp)
    6430:	103ff71e 	bne	r2,zero,6410 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006410>
}
    6434:	0001883a 	nop
    6438:	e037883a 	mov	sp,fp
    643c:	dfc00117 	ldw	ra,4(sp)
    6440:	df000017 	ldw	fp,0(sp)
    6444:	dec00204 	addi	sp,sp,8
    6448:	f800283a 	ret

0000644c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    644c:	defff804 	addi	sp,sp,-32
    6450:	dfc00715 	stw	ra,28(sp)
    6454:	df000615 	stw	fp,24(sp)
    6458:	df000604 	addi	fp,sp,24
    645c:	e13ffd15 	stw	r4,-12(fp)
    6460:	e17ffe15 	stw	r5,-8(fp)
    6464:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    6468:	e0bffd17 	ldw	r2,-12(fp)
    646c:	10800017 	ldw	r2,0(r2)
    6470:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    6474:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    6478:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    647c:	e0fffc17 	ldw	r3,-16(fp)
    6480:	e0bfff17 	ldw	r2,-4(fp)
    6484:	18bffd16 	blt	r3,r2,647c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000647c>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    6488:	e0bffe17 	ldw	r2,-8(fp)
    648c:	10c00044 	addi	r3,r2,1
    6490:	e0fffe15 	stw	r3,-8(fp)
    6494:	100b883a 	mov	r5,r2
    6498:	e13ffa17 	ldw	r4,-24(fp)
    649c:	00062e80 	call	62e8 <alt_up_ps2_read_data_byte_timeout>
    64a0:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    64a4:	e0bffb17 	ldw	r2,-20(fp)
    64a8:	10000226 	beq	r2,zero,64b4 <alt_up_ps2_read_fd+0x68>
			return count;
    64ac:	e0bffc17 	ldw	r2,-16(fp)
    64b0:	00000406 	br	64c4 <alt_up_ps2_read_fd+0x78>
		count++;
    64b4:	e0bffc17 	ldw	r2,-16(fp)
    64b8:	10800044 	addi	r2,r2,1
    64bc:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    64c0:	e0bffc17 	ldw	r2,-16(fp)
}
    64c4:	e037883a 	mov	sp,fp
    64c8:	dfc00117 	ldw	ra,4(sp)
    64cc:	df000017 	ldw	fp,0(sp)
    64d0:	dec00204 	addi	sp,sp,8
    64d4:	f800283a 	ret

000064d8 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    64d8:	defff804 	addi	sp,sp,-32
    64dc:	dfc00715 	stw	ra,28(sp)
    64e0:	df000615 	stw	fp,24(sp)
    64e4:	df000604 	addi	fp,sp,24
    64e8:	e13ffd15 	stw	r4,-12(fp)
    64ec:	e17ffe15 	stw	r5,-8(fp)
    64f0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    64f4:	e0bffd17 	ldw	r2,-12(fp)
    64f8:	10800017 	ldw	r2,0(r2)
    64fc:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    6500:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    6504:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    6508:	00001006 	br	654c <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    650c:	e0bffe17 	ldw	r2,-8(fp)
    6510:	10c00044 	addi	r3,r2,1
    6514:	e0fffe15 	stw	r3,-8(fp)
    6518:	10800003 	ldbu	r2,0(r2)
    651c:	10803fcc 	andi	r2,r2,255
    6520:	100b883a 	mov	r5,r2
    6524:	e13ffb17 	ldw	r4,-20(fp)
    6528:	00061a80 	call	61a8 <alt_up_ps2_write_data_byte>
    652c:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    6530:	e0bffc17 	ldw	r2,-16(fp)
    6534:	10000226 	beq	r2,zero,6540 <alt_up_ps2_write_fd+0x68>
			return count;
    6538:	e0bffa17 	ldw	r2,-24(fp)
    653c:	00000706 	br	655c <alt_up_ps2_write_fd+0x84>
		count++;
    6540:	e0bffa17 	ldw	r2,-24(fp)
    6544:	10800044 	addi	r2,r2,1
    6548:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    654c:	e0fffa17 	ldw	r3,-24(fp)
    6550:	e0bfff17 	ldw	r2,-4(fp)
    6554:	18bfed16 	blt	r3,r2,650c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000650c>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    6558:	e0bffa17 	ldw	r2,-24(fp)
}
    655c:	e037883a 	mov	sp,fp
    6560:	dfc00117 	ldw	ra,4(sp)
    6564:	df000017 	ldw	fp,0(sp)
    6568:	dec00204 	addi	sp,sp,8
    656c:	f800283a 	ret

00006570 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    6570:	defffc04 	addi	sp,sp,-16
    6574:	dfc00315 	stw	ra,12(sp)
    6578:	df000215 	stw	fp,8(sp)
    657c:	df000204 	addi	fp,sp,8
    6580:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    6584:	d1600e04 	addi	r5,gp,-32712
    6588:	e13fff17 	ldw	r4,-4(fp)
    658c:	00068980 	call	6898 <alt_find_dev>
    6590:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    6594:	e0bffe17 	ldw	r2,-8(fp)
}
    6598:	e037883a 	mov	sp,fp
    659c:	dfc00117 	ldw	ra,4(sp)
    65a0:	df000017 	ldw	fp,0(sp)
    65a4:	dec00204 	addi	sp,sp,8
    65a8:	f800283a 	ret

000065ac <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    65ac:	defff504 	addi	sp,sp,-44
    65b0:	df000a15 	stw	fp,40(sp)
    65b4:	df000a04 	addi	fp,sp,40
    65b8:	e13ffc15 	stw	r4,-16(fp)
    65bc:	e17ffd15 	stw	r5,-12(fp)
    65c0:	e1bffe15 	stw	r6,-8(fp)
    65c4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    65c8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    65cc:	d0a75217 	ldw	r2,-25272(gp)
  
  if (alt_ticks_per_second ())
    65d0:	10003c26 	beq	r2,zero,66c4 <alt_alarm_start+0x118>
  {
    if (alarm)
    65d4:	e0bffc17 	ldw	r2,-16(fp)
    65d8:	10003826 	beq	r2,zero,66bc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    65dc:	e0bffc17 	ldw	r2,-16(fp)
    65e0:	e0fffe17 	ldw	r3,-8(fp)
    65e4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    65e8:	e0bffc17 	ldw	r2,-16(fp)
    65ec:	e0ffff17 	ldw	r3,-4(fp)
    65f0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    65f4:	0005303a 	rdctl	r2,status
    65f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    65fc:	e0fff917 	ldw	r3,-28(fp)
    6600:	00bfff84 	movi	r2,-2
    6604:	1884703a 	and	r2,r3,r2
    6608:	1001703a 	wrctl	status,r2
  
  return context;
    660c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    6610:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    6614:	d0a75317 	ldw	r2,-25268(gp)
      
      current_nticks = alt_nticks();
    6618:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    661c:	e0fffd17 	ldw	r3,-12(fp)
    6620:	e0bff617 	ldw	r2,-40(fp)
    6624:	1885883a 	add	r2,r3,r2
    6628:	10c00044 	addi	r3,r2,1
    662c:	e0bffc17 	ldw	r2,-16(fp)
    6630:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    6634:	e0bffc17 	ldw	r2,-16(fp)
    6638:	10c00217 	ldw	r3,8(r2)
    663c:	e0bff617 	ldw	r2,-40(fp)
    6640:	1880042e 	bgeu	r3,r2,6654 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    6644:	e0bffc17 	ldw	r2,-16(fp)
    6648:	00c00044 	movi	r3,1
    664c:	10c00405 	stb	r3,16(r2)
    6650:	00000206 	br	665c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    6654:	e0bffc17 	ldw	r2,-16(fp)
    6658:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    665c:	e0bffc17 	ldw	r2,-16(fp)
    6660:	d0e01404 	addi	r3,gp,-32688
    6664:	e0fffa15 	stw	r3,-24(fp)
    6668:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    666c:	e0bffb17 	ldw	r2,-20(fp)
    6670:	e0fffa17 	ldw	r3,-24(fp)
    6674:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    6678:	e0bffa17 	ldw	r2,-24(fp)
    667c:	10c00017 	ldw	r3,0(r2)
    6680:	e0bffb17 	ldw	r2,-20(fp)
    6684:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    6688:	e0bffa17 	ldw	r2,-24(fp)
    668c:	10800017 	ldw	r2,0(r2)
    6690:	e0fffb17 	ldw	r3,-20(fp)
    6694:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    6698:	e0bffa17 	ldw	r2,-24(fp)
    669c:	e0fffb17 	ldw	r3,-20(fp)
    66a0:	10c00015 	stw	r3,0(r2)
    66a4:	e0bff817 	ldw	r2,-32(fp)
    66a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    66ac:	e0bff717 	ldw	r2,-36(fp)
    66b0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    66b4:	0005883a 	mov	r2,zero
    66b8:	00000306 	br	66c8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    66bc:	00bffa84 	movi	r2,-22
    66c0:	00000106 	br	66c8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    66c4:	00bfde84 	movi	r2,-134
  }
}
    66c8:	e037883a 	mov	sp,fp
    66cc:	df000017 	ldw	fp,0(sp)
    66d0:	dec00104 	addi	sp,sp,4
    66d4:	f800283a 	ret

000066d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    66d8:	deffff04 	addi	sp,sp,-4
    66dc:	df000015 	stw	fp,0(sp)
    66e0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    66e4:	0001883a 	nop
    66e8:	e037883a 	mov	sp,fp
    66ec:	df000017 	ldw	fp,0(sp)
    66f0:	dec00104 	addi	sp,sp,4
    66f4:	f800283a 	ret

000066f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    66f8:	defffe04 	addi	sp,sp,-8
    66fc:	dfc00115 	stw	ra,4(sp)
    6700:	df000015 	stw	fp,0(sp)
    6704:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    6708:	d0a01117 	ldw	r2,-32700(gp)
    670c:	10000326 	beq	r2,zero,671c <alt_get_errno+0x24>
    6710:	d0a01117 	ldw	r2,-32700(gp)
    6714:	103ee83a 	callr	r2
    6718:	00000106 	br	6720 <alt_get_errno+0x28>
    671c:	d0a74d04 	addi	r2,gp,-25292
}
    6720:	e037883a 	mov	sp,fp
    6724:	dfc00117 	ldw	ra,4(sp)
    6728:	df000017 	ldw	fp,0(sp)
    672c:	dec00204 	addi	sp,sp,8
    6730:	f800283a 	ret

00006734 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    6734:	defffa04 	addi	sp,sp,-24
    6738:	dfc00515 	stw	ra,20(sp)
    673c:	df000415 	stw	fp,16(sp)
    6740:	df000404 	addi	fp,sp,16
    6744:	e13ffe15 	stw	r4,-8(fp)
    6748:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    674c:	e0bffe17 	ldw	r2,-8(fp)
    6750:	10000326 	beq	r2,zero,6760 <alt_dev_llist_insert+0x2c>
    6754:	e0bffe17 	ldw	r2,-8(fp)
    6758:	10800217 	ldw	r2,8(r2)
    675c:	1000061e 	bne	r2,zero,6778 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    6760:	00066f80 	call	66f8 <alt_get_errno>
    6764:	1007883a 	mov	r3,r2
    6768:	00800584 	movi	r2,22
    676c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    6770:	00bffa84 	movi	r2,-22
    6774:	00001306 	br	67c4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    6778:	e0bffe17 	ldw	r2,-8(fp)
    677c:	e0ffff17 	ldw	r3,-4(fp)
    6780:	e0fffc15 	stw	r3,-16(fp)
    6784:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    6788:	e0bffd17 	ldw	r2,-12(fp)
    678c:	e0fffc17 	ldw	r3,-16(fp)
    6790:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    6794:	e0bffc17 	ldw	r2,-16(fp)
    6798:	10c00017 	ldw	r3,0(r2)
    679c:	e0bffd17 	ldw	r2,-12(fp)
    67a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    67a4:	e0bffc17 	ldw	r2,-16(fp)
    67a8:	10800017 	ldw	r2,0(r2)
    67ac:	e0fffd17 	ldw	r3,-12(fp)
    67b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    67b4:	e0bffc17 	ldw	r2,-16(fp)
    67b8:	e0fffd17 	ldw	r3,-12(fp)
    67bc:	10c00015 	stw	r3,0(r2)

  return 0;  
    67c0:	0005883a 	mov	r2,zero
}
    67c4:	e037883a 	mov	sp,fp
    67c8:	dfc00117 	ldw	ra,4(sp)
    67cc:	df000017 	ldw	fp,0(sp)
    67d0:	dec00204 	addi	sp,sp,8
    67d4:	f800283a 	ret

000067d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    67d8:	defffd04 	addi	sp,sp,-12
    67dc:	dfc00215 	stw	ra,8(sp)
    67e0:	df000115 	stw	fp,4(sp)
    67e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    67e8:	00800034 	movhi	r2,0
    67ec:	109d4804 	addi	r2,r2,29984
    67f0:	e0bfff15 	stw	r2,-4(fp)
    67f4:	00000606 	br	6810 <_do_ctors+0x38>
        (*ctor) (); 
    67f8:	e0bfff17 	ldw	r2,-4(fp)
    67fc:	10800017 	ldw	r2,0(r2)
    6800:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    6804:	e0bfff17 	ldw	r2,-4(fp)
    6808:	10bfff04 	addi	r2,r2,-4
    680c:	e0bfff15 	stw	r2,-4(fp)
    6810:	e0ffff17 	ldw	r3,-4(fp)
    6814:	00800034 	movhi	r2,0
    6818:	109d4904 	addi	r2,r2,29988
    681c:	18bff62e 	bgeu	r3,r2,67f8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00067f8>
        (*ctor) (); 
}
    6820:	0001883a 	nop
    6824:	e037883a 	mov	sp,fp
    6828:	dfc00117 	ldw	ra,4(sp)
    682c:	df000017 	ldw	fp,0(sp)
    6830:	dec00204 	addi	sp,sp,8
    6834:	f800283a 	ret

00006838 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    6838:	defffd04 	addi	sp,sp,-12
    683c:	dfc00215 	stw	ra,8(sp)
    6840:	df000115 	stw	fp,4(sp)
    6844:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    6848:	00800034 	movhi	r2,0
    684c:	109d4804 	addi	r2,r2,29984
    6850:	e0bfff15 	stw	r2,-4(fp)
    6854:	00000606 	br	6870 <_do_dtors+0x38>
        (*dtor) (); 
    6858:	e0bfff17 	ldw	r2,-4(fp)
    685c:	10800017 	ldw	r2,0(r2)
    6860:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    6864:	e0bfff17 	ldw	r2,-4(fp)
    6868:	10bfff04 	addi	r2,r2,-4
    686c:	e0bfff15 	stw	r2,-4(fp)
    6870:	e0ffff17 	ldw	r3,-4(fp)
    6874:	00800034 	movhi	r2,0
    6878:	109d4904 	addi	r2,r2,29988
    687c:	18bff62e 	bgeu	r3,r2,6858 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006858>
        (*dtor) (); 
}
    6880:	0001883a 	nop
    6884:	e037883a 	mov	sp,fp
    6888:	dfc00117 	ldw	ra,4(sp)
    688c:	df000017 	ldw	fp,0(sp)
    6890:	dec00204 	addi	sp,sp,8
    6894:	f800283a 	ret

00006898 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    6898:	defffa04 	addi	sp,sp,-24
    689c:	dfc00515 	stw	ra,20(sp)
    68a0:	df000415 	stw	fp,16(sp)
    68a4:	df000404 	addi	fp,sp,16
    68a8:	e13ffe15 	stw	r4,-8(fp)
    68ac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    68b0:	e0bfff17 	ldw	r2,-4(fp)
    68b4:	10800017 	ldw	r2,0(r2)
    68b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    68bc:	e13ffe17 	ldw	r4,-8(fp)
    68c0:	000106c0 	call	106c <strlen>
    68c4:	10800044 	addi	r2,r2,1
    68c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    68cc:	00000d06 	br	6904 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    68d0:	e0bffc17 	ldw	r2,-16(fp)
    68d4:	10800217 	ldw	r2,8(r2)
    68d8:	e0fffd17 	ldw	r3,-12(fp)
    68dc:	180d883a 	mov	r6,r3
    68e0:	e17ffe17 	ldw	r5,-8(fp)
    68e4:	1009883a 	mov	r4,r2
    68e8:	00071dc0 	call	71dc <memcmp>
    68ec:	1000021e 	bne	r2,zero,68f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    68f0:	e0bffc17 	ldw	r2,-16(fp)
    68f4:	00000706 	br	6914 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    68f8:	e0bffc17 	ldw	r2,-16(fp)
    68fc:	10800017 	ldw	r2,0(r2)
    6900:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    6904:	e0fffc17 	ldw	r3,-16(fp)
    6908:	e0bfff17 	ldw	r2,-4(fp)
    690c:	18bff01e 	bne	r3,r2,68d0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00068d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    6910:	0005883a 	mov	r2,zero
}
    6914:	e037883a 	mov	sp,fp
    6918:	dfc00117 	ldw	ra,4(sp)
    691c:	df000017 	ldw	fp,0(sp)
    6920:	dec00204 	addi	sp,sp,8
    6924:	f800283a 	ret

00006928 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    6928:	defffe04 	addi	sp,sp,-8
    692c:	dfc00115 	stw	ra,4(sp)
    6930:	df000015 	stw	fp,0(sp)
    6934:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    6938:	01440004 	movi	r5,4096
    693c:	0009883a 	mov	r4,zero
    6940:	00070640 	call	7064 <alt_icache_flush>
#endif
}
    6944:	0001883a 	nop
    6948:	e037883a 	mov	sp,fp
    694c:	dfc00117 	ldw	ra,4(sp)
    6950:	df000017 	ldw	fp,0(sp)
    6954:	dec00204 	addi	sp,sp,8
    6958:	f800283a 	ret

0000695c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    695c:	defff904 	addi	sp,sp,-28
    6960:	dfc00615 	stw	ra,24(sp)
    6964:	df000515 	stw	fp,20(sp)
    6968:	df000504 	addi	fp,sp,20
    696c:	e13ffc15 	stw	r4,-16(fp)
    6970:	e17ffd15 	stw	r5,-12(fp)
    6974:	e1bffe15 	stw	r6,-8(fp)
    6978:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    697c:	e1bfff17 	ldw	r6,-4(fp)
    6980:	e17ffe17 	ldw	r5,-8(fp)
    6984:	e13ffd17 	ldw	r4,-12(fp)
    6988:	0006b9c0 	call	6b9c <open>
    698c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    6990:	e0bffb17 	ldw	r2,-20(fp)
    6994:	10001c16 	blt	r2,zero,6a08 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    6998:	00800074 	movhi	r2,1
    699c:	10b2e304 	addi	r2,r2,-13428
    69a0:	e0fffb17 	ldw	r3,-20(fp)
    69a4:	18c00324 	muli	r3,r3,12
    69a8:	10c5883a 	add	r2,r2,r3
    69ac:	10c00017 	ldw	r3,0(r2)
    69b0:	e0bffc17 	ldw	r2,-16(fp)
    69b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    69b8:	00800074 	movhi	r2,1
    69bc:	10b2e304 	addi	r2,r2,-13428
    69c0:	e0fffb17 	ldw	r3,-20(fp)
    69c4:	18c00324 	muli	r3,r3,12
    69c8:	10c5883a 	add	r2,r2,r3
    69cc:	10800104 	addi	r2,r2,4
    69d0:	10c00017 	ldw	r3,0(r2)
    69d4:	e0bffc17 	ldw	r2,-16(fp)
    69d8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    69dc:	00800074 	movhi	r2,1
    69e0:	10b2e304 	addi	r2,r2,-13428
    69e4:	e0fffb17 	ldw	r3,-20(fp)
    69e8:	18c00324 	muli	r3,r3,12
    69ec:	10c5883a 	add	r2,r2,r3
    69f0:	10800204 	addi	r2,r2,8
    69f4:	10c00017 	ldw	r3,0(r2)
    69f8:	e0bffc17 	ldw	r2,-16(fp)
    69fc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    6a00:	e13ffb17 	ldw	r4,-20(fp)
    6a04:	00045dc0 	call	45dc <alt_release_fd>
  }
} 
    6a08:	0001883a 	nop
    6a0c:	e037883a 	mov	sp,fp
    6a10:	dfc00117 	ldw	ra,4(sp)
    6a14:	df000017 	ldw	fp,0(sp)
    6a18:	dec00204 	addi	sp,sp,8
    6a1c:	f800283a 	ret

00006a20 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    6a20:	defffb04 	addi	sp,sp,-20
    6a24:	dfc00415 	stw	ra,16(sp)
    6a28:	df000315 	stw	fp,12(sp)
    6a2c:	df000304 	addi	fp,sp,12
    6a30:	e13ffd15 	stw	r4,-12(fp)
    6a34:	e17ffe15 	stw	r5,-8(fp)
    6a38:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    6a3c:	01c07fc4 	movi	r7,511
    6a40:	01800044 	movi	r6,1
    6a44:	e17ffd17 	ldw	r5,-12(fp)
    6a48:	01000074 	movhi	r4,1
    6a4c:	2132e604 	addi	r4,r4,-13416
    6a50:	000695c0 	call	695c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    6a54:	01c07fc4 	movi	r7,511
    6a58:	000d883a 	mov	r6,zero
    6a5c:	e17ffe17 	ldw	r5,-8(fp)
    6a60:	01000074 	movhi	r4,1
    6a64:	2132e304 	addi	r4,r4,-13428
    6a68:	000695c0 	call	695c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    6a6c:	01c07fc4 	movi	r7,511
    6a70:	01800044 	movi	r6,1
    6a74:	e17fff17 	ldw	r5,-4(fp)
    6a78:	01000074 	movhi	r4,1
    6a7c:	2132e904 	addi	r4,r4,-13404
    6a80:	000695c0 	call	695c <alt_open_fd>
}  
    6a84:	0001883a 	nop
    6a88:	e037883a 	mov	sp,fp
    6a8c:	dfc00117 	ldw	ra,4(sp)
    6a90:	df000017 	ldw	fp,0(sp)
    6a94:	dec00204 	addi	sp,sp,8
    6a98:	f800283a 	ret

00006a9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6a9c:	defffe04 	addi	sp,sp,-8
    6aa0:	dfc00115 	stw	ra,4(sp)
    6aa4:	df000015 	stw	fp,0(sp)
    6aa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    6aac:	d0a01117 	ldw	r2,-32700(gp)
    6ab0:	10000326 	beq	r2,zero,6ac0 <alt_get_errno+0x24>
    6ab4:	d0a01117 	ldw	r2,-32700(gp)
    6ab8:	103ee83a 	callr	r2
    6abc:	00000106 	br	6ac4 <alt_get_errno+0x28>
    6ac0:	d0a74d04 	addi	r2,gp,-25292
}
    6ac4:	e037883a 	mov	sp,fp
    6ac8:	dfc00117 	ldw	ra,4(sp)
    6acc:	df000017 	ldw	fp,0(sp)
    6ad0:	dec00204 	addi	sp,sp,8
    6ad4:	f800283a 	ret

00006ad8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    6ad8:	defffd04 	addi	sp,sp,-12
    6adc:	df000215 	stw	fp,8(sp)
    6ae0:	df000204 	addi	fp,sp,8
    6ae4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    6ae8:	e0bfff17 	ldw	r2,-4(fp)
    6aec:	10800217 	ldw	r2,8(r2)
    6af0:	10d00034 	orhi	r3,r2,16384
    6af4:	e0bfff17 	ldw	r2,-4(fp)
    6af8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6afc:	e03ffe15 	stw	zero,-8(fp)
    6b00:	00001d06 	br	6b78 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    6b04:	00800074 	movhi	r2,1
    6b08:	10b2e304 	addi	r2,r2,-13428
    6b0c:	e0fffe17 	ldw	r3,-8(fp)
    6b10:	18c00324 	muli	r3,r3,12
    6b14:	10c5883a 	add	r2,r2,r3
    6b18:	10c00017 	ldw	r3,0(r2)
    6b1c:	e0bfff17 	ldw	r2,-4(fp)
    6b20:	10800017 	ldw	r2,0(r2)
    6b24:	1880111e 	bne	r3,r2,6b6c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    6b28:	00800074 	movhi	r2,1
    6b2c:	10b2e304 	addi	r2,r2,-13428
    6b30:	e0fffe17 	ldw	r3,-8(fp)
    6b34:	18c00324 	muli	r3,r3,12
    6b38:	10c5883a 	add	r2,r2,r3
    6b3c:	10800204 	addi	r2,r2,8
    6b40:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    6b44:	1000090e 	bge	r2,zero,6b6c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    6b48:	e0bffe17 	ldw	r2,-8(fp)
    6b4c:	10c00324 	muli	r3,r2,12
    6b50:	00800074 	movhi	r2,1
    6b54:	10b2e304 	addi	r2,r2,-13428
    6b58:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    6b5c:	e0bfff17 	ldw	r2,-4(fp)
    6b60:	18800226 	beq	r3,r2,6b6c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    6b64:	00bffcc4 	movi	r2,-13
    6b68:	00000806 	br	6b8c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6b6c:	e0bffe17 	ldw	r2,-8(fp)
    6b70:	10800044 	addi	r2,r2,1
    6b74:	e0bffe15 	stw	r2,-8(fp)
    6b78:	d0a01017 	ldw	r2,-32704(gp)
    6b7c:	1007883a 	mov	r3,r2
    6b80:	e0bffe17 	ldw	r2,-8(fp)
    6b84:	18bfdf2e 	bgeu	r3,r2,6b04 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006b04>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    6b88:	0005883a 	mov	r2,zero
}
    6b8c:	e037883a 	mov	sp,fp
    6b90:	df000017 	ldw	fp,0(sp)
    6b94:	dec00104 	addi	sp,sp,4
    6b98:	f800283a 	ret

00006b9c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    6b9c:	defff604 	addi	sp,sp,-40
    6ba0:	dfc00915 	stw	ra,36(sp)
    6ba4:	df000815 	stw	fp,32(sp)
    6ba8:	df000804 	addi	fp,sp,32
    6bac:	e13ffd15 	stw	r4,-12(fp)
    6bb0:	e17ffe15 	stw	r5,-8(fp)
    6bb4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    6bb8:	00bfffc4 	movi	r2,-1
    6bbc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    6bc0:	00bffb44 	movi	r2,-19
    6bc4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    6bc8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    6bcc:	d1600e04 	addi	r5,gp,-32712
    6bd0:	e13ffd17 	ldw	r4,-12(fp)
    6bd4:	00068980 	call	6898 <alt_find_dev>
    6bd8:	e0bff815 	stw	r2,-32(fp)
    6bdc:	e0bff817 	ldw	r2,-32(fp)
    6be0:	1000051e 	bne	r2,zero,6bf8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    6be4:	e13ffd17 	ldw	r4,-12(fp)
    6be8:	0006eb80 	call	6eb8 <alt_find_file>
    6bec:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    6bf0:	00800044 	movi	r2,1
    6bf4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    6bf8:	e0bff817 	ldw	r2,-32(fp)
    6bfc:	10002926 	beq	r2,zero,6ca4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    6c00:	e13ff817 	ldw	r4,-32(fp)
    6c04:	0006fc00 	call	6fc0 <alt_get_fd>
    6c08:	e0bff915 	stw	r2,-28(fp)
    6c0c:	e0bff917 	ldw	r2,-28(fp)
    6c10:	1000030e 	bge	r2,zero,6c20 <open+0x84>
    {
      status = index;
    6c14:	e0bff917 	ldw	r2,-28(fp)
    6c18:	e0bffa15 	stw	r2,-24(fp)
    6c1c:	00002306 	br	6cac <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    6c20:	e0bff917 	ldw	r2,-28(fp)
    6c24:	10c00324 	muli	r3,r2,12
    6c28:	00800074 	movhi	r2,1
    6c2c:	10b2e304 	addi	r2,r2,-13428
    6c30:	1885883a 	add	r2,r3,r2
    6c34:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    6c38:	e0fffe17 	ldw	r3,-8(fp)
    6c3c:	00900034 	movhi	r2,16384
    6c40:	10bfffc4 	addi	r2,r2,-1
    6c44:	1886703a 	and	r3,r3,r2
    6c48:	e0bffc17 	ldw	r2,-16(fp)
    6c4c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    6c50:	e0bffb17 	ldw	r2,-20(fp)
    6c54:	1000051e 	bne	r2,zero,6c6c <open+0xd0>
    6c58:	e13ffc17 	ldw	r4,-16(fp)
    6c5c:	0006ad80 	call	6ad8 <alt_file_locked>
    6c60:	e0bffa15 	stw	r2,-24(fp)
    6c64:	e0bffa17 	ldw	r2,-24(fp)
    6c68:	10001016 	blt	r2,zero,6cac <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    6c6c:	e0bff817 	ldw	r2,-32(fp)
    6c70:	10800317 	ldw	r2,12(r2)
    6c74:	10000826 	beq	r2,zero,6c98 <open+0xfc>
    6c78:	e0bff817 	ldw	r2,-32(fp)
    6c7c:	10800317 	ldw	r2,12(r2)
    6c80:	e1ffff17 	ldw	r7,-4(fp)
    6c84:	e1bffe17 	ldw	r6,-8(fp)
    6c88:	e17ffd17 	ldw	r5,-12(fp)
    6c8c:	e13ffc17 	ldw	r4,-16(fp)
    6c90:	103ee83a 	callr	r2
    6c94:	00000106 	br	6c9c <open+0x100>
    6c98:	0005883a 	mov	r2,zero
    6c9c:	e0bffa15 	stw	r2,-24(fp)
    6ca0:	00000206 	br	6cac <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    6ca4:	00bffb44 	movi	r2,-19
    6ca8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    6cac:	e0bffa17 	ldw	r2,-24(fp)
    6cb0:	1000090e 	bge	r2,zero,6cd8 <open+0x13c>
  {
    alt_release_fd (index);  
    6cb4:	e13ff917 	ldw	r4,-28(fp)
    6cb8:	00045dc0 	call	45dc <alt_release_fd>
    ALT_ERRNO = -status;
    6cbc:	0006a9c0 	call	6a9c <alt_get_errno>
    6cc0:	1007883a 	mov	r3,r2
    6cc4:	e0bffa17 	ldw	r2,-24(fp)
    6cc8:	0085c83a 	sub	r2,zero,r2
    6ccc:	18800015 	stw	r2,0(r3)
    return -1;
    6cd0:	00bfffc4 	movi	r2,-1
    6cd4:	00000106 	br	6cdc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    6cd8:	e0bff917 	ldw	r2,-28(fp)
}
    6cdc:	e037883a 	mov	sp,fp
    6ce0:	dfc00117 	ldw	ra,4(sp)
    6ce4:	df000017 	ldw	fp,0(sp)
    6ce8:	dec00204 	addi	sp,sp,8
    6cec:	f800283a 	ret

00006cf0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    6cf0:	defffa04 	addi	sp,sp,-24
    6cf4:	df000515 	stw	fp,20(sp)
    6cf8:	df000504 	addi	fp,sp,20
    6cfc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6d00:	0005303a 	rdctl	r2,status
    6d04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6d08:	e0fffc17 	ldw	r3,-16(fp)
    6d0c:	00bfff84 	movi	r2,-2
    6d10:	1884703a 	and	r2,r3,r2
    6d14:	1001703a 	wrctl	status,r2
  
  return context;
    6d18:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    6d1c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    6d20:	e0bfff17 	ldw	r2,-4(fp)
    6d24:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    6d28:	e0bffd17 	ldw	r2,-12(fp)
    6d2c:	10800017 	ldw	r2,0(r2)
    6d30:	e0fffd17 	ldw	r3,-12(fp)
    6d34:	18c00117 	ldw	r3,4(r3)
    6d38:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    6d3c:	e0bffd17 	ldw	r2,-12(fp)
    6d40:	10800117 	ldw	r2,4(r2)
    6d44:	e0fffd17 	ldw	r3,-12(fp)
    6d48:	18c00017 	ldw	r3,0(r3)
    6d4c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    6d50:	e0bffd17 	ldw	r2,-12(fp)
    6d54:	e0fffd17 	ldw	r3,-12(fp)
    6d58:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    6d5c:	e0bffd17 	ldw	r2,-12(fp)
    6d60:	e0fffd17 	ldw	r3,-12(fp)
    6d64:	10c00015 	stw	r3,0(r2)
    6d68:	e0bffb17 	ldw	r2,-20(fp)
    6d6c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6d70:	e0bffe17 	ldw	r2,-8(fp)
    6d74:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    6d78:	0001883a 	nop
    6d7c:	e037883a 	mov	sp,fp
    6d80:	df000017 	ldw	fp,0(sp)
    6d84:	dec00104 	addi	sp,sp,4
    6d88:	f800283a 	ret

00006d8c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    6d8c:	defffb04 	addi	sp,sp,-20
    6d90:	dfc00415 	stw	ra,16(sp)
    6d94:	df000315 	stw	fp,12(sp)
    6d98:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    6d9c:	d0a01417 	ldw	r2,-32688(gp)
    6da0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    6da4:	d0a75317 	ldw	r2,-25268(gp)
    6da8:	10800044 	addi	r2,r2,1
    6dac:	d0a75315 	stw	r2,-25268(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    6db0:	00002e06 	br	6e6c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    6db4:	e0bffd17 	ldw	r2,-12(fp)
    6db8:	10800017 	ldw	r2,0(r2)
    6dbc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    6dc0:	e0bffd17 	ldw	r2,-12(fp)
    6dc4:	10800403 	ldbu	r2,16(r2)
    6dc8:	10803fcc 	andi	r2,r2,255
    6dcc:	10000426 	beq	r2,zero,6de0 <alt_tick+0x54>
    6dd0:	d0a75317 	ldw	r2,-25268(gp)
    6dd4:	1000021e 	bne	r2,zero,6de0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    6dd8:	e0bffd17 	ldw	r2,-12(fp)
    6ddc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    6de0:	e0bffd17 	ldw	r2,-12(fp)
    6de4:	10800217 	ldw	r2,8(r2)
    6de8:	d0e75317 	ldw	r3,-25268(gp)
    6dec:	18801d36 	bltu	r3,r2,6e64 <alt_tick+0xd8>
    6df0:	e0bffd17 	ldw	r2,-12(fp)
    6df4:	10800403 	ldbu	r2,16(r2)
    6df8:	10803fcc 	andi	r2,r2,255
    6dfc:	1000191e 	bne	r2,zero,6e64 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    6e00:	e0bffd17 	ldw	r2,-12(fp)
    6e04:	10800317 	ldw	r2,12(r2)
    6e08:	e0fffd17 	ldw	r3,-12(fp)
    6e0c:	18c00517 	ldw	r3,20(r3)
    6e10:	1809883a 	mov	r4,r3
    6e14:	103ee83a 	callr	r2
    6e18:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    6e1c:	e0bfff17 	ldw	r2,-4(fp)
    6e20:	1000031e 	bne	r2,zero,6e30 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    6e24:	e13ffd17 	ldw	r4,-12(fp)
    6e28:	0006cf00 	call	6cf0 <alt_alarm_stop>
    6e2c:	00000d06 	br	6e64 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    6e30:	e0bffd17 	ldw	r2,-12(fp)
    6e34:	10c00217 	ldw	r3,8(r2)
    6e38:	e0bfff17 	ldw	r2,-4(fp)
    6e3c:	1887883a 	add	r3,r3,r2
    6e40:	e0bffd17 	ldw	r2,-12(fp)
    6e44:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    6e48:	e0bffd17 	ldw	r2,-12(fp)
    6e4c:	10c00217 	ldw	r3,8(r2)
    6e50:	d0a75317 	ldw	r2,-25268(gp)
    6e54:	1880032e 	bgeu	r3,r2,6e64 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    6e58:	e0bffd17 	ldw	r2,-12(fp)
    6e5c:	00c00044 	movi	r3,1
    6e60:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    6e64:	e0bffe17 	ldw	r2,-8(fp)
    6e68:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    6e6c:	e0fffd17 	ldw	r3,-12(fp)
    6e70:	d0a01404 	addi	r2,gp,-32688
    6e74:	18bfcf1e 	bne	r3,r2,6db4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006db4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    6e78:	0001883a 	nop
}
    6e7c:	0001883a 	nop
    6e80:	e037883a 	mov	sp,fp
    6e84:	dfc00117 	ldw	ra,4(sp)
    6e88:	df000017 	ldw	fp,0(sp)
    6e8c:	dec00204 	addi	sp,sp,8
    6e90:	f800283a 	ret

00006e94 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    6e94:	deffff04 	addi	sp,sp,-4
    6e98:	df000015 	stw	fp,0(sp)
    6e9c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    6ea0:	000170fa 	wrctl	ienable,zero
}
    6ea4:	0001883a 	nop
    6ea8:	e037883a 	mov	sp,fp
    6eac:	df000017 	ldw	fp,0(sp)
    6eb0:	dec00104 	addi	sp,sp,4
    6eb4:	f800283a 	ret

00006eb8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    6eb8:	defffb04 	addi	sp,sp,-20
    6ebc:	dfc00415 	stw	ra,16(sp)
    6ec0:	df000315 	stw	fp,12(sp)
    6ec4:	df000304 	addi	fp,sp,12
    6ec8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    6ecc:	d0a00c17 	ldw	r2,-32720(gp)
    6ed0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6ed4:	00003106 	br	6f9c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    6ed8:	e0bffd17 	ldw	r2,-12(fp)
    6edc:	10800217 	ldw	r2,8(r2)
    6ee0:	1009883a 	mov	r4,r2
    6ee4:	000106c0 	call	106c <strlen>
    6ee8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    6eec:	e0bffd17 	ldw	r2,-12(fp)
    6ef0:	10c00217 	ldw	r3,8(r2)
    6ef4:	e0bffe17 	ldw	r2,-8(fp)
    6ef8:	10bfffc4 	addi	r2,r2,-1
    6efc:	1885883a 	add	r2,r3,r2
    6f00:	10800003 	ldbu	r2,0(r2)
    6f04:	10803fcc 	andi	r2,r2,255
    6f08:	1080201c 	xori	r2,r2,128
    6f0c:	10bfe004 	addi	r2,r2,-128
    6f10:	10800bd8 	cmpnei	r2,r2,47
    6f14:	1000031e 	bne	r2,zero,6f24 <alt_find_file+0x6c>
    {
      len -= 1;
    6f18:	e0bffe17 	ldw	r2,-8(fp)
    6f1c:	10bfffc4 	addi	r2,r2,-1
    6f20:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6f24:	e0bffe17 	ldw	r2,-8(fp)
    6f28:	e0ffff17 	ldw	r3,-4(fp)
    6f2c:	1885883a 	add	r2,r3,r2
    6f30:	10800003 	ldbu	r2,0(r2)
    6f34:	10803fcc 	andi	r2,r2,255
    6f38:	1080201c 	xori	r2,r2,128
    6f3c:	10bfe004 	addi	r2,r2,-128
    6f40:	10800be0 	cmpeqi	r2,r2,47
    6f44:	1000081e 	bne	r2,zero,6f68 <alt_find_file+0xb0>
    6f48:	e0bffe17 	ldw	r2,-8(fp)
    6f4c:	e0ffff17 	ldw	r3,-4(fp)
    6f50:	1885883a 	add	r2,r3,r2
    6f54:	10800003 	ldbu	r2,0(r2)
    6f58:	10803fcc 	andi	r2,r2,255
    6f5c:	1080201c 	xori	r2,r2,128
    6f60:	10bfe004 	addi	r2,r2,-128
    6f64:	10000a1e 	bne	r2,zero,6f90 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    6f68:	e0bffd17 	ldw	r2,-12(fp)
    6f6c:	10800217 	ldw	r2,8(r2)
    6f70:	e0fffe17 	ldw	r3,-8(fp)
    6f74:	180d883a 	mov	r6,r3
    6f78:	e17fff17 	ldw	r5,-4(fp)
    6f7c:	1009883a 	mov	r4,r2
    6f80:	00071dc0 	call	71dc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6f84:	1000021e 	bne	r2,zero,6f90 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    6f88:	e0bffd17 	ldw	r2,-12(fp)
    6f8c:	00000706 	br	6fac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    6f90:	e0bffd17 	ldw	r2,-12(fp)
    6f94:	10800017 	ldw	r2,0(r2)
    6f98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6f9c:	e0fffd17 	ldw	r3,-12(fp)
    6fa0:	d0a00c04 	addi	r2,gp,-32720
    6fa4:	18bfcc1e 	bne	r3,r2,6ed8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006ed8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    6fa8:	0005883a 	mov	r2,zero
}
    6fac:	e037883a 	mov	sp,fp
    6fb0:	dfc00117 	ldw	ra,4(sp)
    6fb4:	df000017 	ldw	fp,0(sp)
    6fb8:	dec00204 	addi	sp,sp,8
    6fbc:	f800283a 	ret

00006fc0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    6fc0:	defffc04 	addi	sp,sp,-16
    6fc4:	df000315 	stw	fp,12(sp)
    6fc8:	df000304 	addi	fp,sp,12
    6fcc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    6fd0:	00bffa04 	movi	r2,-24
    6fd4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6fd8:	e03ffd15 	stw	zero,-12(fp)
    6fdc:	00001906 	br	7044 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    6fe0:	00800074 	movhi	r2,1
    6fe4:	10b2e304 	addi	r2,r2,-13428
    6fe8:	e0fffd17 	ldw	r3,-12(fp)
    6fec:	18c00324 	muli	r3,r3,12
    6ff0:	10c5883a 	add	r2,r2,r3
    6ff4:	10800017 	ldw	r2,0(r2)
    6ff8:	10000f1e 	bne	r2,zero,7038 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    6ffc:	00800074 	movhi	r2,1
    7000:	10b2e304 	addi	r2,r2,-13428
    7004:	e0fffd17 	ldw	r3,-12(fp)
    7008:	18c00324 	muli	r3,r3,12
    700c:	10c5883a 	add	r2,r2,r3
    7010:	e0ffff17 	ldw	r3,-4(fp)
    7014:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    7018:	d0e01017 	ldw	r3,-32704(gp)
    701c:	e0bffd17 	ldw	r2,-12(fp)
    7020:	1880020e 	bge	r3,r2,702c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    7024:	e0bffd17 	ldw	r2,-12(fp)
    7028:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
    702c:	e0bffd17 	ldw	r2,-12(fp)
    7030:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    7034:	00000606 	br	7050 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    7038:	e0bffd17 	ldw	r2,-12(fp)
    703c:	10800044 	addi	r2,r2,1
    7040:	e0bffd15 	stw	r2,-12(fp)
    7044:	e0bffd17 	ldw	r2,-12(fp)
    7048:	10800810 	cmplti	r2,r2,32
    704c:	103fe41e 	bne	r2,zero,6fe0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0006fe0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    7050:	e0bffe17 	ldw	r2,-8(fp)
}
    7054:	e037883a 	mov	sp,fp
    7058:	df000017 	ldw	fp,0(sp)
    705c:	dec00104 	addi	sp,sp,4
    7060:	f800283a 	ret

00007064 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    7064:	defffb04 	addi	sp,sp,-20
    7068:	df000415 	stw	fp,16(sp)
    706c:	df000404 	addi	fp,sp,16
    7070:	e13ffe15 	stw	r4,-8(fp)
    7074:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    7078:	e0bfff17 	ldw	r2,-4(fp)
    707c:	10840070 	cmpltui	r2,r2,4097
    7080:	1000021e 	bne	r2,zero,708c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    7084:	00840004 	movi	r2,4096
    7088:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    708c:	e0fffe17 	ldw	r3,-8(fp)
    7090:	e0bfff17 	ldw	r2,-4(fp)
    7094:	1885883a 	add	r2,r3,r2
    7098:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    709c:	e0bffe17 	ldw	r2,-8(fp)
    70a0:	e0bffc15 	stw	r2,-16(fp)
    70a4:	00000506 	br	70bc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    70a8:	e0bffc17 	ldw	r2,-16(fp)
    70ac:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    70b0:	e0bffc17 	ldw	r2,-16(fp)
    70b4:	10800804 	addi	r2,r2,32
    70b8:	e0bffc15 	stw	r2,-16(fp)
    70bc:	e0fffc17 	ldw	r3,-16(fp)
    70c0:	e0bffd17 	ldw	r2,-12(fp)
    70c4:	18bff836 	bltu	r3,r2,70a8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00070a8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    70c8:	e0bffe17 	ldw	r2,-8(fp)
    70cc:	108007cc 	andi	r2,r2,31
    70d0:	10000226 	beq	r2,zero,70dc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    70d4:	e0bffc17 	ldw	r2,-16(fp)
    70d8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    70dc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    70e0:	0001883a 	nop
    70e4:	e037883a 	mov	sp,fp
    70e8:	df000017 	ldw	fp,0(sp)
    70ec:	dec00104 	addi	sp,sp,4
    70f0:	f800283a 	ret

000070f4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    70f4:	defffe04 	addi	sp,sp,-8
    70f8:	df000115 	stw	fp,4(sp)
    70fc:	df000104 	addi	fp,sp,4
    7100:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    7104:	e0bfff17 	ldw	r2,-4(fp)
    7108:	10bffe84 	addi	r2,r2,-6
    710c:	10c00428 	cmpgeui	r3,r2,16
    7110:	18001a1e 	bne	r3,zero,717c <alt_exception_cause_generated_bad_addr+0x88>
    7114:	100690ba 	slli	r3,r2,2
    7118:	00800034 	movhi	r2,0
    711c:	109c4b04 	addi	r2,r2,28972
    7120:	1885883a 	add	r2,r3,r2
    7124:	10800017 	ldw	r2,0(r2)
    7128:	1000683a 	jmp	r2
    712c:	0000716c 	andhi	zero,zero,453
    7130:	0000716c 	andhi	zero,zero,453
    7134:	0000717c 	xorhi	zero,zero,453
    7138:	0000717c 	xorhi	zero,zero,453
    713c:	0000717c 	xorhi	zero,zero,453
    7140:	0000716c 	andhi	zero,zero,453
    7144:	00007174 	movhi	zero,453
    7148:	0000717c 	xorhi	zero,zero,453
    714c:	0000716c 	andhi	zero,zero,453
    7150:	0000716c 	andhi	zero,zero,453
    7154:	0000717c 	xorhi	zero,zero,453
    7158:	0000716c 	andhi	zero,zero,453
    715c:	00007174 	movhi	zero,453
    7160:	0000717c 	xorhi	zero,zero,453
    7164:	0000717c 	xorhi	zero,zero,453
    7168:	0000716c 	andhi	zero,zero,453
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    716c:	00800044 	movi	r2,1
    7170:	00000306 	br	7180 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    7174:	0005883a 	mov	r2,zero
    7178:	00000106 	br	7180 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    717c:	0005883a 	mov	r2,zero
  }
}
    7180:	e037883a 	mov	sp,fp
    7184:	df000017 	ldw	fp,0(sp)
    7188:	dec00104 	addi	sp,sp,4
    718c:	f800283a 	ret

00007190 <atexit>:
    7190:	200b883a 	mov	r5,r4
    7194:	000f883a 	mov	r7,zero
    7198:	000d883a 	mov	r6,zero
    719c:	0009883a 	mov	r4,zero
    71a0:	00072581 	jmpi	7258 <__register_exitproc>

000071a4 <exit>:
    71a4:	defffe04 	addi	sp,sp,-8
    71a8:	000b883a 	mov	r5,zero
    71ac:	dc000015 	stw	r16,0(sp)
    71b0:	dfc00115 	stw	ra,4(sp)
    71b4:	2021883a 	mov	r16,r4
    71b8:	00073700 	call	7370 <__call_exitprocs>
    71bc:	00800074 	movhi	r2,1
    71c0:	10b7f004 	addi	r2,r2,-8256
    71c4:	11000017 	ldw	r4,0(r2)
    71c8:	20800f17 	ldw	r2,60(r4)
    71cc:	10000126 	beq	r2,zero,71d4 <exit+0x30>
    71d0:	103ee83a 	callr	r2
    71d4:	8009883a 	mov	r4,r16
    71d8:	00074f00 	call	74f0 <_exit>

000071dc <memcmp>:
    71dc:	01c000c4 	movi	r7,3
    71e0:	3980192e 	bgeu	r7,r6,7248 <memcmp+0x6c>
    71e4:	2144b03a 	or	r2,r4,r5
    71e8:	11c4703a 	and	r2,r2,r7
    71ec:	10000f26 	beq	r2,zero,722c <memcmp+0x50>
    71f0:	20800003 	ldbu	r2,0(r4)
    71f4:	28c00003 	ldbu	r3,0(r5)
    71f8:	10c0151e 	bne	r2,r3,7250 <memcmp+0x74>
    71fc:	31bfff84 	addi	r6,r6,-2
    7200:	01ffffc4 	movi	r7,-1
    7204:	00000406 	br	7218 <memcmp+0x3c>
    7208:	20800003 	ldbu	r2,0(r4)
    720c:	28c00003 	ldbu	r3,0(r5)
    7210:	31bfffc4 	addi	r6,r6,-1
    7214:	10c00e1e 	bne	r2,r3,7250 <memcmp+0x74>
    7218:	21000044 	addi	r4,r4,1
    721c:	29400044 	addi	r5,r5,1
    7220:	31fff91e 	bne	r6,r7,7208 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0007208>
    7224:	0005883a 	mov	r2,zero
    7228:	f800283a 	ret
    722c:	20c00017 	ldw	r3,0(r4)
    7230:	28800017 	ldw	r2,0(r5)
    7234:	18bfee1e 	bne	r3,r2,71f0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00071f0>
    7238:	31bfff04 	addi	r6,r6,-4
    723c:	21000104 	addi	r4,r4,4
    7240:	29400104 	addi	r5,r5,4
    7244:	39bff936 	bltu	r7,r6,722c <__alt_mem_ARM_A9_HPS_axi_sdram+0xc000722c>
    7248:	303fe91e 	bne	r6,zero,71f0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00071f0>
    724c:	003ff506 	br	7224 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0007224>
    7250:	10c5c83a 	sub	r2,r2,r3
    7254:	f800283a 	ret

00007258 <__register_exitproc>:
    7258:	defffa04 	addi	sp,sp,-24
    725c:	dc000315 	stw	r16,12(sp)
    7260:	04000074 	movhi	r16,1
    7264:	8437f004 	addi	r16,r16,-8256
    7268:	80c00017 	ldw	r3,0(r16)
    726c:	dc400415 	stw	r17,16(sp)
    7270:	dfc00515 	stw	ra,20(sp)
    7274:	18805217 	ldw	r2,328(r3)
    7278:	2023883a 	mov	r17,r4
    727c:	10003726 	beq	r2,zero,735c <__register_exitproc+0x104>
    7280:	10c00117 	ldw	r3,4(r2)
    7284:	010007c4 	movi	r4,31
    7288:	20c00e16 	blt	r4,r3,72c4 <__register_exitproc+0x6c>
    728c:	1a000044 	addi	r8,r3,1
    7290:	8800221e 	bne	r17,zero,731c <__register_exitproc+0xc4>
    7294:	18c00084 	addi	r3,r3,2
    7298:	18c7883a 	add	r3,r3,r3
    729c:	18c7883a 	add	r3,r3,r3
    72a0:	12000115 	stw	r8,4(r2)
    72a4:	10c7883a 	add	r3,r2,r3
    72a8:	19400015 	stw	r5,0(r3)
    72ac:	0005883a 	mov	r2,zero
    72b0:	dfc00517 	ldw	ra,20(sp)
    72b4:	dc400417 	ldw	r17,16(sp)
    72b8:	dc000317 	ldw	r16,12(sp)
    72bc:	dec00604 	addi	sp,sp,24
    72c0:	f800283a 	ret
    72c4:	00800034 	movhi	r2,0
    72c8:	10800004 	addi	r2,r2,0
    72cc:	10002626 	beq	r2,zero,7368 <__register_exitproc+0x110>
    72d0:	01006404 	movi	r4,400
    72d4:	d9400015 	stw	r5,0(sp)
    72d8:	d9800115 	stw	r6,4(sp)
    72dc:	d9c00215 	stw	r7,8(sp)
    72e0:	00000000 	call	0 <__alt_mem_SDRAM>
    72e4:	d9400017 	ldw	r5,0(sp)
    72e8:	d9800117 	ldw	r6,4(sp)
    72ec:	d9c00217 	ldw	r7,8(sp)
    72f0:	10001d26 	beq	r2,zero,7368 <__register_exitproc+0x110>
    72f4:	81000017 	ldw	r4,0(r16)
    72f8:	10000115 	stw	zero,4(r2)
    72fc:	02000044 	movi	r8,1
    7300:	22405217 	ldw	r9,328(r4)
    7304:	0007883a 	mov	r3,zero
    7308:	12400015 	stw	r9,0(r2)
    730c:	20805215 	stw	r2,328(r4)
    7310:	10006215 	stw	zero,392(r2)
    7314:	10006315 	stw	zero,396(r2)
    7318:	883fde26 	beq	r17,zero,7294 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0007294>
    731c:	18c9883a 	add	r4,r3,r3
    7320:	2109883a 	add	r4,r4,r4
    7324:	1109883a 	add	r4,r2,r4
    7328:	21802215 	stw	r6,136(r4)
    732c:	01800044 	movi	r6,1
    7330:	12406217 	ldw	r9,392(r2)
    7334:	30cc983a 	sll	r6,r6,r3
    7338:	4992b03a 	or	r9,r9,r6
    733c:	12406215 	stw	r9,392(r2)
    7340:	21c04215 	stw	r7,264(r4)
    7344:	01000084 	movi	r4,2
    7348:	893fd21e 	bne	r17,r4,7294 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0007294>
    734c:	11006317 	ldw	r4,396(r2)
    7350:	218cb03a 	or	r6,r4,r6
    7354:	11806315 	stw	r6,396(r2)
    7358:	003fce06 	br	7294 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0007294>
    735c:	18805304 	addi	r2,r3,332
    7360:	18805215 	stw	r2,328(r3)
    7364:	003fc606 	br	7280 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0007280>
    7368:	00bfffc4 	movi	r2,-1
    736c:	003fd006 	br	72b0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00072b0>

00007370 <__call_exitprocs>:
    7370:	defff504 	addi	sp,sp,-44
    7374:	df000915 	stw	fp,36(sp)
    7378:	dd400615 	stw	r21,24(sp)
    737c:	dc800315 	stw	r18,12(sp)
    7380:	dfc00a15 	stw	ra,40(sp)
    7384:	ddc00815 	stw	r23,32(sp)
    7388:	dd800715 	stw	r22,28(sp)
    738c:	dd000515 	stw	r20,20(sp)
    7390:	dcc00415 	stw	r19,16(sp)
    7394:	dc400215 	stw	r17,8(sp)
    7398:	dc000115 	stw	r16,4(sp)
    739c:	d9000015 	stw	r4,0(sp)
    73a0:	2839883a 	mov	fp,r5
    73a4:	04800044 	movi	r18,1
    73a8:	057fffc4 	movi	r21,-1
    73ac:	00800074 	movhi	r2,1
    73b0:	10b7f004 	addi	r2,r2,-8256
    73b4:	12000017 	ldw	r8,0(r2)
    73b8:	45005217 	ldw	r20,328(r8)
    73bc:	44c05204 	addi	r19,r8,328
    73c0:	a0001c26 	beq	r20,zero,7434 <__call_exitprocs+0xc4>
    73c4:	a0800117 	ldw	r2,4(r20)
    73c8:	15ffffc4 	addi	r23,r2,-1
    73cc:	b8000d16 	blt	r23,zero,7404 <__call_exitprocs+0x94>
    73d0:	14000044 	addi	r16,r2,1
    73d4:	8421883a 	add	r16,r16,r16
    73d8:	8421883a 	add	r16,r16,r16
    73dc:	84402004 	addi	r17,r16,128
    73e0:	a463883a 	add	r17,r20,r17
    73e4:	a421883a 	add	r16,r20,r16
    73e8:	e0001e26 	beq	fp,zero,7464 <__call_exitprocs+0xf4>
    73ec:	80804017 	ldw	r2,256(r16)
    73f0:	e0801c26 	beq	fp,r2,7464 <__call_exitprocs+0xf4>
    73f4:	bdffffc4 	addi	r23,r23,-1
    73f8:	843fff04 	addi	r16,r16,-4
    73fc:	8c7fff04 	addi	r17,r17,-4
    7400:	bd7ff91e 	bne	r23,r21,73e8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00073e8>
    7404:	00800034 	movhi	r2,0
    7408:	10800004 	addi	r2,r2,0
    740c:	10000926 	beq	r2,zero,7434 <__call_exitprocs+0xc4>
    7410:	a0800117 	ldw	r2,4(r20)
    7414:	1000301e 	bne	r2,zero,74d8 <__call_exitprocs+0x168>
    7418:	a0800017 	ldw	r2,0(r20)
    741c:	10003226 	beq	r2,zero,74e8 <__call_exitprocs+0x178>
    7420:	a009883a 	mov	r4,r20
    7424:	98800015 	stw	r2,0(r19)
    7428:	00000000 	call	0 <__alt_mem_SDRAM>
    742c:	9d000017 	ldw	r20,0(r19)
    7430:	a03fe41e 	bne	r20,zero,73c4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00073c4>
    7434:	dfc00a17 	ldw	ra,40(sp)
    7438:	df000917 	ldw	fp,36(sp)
    743c:	ddc00817 	ldw	r23,32(sp)
    7440:	dd800717 	ldw	r22,28(sp)
    7444:	dd400617 	ldw	r21,24(sp)
    7448:	dd000517 	ldw	r20,20(sp)
    744c:	dcc00417 	ldw	r19,16(sp)
    7450:	dc800317 	ldw	r18,12(sp)
    7454:	dc400217 	ldw	r17,8(sp)
    7458:	dc000117 	ldw	r16,4(sp)
    745c:	dec00b04 	addi	sp,sp,44
    7460:	f800283a 	ret
    7464:	a0800117 	ldw	r2,4(r20)
    7468:	80c00017 	ldw	r3,0(r16)
    746c:	10bfffc4 	addi	r2,r2,-1
    7470:	15c01426 	beq	r2,r23,74c4 <__call_exitprocs+0x154>
    7474:	80000015 	stw	zero,0(r16)
    7478:	183fde26 	beq	r3,zero,73f4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00073f4>
    747c:	95c8983a 	sll	r4,r18,r23
    7480:	a0806217 	ldw	r2,392(r20)
    7484:	a5800117 	ldw	r22,4(r20)
    7488:	2084703a 	and	r2,r4,r2
    748c:	10000b26 	beq	r2,zero,74bc <__call_exitprocs+0x14c>
    7490:	a0806317 	ldw	r2,396(r20)
    7494:	2088703a 	and	r4,r4,r2
    7498:	20000c1e 	bne	r4,zero,74cc <__call_exitprocs+0x15c>
    749c:	89400017 	ldw	r5,0(r17)
    74a0:	d9000017 	ldw	r4,0(sp)
    74a4:	183ee83a 	callr	r3
    74a8:	a0800117 	ldw	r2,4(r20)
    74ac:	15bfbf1e 	bne	r2,r22,73ac <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00073ac>
    74b0:	98800017 	ldw	r2,0(r19)
    74b4:	153fcf26 	beq	r2,r20,73f4 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00073f4>
    74b8:	003fbc06 	br	73ac <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00073ac>
    74bc:	183ee83a 	callr	r3
    74c0:	003ff906 	br	74a8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00074a8>
    74c4:	a5c00115 	stw	r23,4(r20)
    74c8:	003feb06 	br	7478 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0007478>
    74cc:	89000017 	ldw	r4,0(r17)
    74d0:	183ee83a 	callr	r3
    74d4:	003ff406 	br	74a8 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00074a8>
    74d8:	a0800017 	ldw	r2,0(r20)
    74dc:	a027883a 	mov	r19,r20
    74e0:	1029883a 	mov	r20,r2
    74e4:	003fb606 	br	73c0 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00073c0>
    74e8:	0005883a 	mov	r2,zero
    74ec:	003ffb06 	br	74dc <__alt_mem_ARM_A9_HPS_axi_sdram+0xc00074dc>

000074f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    74f0:	defffd04 	addi	sp,sp,-12
    74f4:	df000215 	stw	fp,8(sp)
    74f8:	df000204 	addi	fp,sp,8
    74fc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    7500:	0001883a 	nop
    7504:	e0bfff17 	ldw	r2,-4(fp)
    7508:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    750c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    7510:	10000226 	beq	r2,zero,751c <_exit+0x2c>
    ALT_SIM_FAIL();
    7514:	002af070 	cmpltui	zero,zero,43969
    7518:	00000106 	br	7520 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    751c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    7520:	003fff06 	br	7520 <__alt_mem_ARM_A9_HPS_axi_sdram+0xc0007520>
